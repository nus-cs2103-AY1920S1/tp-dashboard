[
  {
    "path": "MyTheme.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".blue {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-control-inner-background: transparent;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: rgba(255, 255, 0, 0.2);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: #FF00FF;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /*-fx-table-cell-border-color: transparent;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /*-fx-table-header-border-color: transparent;*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".v-box {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".card_big_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Candara\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 6;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".card_small_label {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green !important;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".profile-name {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-text-fill: green;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": " }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".profile-asl {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".bio-table {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".bio-table .table-row-cell {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".field-column {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Arial\" !important;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt !important;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-style: italic !important;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-weight: bold !important;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green !important;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".field-column .label {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Arial\" !important;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt !important;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-style: italic !important;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green !important;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".data-column .label{"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Arial\" !important;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt !important;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green !important;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whneo97"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "whneo97"
        },
        "content": "  -fx-text-fill: green;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".profile-scroll {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background: transparent !important;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent !important;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: transparent !important;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 428
    }
  },
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d Sugar Mummy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "https://travis-ci.com/AY1920S1-CS2103-T16-1/main[image:https://travis-ci.com/AY1920S1-CS2103-T16-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "SugarMummy aims to help type II diabetes patients to live more healthily, conveniently, and happily."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "It is a free software with useful functions:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Data tracker for various data types (blood sugar levels,  diets,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "exercise, clinic appointments, medical finance and so on!)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Easy-to-use reminder and calendar"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Personalized user experience and bio encouragements"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Weekly and Monthly summary for your activities and health level"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Customized recommendations for food and fun quizzes about"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "healthy dieting"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d prerequisites"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Please ensure you have Java 11 or above installed in your Computer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Installing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Download the latest `sugarmummy.jar` link:https://github.com/AY1920S1-CS2103-T16-1/main/releases[here]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for data records."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ". Double-click the file to start the app."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* This project is adapted from AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 27,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "allprojects {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    gradle.projectsEvaluated {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            options.compilerArgs \u003c\u003c \"-Xlint:unchecked\" \u003c\u003c \"-Xlint:deprecation\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 155,
      "whneo97": 8
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "SugarMummy was developed by the https://github.com/AY1920S1-CS2103-T16-1[CS2103-T16-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003d\u003d\u003d Stephen Chua Rong Zhi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "image::scwaterbear.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "{empty}[https://github.com/scwaterbear[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Responsibilities: Data logging"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003d\u003d\u003d Jiang Yuxin"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "image::jyx11011.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "{empty}[https://github.com/jyx11011[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Responsibilities: Calendar and reminder"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003d\u003d\u003d Neo Weihong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "image::whneo97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "{empty}[https://github.com/whneo97[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Responsibilities: Personalised user experience"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003d\u003d\u003d Chen Xi"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "image::chen-xi-cx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "{empty}[https://github.com/chen-xi-cx[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Responsibilities: Weekly summary and data analysis"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003d\u003d\u003d Zhang Xiaoyu"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "image::zhanghuafan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "{empty}[https://github.com/ZhangHuafan[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Responsibilities: Education and quiz"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 25,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://https://github.com/AY1920S1-CS2103-T16-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* *Email us* : You can also reach any of our project developers at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "** Chen Xi: e0031241@u.nus.edu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "** Jiang Yuxin: jiangyuxin@u.nus.edu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "** Neo Weihong: neo_weihong@u.nus.edu.sg"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "** Stephen Chua Rong Zhi: stephenchua@u.nus.edu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "** Zhang Xiaoyu: e0261883@u.nus.edu"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "whneo97": 8
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d Sugar Mummy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "By: `AY1920S1-CS2103-T16-1`      Since: `Oct 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* diagnosed with type 2 diabetes"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* consults a professional health practitioner"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* has a need to manage a significant number of health-related records and tasks"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* is diligent in immediately recording events but subsequently forgets events"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* wants to gain a deeper understanding of his/her condition"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* is struggling with obesity and lack of sleep"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* is motivated by challenges"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* enjoys a personalised experience"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* needs to know his/her effectiveness in managing diabetes at a glance"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* reads and writes competently in English"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*Value proposition*: convenient all-in-one app for effectively managing diabetes that is faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whneo97"
        },
        "content": "[width\u003d\"90%\",cols\u003d\"20%,\u003c25%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic patient who has different options on medical care |know exactly how much I am spending on medication and consultation |know which hospitals to seek medical care from"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |very busy diabetic |use a flexible calendar system that can account for updates | easily make changes to appointments that I have to change often due to other commitments"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |keep track of my medical expenses |better manage my finance"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |person who likes numbers |see summary statistics |better track my progress"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |get an overview of my dieting/exercising data regularly |save time because I am working 9-5"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |forgetful diabetic |be reminded to attend my medical appointments |know how well my existing measures work"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |patient who has recently been diagnosed of diabetes |be informed when I eat food with high sugar content |live better and reduce the chances of further health deterioration"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |lazy diabetic |have reminders for exercising |force myself to work out."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |busy diabetic |be reminded on when to refill / stock up on insulin|"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |see graphic data summary |minimise the need to read long paragraphs"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic patient who has just been recently diagnosed |have some motivation and reminders on my diet |reduce my struggles of cutting down on meals or even exercise that is really tough for me"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |automatically calculate my daily sugar/carb intake |eliminate the trouble to search for the levels of sugar content in the food I eat everyday."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic who values my punctuality |adhere to my appointment timings |uphold my principles and take responsibility of my own health by not missing my appointments."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |reminded to take my insulin regularly|"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |diabetic |be able to track my sugar levels|"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* * *` |task-oriented diabetic patient |have a goal to work towards or a challenge to work on everyday |have a sense of direction in what I can do to improve my health"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |caretaker of an elderly patient with diabetes whose family members are busy working |reliable app to keep track of all the patients\u0027 activities |can answer to the family members who have entrusted unto me this responsibility of care"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |busy person |be able to easily sort and prioritize my tasks |better manage my time"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |diabetic patient who is often being referred to new doctors at different specialist clinics every now and then |be able to be able to export all my records and activities at once |rule out the possibility of missing any information during the registration process at a new clinic/ hospital I am visiting"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |family member of a diabetic |prioritize my tasks |be immediately contactable if my family member has an emergency situation that requires urgent medical attention"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |diabetic |have a customisable app with avatars and different backgrounds |enjoy a personalised experience"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |lazy and obese individual |be motivated constantly to exercise |stop procrastinating"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |forgetful diabetics patient |have a record of my doctors\u0027 advice for each medical appointment and prescription directions |better understand the steps that I can take to improve my condition until the next consultation"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |achievement-oriented diabetic | view the achievements and progress I have made on food intake |remain motivated to keep my streak on good habits going"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |paranoid diabetic who values privacy |secure/encrypt my health data and other private contact details |protect my data"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |diabetic patient with a family |have a user-friendly app that helps me manage my medical data and appointments on my own |free the burden I have on my family"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`* *` |diabetic patient with a family |have a user-friendly app with natural commands that helps me manage my medical data and appointments on my own |free the burden I have on my family"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`*` |diabetic patient in a community of diabetic patients |have a standardised means of comparing our activities via a social network | learn from my peers, encourage and be encouraged through this difficult journey."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`*` |careless user  |undo my most recent actions |easily make necessary amendments and input the correct commands"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`*` |a diabetic patient who has many medical receipts - and is not very good at mathematics |have a simple calculator that is always easily accessible |instantly calculate all my medical costs when needed"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`*` |an obese working adult at high risk of diabetes |start monitoring my diet |minimise my risk of having diabetes"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|`*` |medical consultant |export my patient\u0027s health data  |save my time"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "(For all use cases below, the *System* is the `Sugar Mummy` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d\u003d\u003d Use case: Add blood sugar record"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "1.  User requests to add a blood sugar record"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "2.  System adds the blood sugar record"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* 1a. The record is incomplete or passed invalid arguments."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d\u003d\u003d Use case: Schedule a medical appointment"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "1.  User requests to add a medical appointment"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "2.  System adds the medical appointment"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "3.  System notifies user of upcoming medical appointment beforehand"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "4.  User acknowledges the notification and attends medical appointment on schedule"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* 1a. The appointment is incomplete or passed invalid arguments."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* 3a. User snoozes the notification."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 3a1. System waits for snooze time to elapse."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d\u003d\u003d Use case: Delete blood sugar record"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "1.  User requests list of blood sugar records"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "2.  System shows a list of blood sugar records"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "3.  User requests to delete a specific blood sugar record in the list"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "4.  System deletes the blood sugar record"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d\u003d\u003d Use case: Recommend diabetes-friendly food"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "1.  User requests for a diabetes-friendly food item"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "2.  System shows a diabetes-friendly food item"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "3.  User likes the recommendation"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* 3a. User dislikes the recommendation."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 3a1. User requests for another diabetes-friendly food item"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003d\u003d\u003d Use case: Update blood sugar record"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "1.  User requests list of blood sugar records"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "2.  System shows a list of blood sugar records"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "3.  User requests to update a specific blood sugar record in the list"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "4.  System updates the blood sugar record"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "* 3b. The record is incomplete or passed invalid arguments."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "** 3b1. System shows an error message."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "+"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ".  Should be able to hold up to 1000 health-related records and tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ".  Third-party frameworks/libraries used should be free, open-source, and have permissive license terms, should not require any installation by the user of this software, and approved by teaching team."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ".  Should work without requiring an installer."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ".  The software should not depend on your own remote server"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "-": 419,
      "scwaterbear": 101,
      "whneo97": 60
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d SugarMummy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ":toclevels: 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T16-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "By: `Team CS2103-T16-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Do you feel it difficult to keep the right diets for type II diabetes?"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Do you want to manage your hectic schedule?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Do you want to have a better overview of your health data?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Do you want to move to a healthier lifestyle?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If your answer is yes, then SugarMummy is perfect for you!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "SugarMummy is a lifestyle tracker and planner that aims to combat Type II diabetes by encouraging users to keep a healthy lifestyle."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Moreover, being a computer app with Command Line Interface, SugarMummy is optimized for fast typers who has access to a computer most of the time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Hope following features will benefit you and enjoy!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Data tracker for various data types (blood sugar levels, diets, exercise, clinic appointments, medical finance and so on!)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Easy-to-use reminder and calendar"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Personalized user experience and bio encouragements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Weekly and Monthly summary for your activities and health level"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Customized recommendations for food and fun quizzes about healthy dieting"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". Download the latest `sugarmummy.jar` link:https://github.com/AY1920S1-CS2103-T16-1/main/releases[here]."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for data records."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ". Double-click the file to start the app."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Some example commands you can try:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* **`add`**`r/bloodsugar v/10 t/now` : adds a `bloodsugar` record to the app."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* **`delete`**`3` : deletes the 3rd record shown in the current list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d DATA LOG"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Add a data entry to the diabetes tracker app: `add`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "Format: `add rt/RECORD_TYPE v/VALUE t/TIME [t/TIME_END]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "DateTime must be the last field."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Show a list of all data entries in the diabetes tracker app: `list`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `list [r/RECORD_TYPE] ...`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If a specific RECORD_TYPE is provided, it will list the data entries that are of RECORD_TYPE. If more than 1 RECORD_TYPE is provided, it will list all data entries of the requested types."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Otherwise, it lists all types of recent data entries."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Edit an existing entry in the diabetes tracker app: `edit`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `edit INDEX [v/VALUE] [t/TIME] [t/TIME_END]`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Edits the entry at the specified INDEX. The index refers to the index number shown in the displayed entries list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The index must be a positive integer."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Existing values will be updated to the input values."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Deletes a specified data entry from the diabetes tracker app: `delete`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Index must be a positive integer"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "The index refers to the index number shown in the displayed entries list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d CALENDAR AND REMINDER"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Add a reminder: `reminder`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `reminder DESCRIPTION t/TIME [t/TIME]... [rp/repetition] [v/venue] [p/people]`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Add a reminder at a specific time with possible detail information of other time, repetition, venue(e.g. hospital) ,people(e.g. doctor) and sound."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Add an event: `event`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `event TITLE [DESCRIPTION] t/TIME [t/END_TIME] [tp/TIME_PERIOD]  [v/venue] [p/people]`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Add an event with starting time and optional ending time."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Set a reminder some time before the event with possible detail information of venue(e.g. hospital) ,people(e.g. doctor) and sound."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Add a task: `task`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `task TITLE [DESCRIPTION] t/TIME [t/END_TIME] [tp/TIME_PERIOD] [tg/TARGET]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Add a task with starting time and optional ending time."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Set a reminder some time before the task begins and a target for the task."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Snooze reminder: `snooze`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `snooze [tp/TIME_PERIOD]`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Silence the current reminder and activate it after a time period."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Complete a task: `complete`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `complete [INDEX]... [t/TIME]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Mark all the reminders before now as completed if no argument provided."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Otherwise, mark only those tasks with indices provided or before the specific time as completed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Set time zone: `timezone`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `timezone tz/TIME_ZONE [t/TIME] [t/TIME_END]`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Set the time zone of the application permanently or in any time interval(e.g. For travelling)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Search for entries in calendar: `search`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `search [KEYWORD] [t/TIME] [t/END_TIME] [tp/TYPE] [v/VENUE] [p/PEOPLE]`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Search for all entries by providing keyword, time interval, type, venue or people."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Delete an entry in calendar `[coming in v2.0]`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Delete an event that you do not want to keep track anymore."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d PERSONALISED USER EXPERIENCE"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Show a list of all achievements the user has attained: `achievement`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `achievement`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Display the current ranking of the user (i.e. Bronze III, Bronze II, Bronze I, Silver III, Silver II, Silver I, Gold...Platinum...Diamond) followed by milestone achievements acquired by the user."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Shows a page displaying the user profile of the user: `bio`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `bio`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Display a page containing user information such as the user’s profile picture, name, nric, gender, date of birth, contact number, address and other biography information that the user would like to include."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Includes an icon used to represent the user based on his/ her BMI."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Adds a biography for the user using specified fields: `addbio`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `addbio n/NAME [nric/NRIC] [g/GENDER] [dob/DATE_OF_BIRTH] p/CONTACT_NUMBER e/EMERGENCY_CONTACT m/MEDICAL_CONDITION [a/ADDRESS] [dp/PROFILE_PICTURE_PATH] [o/OTHERS]`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Profile picture of the user is set using a given file path."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If the file that is given is invalid, the user is shown an error message."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Name, contact number, emergency contact number and medical condition are compulsory fields. (if a user of this app happens to have no medical condition, he / she may input NIL)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Delete biography `[coming in v2.0]`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a biography for the user using specified fields: `editbio`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `editbio [n/NAME] [nric/NRIC] [g/GENDER] [dob/DATE_OF_BIRTH] [p/CONTACT_NUMBER] [e/EMERGENCY_CONTACT] [m/MEDICAL_CONDITION] [a/ADDRESS] [dp/PROFILE_PICTURE_PATH] [o/OTHERS]`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Profile picture of the user is set using a given file path."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If the file that is given is invalid, the user is shown an error message."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If no parameters are set, the program displays a message suggesting the user to set biography information using the specified fields."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Sets the background picture using a specified file path: `bg`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `bg p/PATH`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "If the file that is given is invalid, the user is shown an error message."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Sets the font color of the text: `fontcolor`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `fontcolor c/COLOUR`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Sets the font to a colour specified by the user (eg. yellow, blue 00FF00)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Displays the daily motivation message of the day: `dailymsg`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `dailymsg`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Personalized avatar `[coming in v2.0]`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "User can customize his or her own avatar and the avatar will have body shapes according to user BMI."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "This helps to motivate them to have a healthy BMI."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d DATA ANALYSIS"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Display the daily/weekly/monthly average in a graph: `average`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `average a/AVERAGE_TYPE r/Record_TYPE [n/COUNT]`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "AVERAGE_TYPE is either day/week/month."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Displays a graph of the AVERAGE_TYPE average value of a particular RECORD_TYPE. COUNT is an integer value."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If COUNT is given, show only the latest COUNT number of average values."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Else, COUNT is set to 5 and show only latest 5 average values by default."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Display interesting statistics: `summary`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Examples of statistics: minimum, maximum, average, number of dangerously high blood sugar level, weekly quiz points etc"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "in suitable graph"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `summary r/RECORD_TYPE [d/START_DATE]`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If START_DATE is given, statistics from START_DATE to the current date will be retrieved."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Else, statistics will be based on all data."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Export summary of all medical records into pdf: `export`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `export [d/START_DATE]`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If START_DATE is given, summary from START_DATE to the current date will be exported."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Else, summary of all data will be exported."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d EDUCATION AND QUIZ"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Recommending food: `recmf`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Recommends a list of medically suggested foods for type II diabetes patients."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The user can specify flags:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`-b`: breakfast recommendations"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`-l`: lunch recommendations"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`-d`: dinner recommendations"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`-f`: fruit recommendations"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`-v`: vegetable recommendations"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "With specified one or more FOOD_ITEM, the user will only view recommendations match at least one item."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "However, if any food item is considered dangerous for type II diabetes patients, a warning will be shown."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "(case-insensitive)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `recmf [-b] [-l] [-d] [-f] [-v] [FOOD]...`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`recm -b strawberries`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`recm -b -l -d`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Recommending exercise: `recme`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Recommends a list of medically suggested exercises for type II diabetes patients."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `recme`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Adding new food items : `put`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Adds a new food time into certain category."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Calorie and glycemic can be attached followed by -i flag."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Otherwise, another prompt will be shown to ask for these two values."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `put FOOD[, FOOD]...[-i CALORIE GI] in CATEGORY`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`put guava -i 68 20, green apple -i 52 38 in fruits`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "`put guava in fruits`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Disliking certain foods: `dislike`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Dislikes certain foods so that those foods will no longer be shown on the recommendations. (case-insensitive)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `dislike FOOD[, FOOD]...`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Example: `dislike watermelon, chicken`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003d\u003d\u003d\u003d Playing flash cards: `game`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Shows an interactive page for user to play the flash card game."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The user will win certain points if answering a question correctly."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Format: `game`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "During the game session, the user is able to:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ". Selecting the correct answer: `\u003calphabet\u003e`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "* Answers the multiple-choice question."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If the answer is correct, the user will be awarded a few points."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "If the answer is wrong, multiple, or not within the choice range, a few points will be deducted and the correct answer"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "will be revealed."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "* Format: `\u003calphabet\u003e`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ". Skipping a certain question: `skip`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "* Skips a certain question and moves to the next question."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "* Format: `skip`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ". Exiting the game: `exit`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "* Exits the game and go back to normal page"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "* Format: `exit`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Autocomplete Command"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "SugarMummy will recommend list of possible commands that can be add on to user current input."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d Features Coming in v2.0"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Clearing all entries: `clear all`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "Clears all recorded data in SugarMummy."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Encrypting data files: `enc [KEY]`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The user can optionally provide a key to encrypt all the data. Afterwards, all the stored user input can only be viewed"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "with the user-defined key."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Detailing workout schedule"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "User can enter details of a workout schedule. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "For example: Do exercise A for 10 minutes then switch to exercise B for 5 minutes."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Timing Workout"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Displays workout instructions and a timer on screen."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Screen instruction changes when the time for that particular exercise is up."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "Time required for each exercise is dictated by stored workout schedule."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d\u003d Sharing with community"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "The user is able to interact with others who is using SugarMummy. A community platform will be provided for users to share their daily activities and health tips. This community is expected to help the user obtain encouragements and comforts."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ":hardbreaks:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "[start\u003d1]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Achievement*: `achievement`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Add*: `add r/RECORD_TYPE v/VALUE t/TIME [t/TIME_END]`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `add r/bloodsugar v/10 t/now`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Add bio* : `addbio n/NAME [nric/NRIC] [g/GENDER] [dob/DATE_OF_BIRTH] p/CONTACT_NUMBER e/EMERGENCY_CONTACT"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "m/MEDICAL_CONDITION [a/ADDRESS] [dp/PROFILE_PICTURE_PATH] [o/OTHERS]`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `addbio n/Bob p/98765432 e/91234567 m/Type II Diabetes`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Average*: `average a/AVERAGE_TYPE r/Record_TYPE [n/COUNT]`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `average a/weekly r/bloodsugar n/3`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Bio*: `bio`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Bg*: `bg p/PATH`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `bg p//Users/Bob/Pictures/bg.jpg`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Complete*: `complete [INDEX]... [t/TIME]`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `complete t/today`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Dailymsg*: `dailymsg`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Delete*: `delete INDEX`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `delete 2`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Edit*: `edit INDEX [v/VALUE] [t/TIME] [t/TIME_END]`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `edit 1 v/15 t/now`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Export*: `export [d/START_DATE]`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g `export d/01.09.2019`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Event*: `event TITLE [DESCRIPTION] t/TIME [t/END_TIME] [tp/TIME_PERIOD]  [v/venue] [p/people]`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `event appointment t/1400 20/12/2019 v/NUH p/Dr Lim`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Edit bio*: `edit [n/NAME] [nric/NRIC] [g/GENDER] [dob/DATE_OF_BIRTH] [p/CONTACT_NUMBER] [e/EMERGENCY_CONTACT]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "[m/MEDICAL_CONDITION] [a/ADDRESS] [dp/PROFILE_PICTURE_PATH] [o/OTHERS]`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `edit g/Male dp//Users/Bob/Pictures/dp.jpg`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `edit dp/C:\\\\Users\\\\Bob\\\\Pictures\\\\dp.jpg`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Font color*: `fontcolor c/COLOUR`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `fontcolor yellow`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `fontcolor 00FF00`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *List*: `list [r/RECORD_TYPE] ...`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `list r/bloodsugar r/sleep r/food`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Reminder*: `reminder DESCRIPTION t/TIME [t/TIME]... [rp/repetition] [v/venue] [p/people]`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `reminder insulin injection t/13:00 rp/daily`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Search*: `search [KEYWORD] [t/TIME] [t/END_TIME] [tp/TYPE] [v/VENUE] [p/PEOPLE]`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g. `search tp/event v/NUH`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Snooze*: `snooze [tp/TIME_PERIOD]`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g `snooze 30min`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Summary*: `summary r/RECORD_TYPE [d/START_DATE]`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g `summary r/bloodsugar d/01.09.2019`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Task*: `task TITLE [DESCRIPTION] t/TIME [t/END_TIME] [tp/TIME_PERIOD] [tg/TARGET]`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g `task Running running for 40 minutes t/15:00 tp/10 min tg/200 calories`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ". *Timezone*: `timezone tz/TIME_ZONE [t/TIME] [t/TIME_END]`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "E.g `timezone tz/GMT+8`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "[qanda]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "How should I save my data?::"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "SugarMummy data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 78,
      "jyx11011": 55,
      "-": 88,
      "scwaterbear": 2,
      "chen-xi-cx": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a workaround for the following error when MainApp is made the entry point of the application:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the LauncherHelper will check for the javafx.graphics"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * module to be present as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t find the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application to be the entry point of the application, we"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * avoid this issue."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.sgm.model.food.TypicalFoods.FOODS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.util.SampleUserDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.storage.JsonCalendarStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.storage.JsonFoodListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.storage.JsonRecordListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.storage.UserListStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.storage.bio.JsonUserListStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        UserListStorage userListStorage \u003d new JsonUserListStorage(userPrefs.getUserListFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        JsonFoodListStorage jsonFoodListStorage \u003d new JsonFoodListStorage(userPrefs.getFoodListFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        JsonRecordListStorage jsonRecordListStorage \u003d new JsonRecordListStorage(userPrefs.getRecordListFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        JsonCalendarStorage jsonCalendarStorage \u003d new JsonCalendarStorage(userPrefs.getEventListFilePath(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                userPrefs.getReminderListFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, userListStorage, jsonFoodListStorage,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                jsonRecordListStorage, jsonCalendarStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        logic \u003d new LogicManager(this.model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e The"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * data from the sample address book will be used instead if {@code storage}\u0027s address book is not found, or an"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Optional\u003cReadOnlyUserList\u003e userListOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ReadOnlyUserList initialUserData;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        UniqueFoodList foodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.setFoods(FOODS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Optional\u003cUniqueFoodList\u003e foodListOptional;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        UniqueFoodList initialFoodListData;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Optional\u003cUniqueRecordList\u003e recordListOptional;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        UniqueRecordList initialRecordListData;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Optional\u003cReadOnlyCalendar\u003e calendarOptional;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ReadOnlyCalendar initialCalendar;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        // Todo Following can eventually be abstracted in later versions if there\u0027s time."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            foodListOptional \u003d storage.readFoodList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            recordListOptional \u003d storage.readRecordList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            calendarOptional \u003d storage.readCalendar();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (addressBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (foodListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                logger.info(\"Food list data file not found. Will be starting with a sample Foodlist\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            if (recordListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                logger.info(\"Record list data file not found. Will be starting with a sample Recordlist\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (calendarOptional.isEmpty()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                logger.info(\"Calendar data file not found. Will be starting with a sample Calendar\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            initialFoodListData \u003d foodListOptional.orElseGet(SampleDataUtil::getSampleFoodList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            initialRecordListData \u003d recordListOptional.orElseGet(SampleDataUtil::getSampleRecordList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            initialCalendar \u003d calendarOptional.orElseGet(SampleDataUtil::getSampleCalendar);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            initialFoodListData \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            initialRecordListData \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            initialCalendar \u003d new Calendar();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            initialFoodListData \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            initialRecordListData \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            initialCalendar \u003d new Calendar();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            userListOptional \u003d storage.readUserList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!userListOptional.isPresent()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                logger.info(\"Bio Data file not found. Will be starting a sample user list containing bio data\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            initialUserData \u003d userListOptional.orElseGet(SampleUserDataUtil::getSampleUserList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            logger.warning(\"Bio Data file not in the correct format. Will be starting with an empty \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"user list containing no bio data\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            initialUserData \u003d new UserList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            logger.warning(\"Bio Data file not in the correct format. Will be starting with an empty \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"user list containing no bio data\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            initialUserData \u003d new UserList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialUserData, foodList, initialRecordListData,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                initialCalendar);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e The default file path {@code"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Config#DEFAULT_CONFIG_FILE} will be used instead if {@code configFilePath} is null."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a new {@code UserPrefs}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 25,
      "jyx11011": 18,
      "-": 170,
      "whneo97": 29,
      "scwaterbear": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * A Serializable class that contains the GUI settings. Guarantees: immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String DEFAULT_FONT_COLOUR \u003d \"white\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String fontColour;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        fontColour \u003d DEFAULT_FONT_COLOUR;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.fontColour \u003d DEFAULT_FONT_COLOUR;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                       Colour fontColour) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.fontColour \u003d fontColour.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getFontColour() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return fontColour;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setFontColour(Colour fontColour) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.fontColour \u003d fontColour.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 73,
      "whneo97": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s can be obtained from"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * this class\u003cbr\u003e These loggers have been configured to output messages to the console and a {@code .log} file by"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * default, at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained *AFTER* this"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * initialization will have their logging level changed\u003cbr\u003e Logging levels for existing loggers will only be updated"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * if the logger with the same name is requested again from the LogsCenter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.bio.BioCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Oops! Sorry, SugarMummy doesn\u0027t understand what this \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"command means :(\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Oops! The command you\u0027ve entered appears to be in \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"an invalid format. \\n%1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_INVALID_SUBARGUMENT_INDEX \u003d \"Oops! The index / indices provided in the \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"sub-arguments is/are invalid. Index / indices must be integers greater than or equal to 1.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_SUBARGUMENT_INDEX_OUT_OF_BOUNDS \u003d \"Oops! The index / indices provided in the \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"sub-arguments is/are out of bounds.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_INCONSISTENT_SUBARGUMENT_INDEX \u003d \"Oops! the use of index / indices provided in \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"the sub-arguments is/are inconsistent. (i.e. some prefixes of the same type have no indices while \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"others do)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_LOAD_IMAGE \u003d \"Oops! Unfortunately, I\u0027m unable to load \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"your display picture. Please check if the file at the given destination is correct.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_INVALID_RECORD_DISPLAYED_INDEX \u003d \"The record index provided is invalid\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_RECORDS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETER \u003d \"Please enter correct input for %2$s!\\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS_MUST_BE_EMPTY \u003d \"Oops! This command cannot have any arguments.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_NO_BIO_FOUND \u003d \"It looks like you have not set your biography. :(\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Your biography could be crucial information especially in times of an emergency. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Please enter the \" + BioCommand.COMMAND_WORD + \" command as soon as possible to set your biography, \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"alright?\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "whneo97": 20,
      "scwaterbear": 3,
      "chen-xi-cx": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what base"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * the other component is using for its index. However, after receiving the {@code Index}, that component can convert it"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 5,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)}, otherwise"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Writes given string to a file. Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 5,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found. If any"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a new file if it"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 8,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}. Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003cbr\u003e Will return false for any other non-null string input e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the {@code DisplayPaneType} for updating the main pane based on different commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    DisplayPaneType getDisplayPaneType();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a boolean indicating whether a new pane is to be created, regardless of whether an existing one already"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * exists."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    boolean getnewPaneIsToBeCreated();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the a list of foods."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @see seedu.address.model.Model#getFoodList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of foods"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ObservableList\u003cFood\u003e getFilterFoodList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public ObservableList\u003cRecord\u003e getRecordList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilterRecordList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    Path getUserListFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the UserList."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @see seedu.address.model.Model#getUserList()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ReadOnlyUserList getUserList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of users"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ObservableList\u003cUser\u003e getFilteredUserList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Returns the last average type calculated."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    AverageType getAverageType();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Returns the last record type whose average is calculated."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    RecordType getRecordType();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Returns a {@code Map} object that maps time period to the respective average values."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    ObservableMap\u003cLocalDate, Double\u003e getAverageMap();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Aesthetics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the font colour to be set for this app."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    Colour getFontColour();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 23,
      "-": 55,
      "whneo97": 30,
      "scwaterbear": 5,
      "chen-xi-cx": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private DisplayPaneType displayPaneType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private boolean newPaneIsToBeCreated;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        displayPaneType \u003d command.getDisplayPaneType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        newPaneIsToBeCreated \u003d command.getnewPaneIsToBeCreated();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            storage.saveUserList(model.getUserList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            storage.saveFoodList(model.getUniqueFoodListObject());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            storage.saveRecordList(model.getUniqueRecordListObject());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            storage.saveCalendar(model.getCalendar());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return displayPaneType;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean getnewPaneIsToBeCreated() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return newPaneIsToBeCreated;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return model.getFoodList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilterFoodList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return model.getFilterFoodList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return model.getRecordList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilterRecordList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return model.getFilterRecordList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Path getUserListFilePath() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return model.getUserListFilePath();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ReadOnlyUserList getUserList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return model.getUserList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ObservableList\u003cUser\u003e getFilteredUserList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return model.getFilteredUserList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public AverageType getAverageType() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return model.getAverageType();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public RecordType getRecordType() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return model.getRecordType();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public ObservableMap\u003cLocalDate, Double\u003e getAverageMap() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return model.getAverageMap();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Aesthetics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Colour getFontColour() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return model.getFontColour();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 20,
      "jyx11011": 1,
      "-": 78,
      "whneo97": 36,
      "scwaterbear": 12,
      "chen-xi-cx": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODSUGAR_CONCENTRATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORDTYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Adds a record to the record list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new record to the record list. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            + PREFIX_RECORDTYPE + \"RECORDTYPE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            + PREFIX_DATETIME + \"DATETIME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            + PREFIX_BLOODSUGAR_CONCENTRATION + \"CONCENTRATION\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            + PREFIX_RECORDTYPE + \"BLOODSUGAR \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            + PREFIX_DATETIME + \"2019-09-09 12:12 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            + PREFIX_BLOODSUGAR_CONCENTRATION + \"78.9\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New record added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"This record already exists in the record book\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final Record toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public AddCommand(Record record) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        toAdd \u003d record;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (model.hasRecord(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        model.addRecord(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.toString()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return DisplayPaneType.ADD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "scwaterbear": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddFoodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUGAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Adds a food to the food recommendation list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class AddFoodCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addfood\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food to the food recommendation list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Parameters: \" + PREFIX_FOOD + \"FOOD_NAME \" + PREFIX_FOOD_TYPE + \"FOOD_TYPE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + PREFIX_CALORIE + \"CALORIE \" + PREFIX_GI + \"GI \" + PREFIX_SUGAR + \"SUGAR \" + PREFIX_FAT + \"FAT\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Food type can be one of the following:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"nsv: non-starchy vegetables; sv: starchy vegetables; f: fruit; p: protein; s: snack; m: meal\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Calorie(Cal), GI, sugar(g), and fat(g) are all numbers.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + PREFIX_FOOD + \"Cherry \" + PREFIX_FOOD_TYPE + \"f \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + PREFIX_CALORIE + \"63 \" + PREFIX_GI + \"20 \" + PREFIX_SUGAR + \"12 \" + PREFIX_FAT + \"0\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food already exists\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Food toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Creates an AddFoodCommand to add the specified {@code food}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public AddFoodCommand(Food food) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (model.hasFood(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        model.addFood(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return DisplayPaneType.RECM_FOOD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                || (other instanceof AddFoodCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFoodCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AverageCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Shows daily/weekly/monthly average of different record types."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class AverageCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"average\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows daily/weekly/monthly average of different \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            + \"record types.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            + \"Parameters: a/AVERAGE_TYPE rt/RECORD_TYPE [n/COUNT]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" a/daily rt/bloodsugar n/5\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_INVALID_COUNT \u003d \"n/COUNT\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_INVALID_AVGTYPE \u003d \"a/AVERAGE_TYPE\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_INVALID_RECORDTYPE \u003d \"rt/RECORD_TYPE\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final String MESSAGE_NO_RECORD \u003d \"Sorry! You do not have any %1$s record.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private final AverageType averageType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private final RecordType recordType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private final int count;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public AverageCommand(AverageType averageType, RecordType recordType, int count) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        requireNonNull(averageType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        requireNonNull(recordType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.averageType \u003d averageType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.recordType \u003d recordType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.count \u003d count;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        model.calculateAverageMap(averageType, recordType, count);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        StringJoiner result \u003d new StringJoiner(System.lineSeparator());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        model.getAverageMap().entrySet().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .limit(count)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .forEach(ele -\u003e result.add(\"average for \" + this.recordType + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                + ele.getKey() + \" is \" + ele.getValue()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (result.toString().isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_RECORD, this.recordType));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return new CommandResult(String.format(result.toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return DisplayPaneType.AVERAGE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                || (other instanceof AverageCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                \u0026\u0026 averageType.equals(((AverageCommand) other).averageType) // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                \u0026\u0026 recordType.equals(((AverageCommand) other).recordType)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                \u0026\u0026 count \u003d\u003d ((AverageCommand) other).count);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public boolean getnewPaneIsToBeCreated() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //TODO: make it abstract"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns a {@code DisplayPaneType} that corresponds to a specific certain command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @return  a {@code DisplayPaneType} based on the specific command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean getnewPaneIsToBeCreated() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10,
      "-": 20,
      "whneo97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Help information should be shown to the user in a separate window. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Bio information should be shown to the user in the same window. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private boolean showBio \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private boolean showAchvm \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields. Fields of showing bio and achievements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * are false by default."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code CommandResult} with the additional fields of showing bio and achievements."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean showBio, boolean showAchievements,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                         boolean exit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.showBio \u003d showBio;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.showAchvm \u003d showAchievements;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean isShowBio() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return showBio;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean isShowAchvm() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return showAchvm;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 showBio \u003d\u003d otherCommandResult.showBio"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 showAchvm \u003d\u003d otherCommandResult.showAchvm"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, showBio, showAchvm, exit);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 66,
      "whneo97": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Deletes a record identified using it\u0027s displayed index from the record list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            + \": Deletes the record identified by the index number used in the displayed record list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_DELETE_RECORD_SUCCESS \u003d \"Deleted Record: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        List\u003cRecord\u003e lastShownList \u003d model.getFilterRecordList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Record recordToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        model.deleteRecord(recordToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RECORD_SUCCESS, recordToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return DisplayPaneType.ADD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "scwaterbear": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit} edited with {@code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * editPersonDescriptor}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the corresponding field value"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if modification is"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "         * attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 38,
      "-": 185,
      "scwaterbear": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Adds an Event to the calendar."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the calendar. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_CALENDAR_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_DATETIME + \"DATETIME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"ENDING DATETIME] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"[\" + PREFIX_TIME_DURATION + \"TIME DURATION]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_CALENDAR_DESCRIPTION + \"Appointment \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_DATETIME + \"2020-05-04 09:00 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_DATETIME + \"2020-05-04 11:00 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_TIME_DURATION + \"00:30\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the calendar\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Creates an EventCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventCommand(Event event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (model.hasCalendarEntry(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        model.addCalendarEntry(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (toAdd.getAutoReminder().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            model.addCalendarEntry(toAdd.getAutoReminder().get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.toString()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                || (other instanceof EventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 toAdd.equals(((EventCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords. Keyword matching is"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                String.format(Messages.MESSAGE_RECORDS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 39,
      "scwaterbear": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECORDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Lists all records in the record list to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all records\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        model.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORDS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return DisplayPaneType.LIST;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "scwaterbear": 10,
      "whneo97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecmFoodCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodTypeIsWantedPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Recommends suitable food or meals for diabetic patients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class RecmFoodCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recmf\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets a list of food recommendations.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Recommendations can be filtered by keywords and flags:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-nsv: breakfast recommendations\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-sv: lunch recommendations\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-f: fruit recommendations\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-p: protein recommendations\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-s: snack recommendations\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"-m: meal recommendations\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            + \"Usage:\" + COMMAND_WORD + \"[-FLAG]... [FOOD_NAME]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final FoodTypeIsWantedPredicate typePredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Predicate\u003cFood\u003e namePredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public RecmFoodCommand(FoodTypeIsWantedPredicate typePredicate, Predicate\u003cFood\u003e namePredicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.typePredicate \u003d typePredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.namePredicate \u003d namePredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        model.updateFilteredFoodList(food -\u003e typePredicate.test(food) \u0026\u0026 namePredicate.test(food));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new CommandResult(\"Hope you like what I\u0027ve found for you~\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return DisplayPaneType.RECM_FOOD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!(other instanceof RecmFoodCommand)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return typePredicate.equals(((RecmFoodCommand) other).typePredicate)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                \u0026\u0026 namePredicate.equals(namePredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_REPETITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Adds a reminder to the calendar."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a reminder to the calendar. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_CALENDAR_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_DATETIME + \"DATETIME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"[\" + PREFIX_CALENDAR_REPETITION + \"REPETITION]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_CALENDAR_DESCRIPTION + \"Insulin injection \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_DATETIME + \"2020-05-31 16:00 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + PREFIX_CALENDAR_REPETITION + \"everyday\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New reminder added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This reminder already exists in the calendar\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final Reminder toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Creates an ReminderCommand to add the specified {@code Reminder}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderCommand(Reminder reminder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        toAdd \u003d reminder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (model.hasCalendarEntry(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        model.addCalendarEntry(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                || (other instanceof ReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ReminderCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/achvm/AchvmCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands.achvm;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Displays information on user\u0027s biography."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AchvmCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"achvm\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays information on user\u0027s achievements.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String SHOWING_ACHVM_MESSAGE \u003d \"Here\u0027re your achievements so far. Keep up the good work!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new CommandResult(SHOWING_ACHVM_MESSAGE, false, false, true, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return DisplayPaneType.ACHVM;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "whneo97": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/aesthetics/FontColourCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands.aesthetics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Edits the details of an existing user in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class FontColourCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"fontcolour\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Font colour has been set!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_WORD + \": Sets the font colour of this application \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"using either CSS colour names or hexadecimal alphanumeric characters representing rgb colours.\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Parameter: COLOUR\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Example: fontcolour turquoise\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Example fontcolour #00FF00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_NO_CHANGE \u003d \"The colour that you\u0027ve keyed in is no different from \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"what has already been set in your current settings! As such, there\u0027s nothing for me to update :)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Colour fontColour;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public FontColourCommand(Colour fontColour) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.fontColour \u003d fontColour;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Colour previousColour \u003d model.getFontColour();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Colour newColour \u003d fontColour;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        model.setFontColour(newColour);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (previousColour.equals(newColour)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new CommandException(MESSAGE_NO_CHANGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String updateMessage \u003d \"Colour has been changed from \" + previousColour + \" to \" + newColour + \".\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \" \" + updateMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return DisplayPaneType.COLOUR;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/bio/AddBioCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DP_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMERGENCY_CONTACT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOALS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHER_BIO_INFO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Adds a user to the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AddBioCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addbio\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_WORD + \": Adds the user\u0027s biography.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Note that Name, contact number(s), emergency contact(s) and medical condition(s) cannot be empty.\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_DP_PATH + \"DP PATH] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_PROFILE_DESC + \"PROFILE DESCRIPTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_DATE_OF_BIRTH + \"DATE OF BIRTH] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_CONTACT_NUMBER + \"CONTACT NUMBER... \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_EMERGENCY_CONTACT + \"EMERGENCY CONTACT... \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_MEDICAL_CONDITION + \"MEDICAL CONDITION... \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_GOALS + \"GOAL]... \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_OTHER_BIO_INFO + \"OTHER INFO]\\n\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_DP_PATH + \"/Users/John/Doge.jpg \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_PROFILE_DESC + \"Sometimes I like to pretend that I\u0027m a carrot. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_NRIC + \"S1234567A \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_DATE_OF_BIRTH + \"31/12/1900 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_CONTACT_NUMBER + \"91234567 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_EMERGENCY_CONTACT + \"98765432 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_EMERGENCY_CONTACT + \"81234567 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_MEDICAL_CONDITION + \"Type II Diabetes \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_MEDICAL_CONDITION + \"High Blood Pressure \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_ADDRESS + \"Blk 123 Example Rd #99-99 S(612345) \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_GOALS + \"Lose 10kg by 19/12/2019 \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_OTHER_BIO_INFO + \"Dislikes potatoes\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"I\u0027ve successfully added your biography with the following \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"information:\\n\\n%1$s\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_BIO_ALREADY_EXISTS \u003d \"Oops! There is already an existing biography. \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Try using the [\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + ClearBioCommand.COMMAND_WORD + \"] , [\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + EditBioCommand.COMMAND_WORD + \"] or the [\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + BioCommand.COMMAND_WORD + \"]  command to clear, edit or view existing biography respectively instead.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final User toAdd;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an AddBioCommand to add the specified {@code User}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public AddBioCommand(User user) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        toAdd \u003d user;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (model.bioExists()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new CommandException(MESSAGE_BIO_ALREADY_EXISTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        StringBuilder addedFields \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        model.addUser(toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        toAdd.getFieldMap().forEach((key, value) -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!value.isEmpty() \u0026\u0026 !value.equals(\"[]\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                addedFields.append(\"- \").append(key).append(\": \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        .append(value).append(\"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, addedFields.toString().trim()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof AddBioCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddBioCommand) other).toAdd));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return DisplayPaneType.BIO;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean getnewPaneIsToBeCreated() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/bio/BioCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Displays information on user\u0027s biography."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class BioCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bio\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String SHOWING_BIO_MESSAGE \u003d \"Here\u0027s your biography information I\u0027ve displayed on this \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"window.\\nPlease keep your data safe!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new CommandResult(SHOWING_BIO_MESSAGE, false, true, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return DisplayPaneType.BIO;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "whneo97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/bio/ClearBioCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class ClearBioCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clrbio\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Bio has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        model.setUserList(new UserList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return DisplayPaneType.BIO;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean getnewPaneIsToBeCreated() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/bio/EditBioCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SUBARGUMENT_INDEX_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DP_PATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMERGENCY_CONTACT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOALS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHER_BIO_INFO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_USERS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.DateOfBirth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.DisplayPicPath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Gender;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Goal;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.ListableField;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.MedicalCondition;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Nric;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.OtherBioInfo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.ProfileDesc;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.ui.DisplayPaneType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Edits the details of an existing user in the address book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class EditBioCommand extends Command {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editbio\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_WORD + \": Edits the user\u0027s biography \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"either by overwriting all existing values, OR by specifying positive indexes for individual values for \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"fields that can hold multiple values. Fields that can hold multiple values are limited to \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"contact numbers, emergency contacts, medical conditions and goals.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Note that Name, contact number(s), emergency contact(s) and medical condition(s) cannot be empty.\\n\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_DP_PATH + \"DP PATH] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_PROFILE_DESC + \"PROFILE DESCRIPTION] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_DATE_OF_BIRTH + \"DATE OF BIRTH] \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_CONTACT_NUMBER + \"[INDEX/]CONTACT NUMBER]... \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_EMERGENCY_CONTACT + \"[INDEX/]EMERGENCY CONTACT]... \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_MEDICAL_CONDITION + \"[INDEX/]MEDICAL CONDITION]... \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_GOALS + \"[INDEX/]GOALS]... \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"[\" + PREFIX_OTHER_BIO_INFO + \"OTHER INFO]\\n\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + PREFIX_PROFILE_DESC + \"The world has changed, just like my \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"profile description has. \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_CONTACT_NUMBER + \"91234567 \" + PREFIX_CONTACT_NUMBER + \"98765432 \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + PREFIX_MEDICAL_CONDITION + \"1/Type I diabetes \" + PREFIX_MEDICAL_CONDITION + \"2/High Blood Pressure\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_EDIT_USER_SUCCESS \u003d \"I\u0027ve edited your bio successfully! %1$s\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CHANGES_MADE \u003d \"The following changes were made.\\n\\n%1$s\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_NO_CHANGE \u003d \"The information that you\u0027ve keyed in are no different from \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"what already exists in your current biography! As such, there\u0027s nothing for me to update :)\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_BIOGRAPHY_DOES_NOT_EXIST \u003d \"Oops! Biography does not exist!\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \" Try using the [\" + AddBioCommand.COMMAND_WORD + \"] command to add a new biography.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_USER \u003d \"his user already exists in the address book.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final EditUserDescriptor editUserDescriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param editUserDescriptor details to edit the user with"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public EditBioCommand(EditUserDescriptor editUserDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(editUserDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.editUserDescriptor \u003d new EditUserDescriptor(editUserDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cUser\u003e lastShownList \u003d model.getFilteredUserList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            User userToEdit \u003d lastShownList.get(0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            User editedUser \u003d createEditedUser(userToEdit, editUserDescriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!userToEdit.isSameUser(editedUser) \u0026\u0026 model.hasUser(editedUser)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_USER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            model.setUser(userToEdit, editedUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            model.updateFilteredUserList(PREDICATE_SHOW_ALL_USERS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            StringBuilder editedFields \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            HashMap\u003cString, List\u003cString\u003e\u003e changedDifferences \u003d userToEdit.getDifferencesTo(editedUser);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            changedDifferences.forEach((key, beforeAndAfter) -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                String before \u003d beforeAndAfter.get(0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                String after \u003d beforeAndAfter.get(1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                editedFields.append(\"- \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (before.isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    editedFields.append(\"Added to \").append(key).append(\": \").append(after);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } else if (after.isEmpty() || after.equals(\"[]\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    editedFields.append(\"Deleted from \").append(key).append(\": \").append(before);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    editedFields.append(\"Modified \").append(key)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                            .append(\": from \").append(before).append(\" to \").append(after);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                editedFields.append(\"\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new CommandResult(changedDifferences.size() \u003d\u003d 0"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? MESSAGE_NO_CHANGE"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : String.format(MESSAGE_EDIT_USER_SUCCESS,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    String.format(MESSAGE_CHANGES_MADE, editedFields.toString().trim())));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new CommandException(MESSAGE_BIOGRAPHY_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates and returns a {@code User} with the details of {@code userToEdit}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * edited with {@code editUserDescriptor}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static User createEditedUser(User userToEdit, EditUserDescriptor editUserDescriptor)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert userToEdit !\u003d null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Name updatedName \u003d editUserDescriptor.getName().orElse(userToEdit.getName());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        DisplayPicPath udpatedDpPath \u003d editUserDescriptor.getDpPath().orElse(userToEdit.getDpPath());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ProfileDesc updatedProfileDesc \u003d editUserDescriptor.getProfileDesc().orElse(userToEdit.getProfileDesc());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Nric updatedNric \u003d editUserDescriptor.getNric().orElse(userToEdit.getNric());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Gender updatedGender \u003d editUserDescriptor.getGender().orElse(userToEdit.getGender());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        DateOfBirth updatedDateOfBirth \u003d editUserDescriptor.getDateOfBirth().orElse(userToEdit.getDateOfBirth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cPhone\u003e updatedContactNumbers \u003d updateListableFields(userToEdit.getContactNumbers(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                editUserDescriptor.getContactNumbers(), editUserDescriptor.getIndividualContactNumbersMap()).stream()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .map(Phone.class::cast).collect(Collectors.toList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cPhone\u003e updatedEmergencyContacts \u003d updateListableFields(userToEdit.getEmergencyContacts(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                editUserDescriptor.getEmergencyContacts(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                editUserDescriptor.getIndividualEmergencyContactsMap()).stream()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .map(Phone.class::cast).collect(Collectors.toList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cGoal\u003e updatedGoals \u003d updateListableFields(userToEdit.getGoals(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                editUserDescriptor.getGoals(), editUserDescriptor.getIndividualGoalsMap()).stream()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .map(Goal.class::cast).collect(Collectors.toList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Address updatedAddress \u003d editUserDescriptor.getAddress().orElse(userToEdit.getAddress());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cMedicalCondition\u003e updatedMedicalConditions \u003d updateListableFields(userToEdit.getMedicalConditions(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                editUserDescriptor.getMedicalConditions(), editUserDescriptor.getIndividualMedicalConditionsMap())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .stream().map(MedicalCondition.class::cast).collect(Collectors.toList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        OtherBioInfo updatedOtherBioInfo \u003d editUserDescriptor.getOtherBioInfo().orElse(userToEdit.getOtherBioInfo());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new User(updatedName, udpatedDpPath, updatedProfileDesc, updatedNric, updatedGender, updatedDateOfBirth,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                updatedContactNumbers, updatedEmergencyContacts, updatedMedicalConditions, updatedAddress,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                updatedGoals, updatedOtherBioInfo);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a List of ListableFields or it\u0027s subclasses to be updated if applicable, or otherwise return null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param userToEditListableFields List of ListableFields of the user to be edited."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param listableFieldsOptional Optional ListableFields of an editUserDescriptor object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param individualListableFieldsMapOptional Optional individualListableFieldsMap of an editUserDescriptor"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                                            object that maps indices to ListableFields."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A List of ListableFields or it\u0027s subclasses to be updated if applicable, or otherwise return null."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws CommandException If the given one-based index / indices is / are out of bounds."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static List\u003c? extends ListableField\u003e updateListableFields("
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            List\u003c? extends ListableField\u003e userToEditListableFields,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Optional\u003c? extends List\u003c? extends ListableField\u003e\u003e listableFieldsOptional,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Optional\u003c? extends List\u003c? extends HashMap\u003cIndex, ? extends ListableField\u003e\u003e\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    individualListableFieldsMapOptional) throws CommandException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003c? extends ListableField\u003e updatedListableFields \u003d listableFieldsOptional.orElse(null);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (updatedListableFields \u003d\u003d null) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (individualListableFieldsMapOptional.isPresent()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                List\u003c? extends HashMap\u003cIndex, ? extends ListableField\u003e\u003e individualListableFieldsMap \u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        individualListableFieldsMapOptional.get();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                List\u003cListableField\u003e listableFieldsCopy \u003d new ArrayList\u003c\u003e(userToEditListableFields);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                for (HashMap\u003cIndex, ? extends ListableField\u003e map : individualListableFieldsMap) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    Index index \u003d map.keySet().iterator().next();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        listableFieldsCopy.set(index.getZeroBased(), map.get(index));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        throw new CommandException(MESSAGE_SUBARGUMENT_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                updatedListableFields \u003d listableFieldsCopy;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                updatedListableFields \u003d userToEditListableFields;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return updatedListableFields;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!(other instanceof EditBioCommand)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        EditBioCommand e \u003d (EditBioCommand) other;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return editUserDescriptor.equals(e.editUserDescriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores the details to edit the user with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * corresponding field value of the user."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static class EditUserDescriptor {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private DisplayPicPath dpPath;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private ProfileDesc profileDesc;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private List\u003cPhone\u003e contactNumbers;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private List\u003cHashMap\u003cIndex, Phone\u003e\u003e individualContactNumbersMap;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private List\u003cPhone\u003e emergencyContacts;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private List\u003cHashMap\u003cIndex, Phone\u003e\u003e individualEmergencyContactsMap;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private List\u003cMedicalCondition\u003e medicalConditions;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private List\u003cHashMap\u003cIndex, MedicalCondition\u003e\u003e individualMedicalConditionsMap;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private List\u003cGoal\u003e goals;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private List\u003cHashMap\u003cIndex, Goal\u003e\u003e individualGoalsMap;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        private OtherBioInfo otherBioInfo;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public EditUserDescriptor() {}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public EditUserDescriptor(EditUserDescriptor toCopy) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setDpPath(toCopy.dpPath);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setProfileDesc(toCopy.profileDesc);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setContactNumbers(toCopy.contactNumbers);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setIndividualContactNumbersMap(toCopy.individualContactNumbersMap);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setEmergencyContacts(toCopy.emergencyContacts);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setIndividualEmergencyContactsMap(toCopy.individualEmergencyContactsMap);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setMedicalConditions(toCopy.medicalConditions);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setIndividualMedicalConditionsMap(toCopy.individualMedicalConditionsMap);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setGoals(toCopy.goals);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setIndividualGoalsMap(toCopy.individualGoalsMap);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setOtherBioInfo(toCopy.otherBioInfo);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, dpPath, profileDesc, nric, gender, dateOfBirth,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    contactNumbers, individualContactNumbersMap,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    emergencyContacts, individualEmergencyContactsMap,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    medicalConditions, individualMedicalConditionsMap,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    address, goals, individualGoalsMap, otherBioInfo);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setDpPath(DisplayPicPath dpPath) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.dpPath \u003d dpPath;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cDisplayPicPath\u003e getDpPath() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.ofNullable(dpPath);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setProfileDesc(ProfileDesc profileDesc) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.profileDesc \u003d profileDesc;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cProfileDesc\u003e getProfileDesc() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.ofNullable(profileDesc);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setDateOfBirth(DateOfBirth dateOfBirth) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Adds {@code hashMap} to the this object\u0027s {@code mapIndividualContactNumbers}."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void addToIndividualContactNumberEdit(HashMap\u003cIndex, Phone\u003e hashMap) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (this.individualContactNumbersMap \u003d\u003d null) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.individualContactNumbersMap \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.individualContactNumbersMap.add(hashMap);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Sets {@code contactNumbers} to this object\u0027s {@code contactNumbers}."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * A defensive copy of {@code contactNumbers} is used internally."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setContactNumbers(List\u003cPhone\u003e contactNumbers) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.contactNumbers \u003d (contactNumbers !\u003d null) ? new ArrayList\u003c\u003e(contactNumbers) : null;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Sets {@code individualContactNumbersMaps} to this object\u0027s {@code individualContactNumbersMaps}."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * A defensive copy of {@code individualContactNumbersMaps} is used internally."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setIndividualContactNumbersMap(List\u003cHashMap\u003cIndex, Phone\u003e\u003e individualContactNumbersMap) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.individualContactNumbersMap \u003d (individualContactNumbersMap !\u003d null)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? new ArrayList\u003c\u003e(individualContactNumbersMap)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : null;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns an unmodifiable contactNumber set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code contactNumbers} is null."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cList\u003cPhone\u003e\u003e getContactNumbers() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return (contactNumbers !\u003d null)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableList(contactNumbers))"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns an unmodifiable individualContactNumbersMap set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code individualContactNumbersMap} is null."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cList\u003cHashMap\u003cIndex, Phone\u003e\u003e\u003e getIndividualContactNumbersMap() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return (individualContactNumbersMap !\u003d null)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? Optional.of(individualContactNumbersMap)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Adds {@code hashMap} to the this object\u0027s {@code mapIndividualEmergencyContacts}."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void addToIndividualEmergencyContactsEdit(HashMap\u003cIndex, Phone\u003e hashMap) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (this.individualEmergencyContactsMap \u003d\u003d null) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.individualEmergencyContactsMap \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.individualEmergencyContactsMap.add(hashMap);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Sets {@code emergencyContacts} to this object\u0027s {@code emergencyContacts}."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * A defensive copy of {@code emergencyContacts} is used internally."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setEmergencyContacts(List\u003cPhone\u003e emergencyContacts) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.emergencyContacts \u003d (emergencyContacts !\u003d null)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? new ArrayList\u003c\u003e(emergencyContacts)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : null;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Sets {@code individualEmergencyContactsMaps} to this object\u0027s {@code individualEmergencyContactsMaps}."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * A defensive copy of {@code individualEmergencyContactsMaps} is used internally."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setIndividualEmergencyContactsMap(List\u003cHashMap\u003cIndex, Phone\u003e\u003e individualEmergencyContactsMap) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.individualEmergencyContactsMap \u003d (individualEmergencyContactsMap !\u003d null)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? new ArrayList\u003c\u003e(individualEmergencyContactsMap) : null;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns an unmodifiable emergencyContact set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code emergencyContacts} is null."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cList\u003cPhone\u003e\u003e getEmergencyContacts() {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return (emergencyContacts !\u003d null)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableList(emergencyContacts))"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns an unmodifiable individualEmergencyContactsMap set, which throws"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code individualEmergencyContactsMap} is null."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cList\u003cHashMap\u003cIndex, Phone\u003e\u003e\u003e getIndividualEmergencyContactsMap() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return (individualEmergencyContactsMap !\u003d null)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? Optional.of(individualEmergencyContactsMap) : Optional.empty();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Adds {@code hashMap} to the this object\u0027s {@code individualMedicalConditionsMap}."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void addToIndividualMedicalConditionsEdit(HashMap\u003cIndex, MedicalCondition\u003e hashMap) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (this.individualMedicalConditionsMap \u003d\u003d null) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.individualMedicalConditionsMap \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.individualMedicalConditionsMap.add(hashMap);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Sets {@code medicalConditions} to this object\u0027s {@code medicalConditions}."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * A defensive copy of {@code medicalConditions} is used internally."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setMedicalConditions(List\u003cMedicalCondition\u003e medicalConditions) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.medicalConditions \u003d (medicalConditions !\u003d null)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? new ArrayList\u003c\u003e(medicalConditions)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : null;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Sets {@code individualGoalsMaps} to this object\u0027s {@code individualGoalsMaps}."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * A defensive copy of {@code individualGoalsMaps} is used internally."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setIndividualGoalsMap(List\u003cHashMap\u003cIndex, Goal\u003e\u003e individualGoalsMap) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.individualGoalsMap \u003d (individualGoalsMap !\u003d null)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? new ArrayList\u003c\u003e(individualGoalsMap)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : null;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns an unmodifiable medicalCondition set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code medicalConditions} is null."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cList\u003cMedicalCondition\u003e\u003e getMedicalConditions() {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return (medicalConditions !\u003d null)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableList(medicalConditions))"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns an unmodifiable individualMedicalConditionsMap set, which throws"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code individualMedicalConditionsMap} is null."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cList\u003cHashMap\u003cIndex, MedicalCondition\u003e\u003e\u003e getIndividualMedicalConditionsMap() {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return (individualMedicalConditionsMap !\u003d null)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? Optional.of(individualMedicalConditionsMap)"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Adds {@code hashMap} to the this object\u0027s {@code individualGoalsMap}."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void addToIndividualGoalsEdit(HashMap\u003cIndex, Goal\u003e hashMap) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (this.individualGoalsMap \u003d\u003d null) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.individualGoalsMap \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.individualGoalsMap.add(hashMap);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Sets {@code goals} to this object\u0027s {@code goals}."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * A defensive copy of {@code goals} is used internally."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setGoals(List\u003cGoal\u003e goals) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.goals \u003d (goals !\u003d null) ? new ArrayList\u003c\u003e(goals) : null;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Sets {@code individualMedicalConditionsMaps} to this object\u0027s {@code individualMedicalConditionsMaps}."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * A defensive copy of {@code individualMedicalConditionsMaps} is used internally."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setIndividualMedicalConditionsMap(List\u003cHashMap\u003cIndex, MedicalCondition\u003e\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                                                              individualMedicalConditionsMap) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.individualMedicalConditionsMap \u003d (individualMedicalConditionsMap !\u003d null)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? new ArrayList\u003c\u003e(individualMedicalConditionsMap)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : null;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns an unmodifiable goal set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code goals} is null."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cList\u003cGoal\u003e\u003e getGoals() {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return (goals !\u003d null) ? Optional.of(Collections.unmodifiableList(goals)) : Optional.empty();"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns an unmodifiable individualGoalsMap set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code individualGoalsMap} is null."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cList\u003cHashMap\u003cIndex, Goal\u003e\u003e\u003e getIndividualGoalsMap() {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return (individualGoalsMap !\u003d null)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? Optional.of(individualGoalsMap)"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setOtherBioInfo(OtherBioInfo otherBioInfo) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.otherBioInfo \u003d otherBioInfo;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Optional\u003cOtherBioInfo\u003e getOtherBioInfo() {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.ofNullable(otherBioInfo);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!(other instanceof EditUserDescriptor)) {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            EditUserDescriptor e \u003d (EditUserDescriptor) other;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 getNric().equals(e.getNric())"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 getDpPath().equals(e.getDpPath())"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 getProfileDesc().equals(e.getProfileDesc())"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 getContactNumbers().equals(e.getContactNumbers())"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 getEmergencyContacts().equals(e.getEmergencyContacts())"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 getMedicalConditions().equals(e.getMedicalConditions())"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 getGoals().equals(e.getGoals())"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 getOtherBioInfo().equals(e.getOtherBioInfo());"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DisplayPaneType getDisplayPaneType() {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return DisplayPaneType.BIO;"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean getnewPaneIsToBeCreated() {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 600
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODSUGAR_CONCENTRATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BMI_HEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BMI_WEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORDTYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Bmi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Concentration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Height;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Weight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECORDTYPE, PREFIX_DATETIME, PREFIX_BLOODSUGAR_CONCENTRATION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                    PREFIX_BMI_HEIGHT, PREFIX_BMI_WEIGHT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_RECORDTYPE, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        RecordType rt \u003d ParserUtil.parseRecordType(argMultimap.getValue(PREFIX_RECORDTYPE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        switch(rt) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        case BLOODSUGAR:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_BLOODSUGAR_CONCENTRATION)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            Concentration concentration \u003d ParserUtil.parseConcentration("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                argMultimap.getValue(PREFIX_BLOODSUGAR_CONCENTRATION).get()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            BloodSugar bloodSugar \u003d new BloodSugar(concentration, dateTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return new AddCommand(bloodSugar);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        case BMI:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_BMI_HEIGHT, PREFIX_BMI_WEIGHT)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            Height height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_BMI_HEIGHT).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            Weight weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_BMI_WEIGHT).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            Bmi bmi \u003d new Bmi(height, weight, dateTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return new AddCommand(bmi);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 5,
      "jyx11011": 1,
      "-": 34,
      "scwaterbear": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddFoodCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUGAR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.AddFoodCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Calorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Fat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Gi;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Sugar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Parses input arguments and creates a new AddFoodCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class AddFoodCommandParser implements Parser\u003cAddFoodCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given {@code"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * ArgumentMultimap}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFoodCommand and returns an AddFoodCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public AddFoodCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FOOD, PREFIX_FOOD_TYPE, PREFIX_CALORIE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            PREFIX_GI, PREFIX_SUGAR, PREFIX_FAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FOOD, PREFIX_FOOD_TYPE, PREFIX_CALORIE, PREFIX_GI, PREFIX_SUGAR,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            PREFIX_FAT) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFoodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        FoodName name \u003d ParserUtil.parseFoodName(argMultimap.getValue(PREFIX_FOOD).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        FoodType foodType \u003d FoodType.getFrom(argMultimap.getValue(PREFIX_FOOD_TYPE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Calorie calorie \u003d ParserUtil.parseCalorieValue(argMultimap.getValue(PREFIX_CALORIE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Gi gi \u003d ParserUtil.parseGiValue(argMultimap.getValue(PREFIX_GI).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Sugar sugar \u003d ParserUtil.parseSugarValue(argMultimap.getValue(PREFIX_SUGAR).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Fat fat \u003d ParserUtil.parseFatValue(argMultimap.getValue(PREFIX_FAT).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Food newFood \u003d new Food(name, calorie, gi, sugar, fat, foodType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new AddFoodCommand(newFood);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ARGUMENTS_MUST_BE_EMPTY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.AddFoodCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.commands.AverageCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.RecmFoodCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.achvm.AchvmCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.aesthetics.FontColourCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.bio.AddBioCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.bio.BioCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.bio.ClearBioCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.bio.EditBioCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.aesthetics.FontColourCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.bio.AddBioCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.bio.EditBioCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case BioCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            requireEmptyArguments(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new BioCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case AddBioCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new AddBioCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case EditBioCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new EditBioCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case ClearBioCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            requireEmptyArguments(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new ClearBioCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case AchvmCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            requireEmptyArguments(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new AchvmCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            requireEmptyArguments(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            requireEmptyArguments(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case AverageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return new AverageCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case RecmFoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new RecmFoodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case AddFoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new AddFoodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new EventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case ReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new ReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case FontColourCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new FontColourCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures commands not meant to have trailing arguments do not have any."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Trailing spaces following commands are fine and would have been trimmed off automatically by the program."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param arguments Argument inputs keyed in by the user following the command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException If there are additional arguments after the command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private void requireEmptyArguments(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!arguments.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(MESSAGE_ARGUMENTS_MUST_BE_EMPTY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "jyx11011": 8,
      "-": 72,
      "whneo97": 48,
      "scwaterbear": 2,
      "chen-xi-cx": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained. Keys are unique, but the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * of argument values may contain duplicate argument values, i.e. the same argument value can be inserted multiple times"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * for the same prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map previously contained a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this will return an empty"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * list. Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 11,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e e.g. {@code some"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e 1. An argument\u0027s value can be an"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e 2. Leading and trailing whitespaces of an"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * argument value will be discarded.\u003cbr\u003e 3. An argument may be repeated and all its values will be accumulated e.g. the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * value of {@code t/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting from index {@code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * fromIndex}. An occurrence is valid if there is a whitespace before {@code prefix}. Returns -1 if no such"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * occurrence can be found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0, this method returns -1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * as there are no valid occurrences of \"p/\" with whitespace before it. However, if {@code argsString} \u003d \"e/hi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * p/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}. The"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 14,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AverageCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PARAMETER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AVGTYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORDTYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.commands.AverageCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Parses input arguments and creates a new AverageCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class AverageCommandParser implements Parser\u003cAverageCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private static final String DEFAULT_COUNT_STRING \u003d \"5\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private static final String COUNT_REGEX \u003d \"[1-9]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AverageCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * and returns a AverageCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public AverageCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AVGTYPE, PREFIX_RECORDTYPE, PREFIX_COUNT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AVGTYPE, PREFIX_RECORDTYPE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AverageCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        AverageType averageType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (argMultimap.getValue(PREFIX_AVGTYPE).get().toUpperCase()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"DAILY\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"WEEKLY\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"MONTHLY\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            averageType \u003d AverageType.valueOf(argMultimap.getValue(PREFIX_AVGTYPE).get().toUpperCase());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PARAMETER, AverageCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    AverageCommand.MESSAGE_INVALID_AVGTYPE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        RecordType recordType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (argMultimap.getValue(PREFIX_RECORDTYPE).get().toUpperCase()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"BLOODSUGAR\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case \"BMI\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            recordType \u003d RecordType.valueOf(argMultimap.getValue(PREFIX_RECORDTYPE).get().toUpperCase());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PARAMETER, AverageCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    AverageCommand.MESSAGE_INVALID_RECORDTYPE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String strCount;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_COUNT)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            strCount \u003d argMultimap.getValue(PREFIX_COUNT).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            strCount \u003d DEFAULT_COUNT_STRING;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        if (!strCount.matches(COUNT_REGEX)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PARAMETER, AverageCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    AverageCommand.MESSAGE_INVALID_COUNT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        int count \u003d Integer.parseInt(strCount);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return new AverageCommand(averageType, recordType, count);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // Biography Prefixes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_DP_PATH \u003d new Prefix(\"dp/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_PROFILE_DESC \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"nric/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"gender/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_DATE_OF_BIRTH \u003d new Prefix(\"dob/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_CONTACT_NUMBER \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_EMERGENCY_CONTACT \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_MEDICAL_CONDITION \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_GOALS \u003d new Prefix(\"goal/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_OTHER_BIO_INFO \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // Record Prefixes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Prefix PREFIX_RECORDTYPE \u003d new Prefix(\"rt/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Prefix PREFIX_BLOODSUGAR_CONCENTRATION \u003d new Prefix(\"con/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Prefix PREFIX_BMI_HEIGHT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Prefix PREFIX_BMI_WEIGHT \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // Calendar Prefixes"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Prefix PREFIX_CALENDAR_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Prefix PREFIX_CALENDAR_REPETITION \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Prefix PREFIX_TIME_DURATION \u003d new Prefix(\"td/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // Stats Prefixes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_FOOD \u003d new Prefix(\"fn/\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_FOOD_TYPE \u003d new Prefix(\"ft/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_CALORIE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_GI \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_SUGAR \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Prefix PREFIX_FAT \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // Food Recommendation Prefixes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_NON_STARCHY_VEGETABLE \u003d \"nsv\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_STARCHY_VEGETABLE \u003d \"sv\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_FRUIT \u003d \"f\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_PROTEIN \u003d \"p\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_SNACK \u003d \"s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String ABBR_MEAL \u003d \"m\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String FLAG_SIGNAL \u003d \"-\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_NSV \u003d new Flag(FLAG_SIGNAL + ABBR_NON_STARCHY_VEGETABLE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_SV \u003d new Flag(FLAG_SIGNAL + ABBR_STARCHY_VEGETABLE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_F \u003d new Flag(FLAG_SIGNAL + ABBR_FRUIT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_P \u003d new Flag(FLAG_SIGNAL + ABBR_PROTEIN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_S \u003d new Flag(FLAG_SIGNAL + ABBR_SNACK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Flag FLAG_M \u003d new Flag(FLAG_SIGNAL + ABBR_MEAL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final List\u003cFlag\u003e FLAGS \u003d Arrays.asList(new Flag[]{FLAG_NSV, FLAG_SV, FLAG_F, FLAG_P, FLAG_S, FLAG_M});"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final Prefix PREFIX_AVGTYPE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public static final Prefix PREFIX_COUNT \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // @Todo to remove if not used."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 25,
      "jyx11011": 4,
      "-": 14,
      "whneo97": 20,
      "scwaterbear": 8,
      "chen-xi-cx": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand and returns a DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORDTYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECORDTYPE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                    PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //            .get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty. If {@code tags}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * contain only one element which is an empty string, it will be parsed into a {@code Set\u003cTag\u003e} containing zero"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * tags."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assert tags !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "-": 48,
      "scwaterbear": 3,
      "whneo97": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.TimeDuration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Parses input arguments and creates a new EventCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class EventCommandParser implements Parser\u003cEventCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EventCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * and returns an EventCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CALENDAR_DESCRIPTION, PREFIX_DATETIME, PREFIX_TIME_DURATION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CALENDAR_DESCRIPTION, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_CALENDAR_DESCRIPTION).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        List\u003cString\u003e dateTimes \u003d argMultimap.getAllValues(PREFIX_DATETIME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTime dateTime \u003d ParserUtil.parseDateTime(dateTimes.get(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event event \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (dateTimes.size() \u003e 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            DateTime endingDateTime \u003d ParserUtil.parseDateTime(dateTimes.get(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            event.setEndingDateTime(endingDateTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            TimeDuration timeDuration \u003d ParserUtil.parseTimeDuration(argMultimap.getValue(PREFIX_TIME_DURATION).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            DateTime reminderDateTime \u003d dateTime.minus(timeDuration);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Description reminderDescription \u003d new Description(getAutoReminderDescription(event, timeDuration));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Reminder autoReminder \u003d new Reminder(reminderDescription, reminderDateTime, Repetition.Once);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            event.setAutoReminder(autoReminder);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new EventCommand(event);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String getAutoReminderDescription(Event event, TimeDuration timeDuration) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"Event: \" + event.getDescription() + \"in \" + timeDuration;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jyx11011": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand and returns a FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Flag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Marks the option flags for selective food recommendations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * E.g. \u0027-m\u0027 in \u0027recmf -m\u0027 to only show meal recommendations."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Flag {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Flag(String flag) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return getFlag();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return flag \u003d\u003d null ? 0 : flag.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!(obj instanceof Flag)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Flag other \u003d (Flag) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return other.getFlag().equals(this.getFlag());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNABLE_TO_LOAD_IMAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.awt.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.TimeDuration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.DateOfBirth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.DisplayPicPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Goal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.MedicalCondition;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Nric;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.OtherBioInfo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.ProfileDesc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Concentration;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Height;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Weight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Calorie;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Fat;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Gi;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.NutritionValue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Sugar;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Parses a {@code String recordType} into a {@code RecordType}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws ParseException if the given {@code recordType} does not match any of the enums."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static RecordType parseRecordType(String recordType) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(recordType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String trimmedRType \u003d recordType.split(\" \")[0].trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return RecordType.valueOf(trimmedRType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(\"System does not accommodate such a record type.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses a {@code String profileDesc} into a {@code ProfileDesc}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the given {@code profileDesc} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static ProfileDesc parseProfileDesc(Optional\u003cString\u003e profileDesc) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(profileDesc);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!profileDesc.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String trimmedProfileDesc \u003d profileDesc.get().trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!ProfileDesc.isValidProfileDesc(trimmedProfileDesc)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new ProfileDesc(trimmedProfileDesc);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new ProfileDesc(\"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses a {@code String displayPicPath} into a {@code DisplayPicPath}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the given {@code displayPicPath} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static DisplayPicPath parseDpPath(Optional\u003cString\u003e dpPath) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(dpPath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!dpPath.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String trimmedDisplayPic \u003d dpPath.get().trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!DisplayPicPath.isValidDisplayPicPath(trimmedDisplayPic)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new ParseException(DisplayPicPath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (!trimmedDisplayPic.isEmpty()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    Image image \u003d ImageIO.read(new File(trimmedDisplayPic));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    if (image \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        throw new ParseException(MESSAGE_UNABLE_TO_LOAD_IMAGE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    throw new ParseException(MESSAGE_UNABLE_TO_LOAD_IMAGE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new DisplayPicPath(trimmedDisplayPic);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new DisplayPicPath(\"\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses a {@code String nric} into a {@code Nric}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the given {@code nric} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Nric parseNric(Optional\u003cString\u003e nric) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!nric.isEmpty()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String trimmedNric \u003d nric.get().trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new Nric(\"\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Gender parseGender(Optional\u003cString\u003e gender) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!gender.isEmpty()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String trimmedGender \u003d gender.get().trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new Gender(\"\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses a {@code String dateOfBirth} into a {@code DateOfBirth}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the given {@code dateOfBirth} is invalid."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static DateOfBirth parseDateOfBirth(Optional\u003cString\u003e dateOfBirth) throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!dateOfBirth.isEmpty()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String trimmedDateOfBirth \u003d dateOfBirth.get().trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!DateOfBirth.isValidDateOfBirth(trimmedDateOfBirth)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new DateOfBirth(trimmedDateOfBirth);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new DateOfBirth(\"\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e phones} into a {@code List\u003cPhone\u003e}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static List\u003cPhone\u003e parsePhones(Collection\u003cString\u003e phones) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(phones);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (phones.isEmpty()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final List\u003cPhone\u003e phoneList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (String phoneNumber : phones) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            phoneList.add(parsePhone(phoneNumber));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return phoneList;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses a {@code String medicalCondition} into a {@code MedicalCondition}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the given {@code medicalCondition} is invalid."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static MedicalCondition parseMedicalCondition(String medicalCondition) throws ParseException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(medicalCondition);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String trimmedMedicalCondition \u003d medicalCondition.trim();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!MedicalCondition.isValidMedicalCondition(trimmedMedicalCondition)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new MedicalCondition(trimmedMedicalCondition);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e medicalConditions} into a {@code List\u003cMedicalCondition\u003e}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static List\u003cMedicalCondition\u003e parseMedicalConditions(Collection\u003cString\u003e medicalConditions)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(medicalConditions);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (medicalConditions.isEmpty()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final List\u003cMedicalCondition\u003e medicalConditionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (String medicalConditionName : medicalConditions) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            medicalConditionList.add(parseMedicalCondition(medicalConditionName));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return medicalConditionList;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses a {@code String address} into a {@code Address}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Address parseAddress(Optional\u003cString\u003e address) throws ParseException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!address.isEmpty()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String trimmedAddress \u003d address.get().trim();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new Address(\"\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses a {@code String goal} into a {@code Goal}."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the given {@code goal} is invalid."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Goal parseGoal(String goal) throws ParseException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(goal);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String trimmedGoal \u003d goal.trim();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!Goal.isValidGoal(trimmedGoal)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new Goal(trimmedGoal);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e goals} into a {@code List\u003cGoal\u003e}."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static List\u003cGoal\u003e parseGoals(Collection\u003cString\u003e goals) throws ParseException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(goals);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final List\u003cGoal\u003e goalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (String goalName : goals) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            goalList.add(parseGoal(goalName));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return goalList;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses a {@code String otherInfo} into a {@code OtherBioInfo}."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the given {@code otherBioInfo} is invalid."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static OtherBioInfo parseOtherBioInfo(Optional\u003cString\u003e otherInfo) throws ParseException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!otherInfo.isEmpty()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            requireNonNull(otherInfo);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String trimmedOtherInfo \u003d otherInfo.get().trim();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!OtherBioInfo.isValidOtherInfo(trimmedOtherInfo)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new ParseException(OtherBioInfo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new OtherBioInfo(trimmedOtherInfo);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new OtherBioInfo(\"\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Aesthetics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses a {@code String colour} into a {@code Colour}."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the given {@code colour} is invalid."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Colour parseColour(String colour) throws ParseException {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(colour);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String trimmedColour \u003d colour.trim();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!Colour.isValidColour(trimmedColour)) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(Colour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new Colour(trimmedColour);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Food Map \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses a {@code String name} into a {@code FoodName}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static FoodName parseFoodName(String name) throws ParseException {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!FoodName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new FoodName(trimmedName);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     * Parses a {@code String address} into an {@code Address}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        requireNonNull(address);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     * Parses a {@code String email} into an {@code Email}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        requireNonNull(email);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        requireNonNull(tag);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        requireNonNull(tags);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        for (String tagName : tags) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        return tagSet;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Checks whether {@code String value} is valid."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws ParseException if the given {@code nutritionValue} is invalid"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static String verifyNutritionValue(String nutritionValue) throws ParseException {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(nutritionValue);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String trimmedValue \u003d nutritionValue.trim();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!NutritionValue.isValidValue(nutritionValue)) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new ParseException(NutritionValue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return trimmedValue;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String value} into a {@code Calorie}."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static Calorie parseCalorieValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Calorie(verifyNutritionValue(value));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String value} into a {@code Gi}."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static Gi parseGiValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Gi(verifyNutritionValue(value));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String value} into a {@code Sugar}."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static Sugar parseSugarValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Sugar(verifyNutritionValue(value));"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Parses a {@code String value} into a {@code Fat}."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static Fat parseFatValue(String value) throws ParseException {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Fat(verifyNutritionValue(value));"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Parses a {@code String dateTime} into an {@code DateTime}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new DateTime(dateTime);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Parses a {@code String concentration} into an {@code Concentration}."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws ParseException if the given {@code concentration} is invalid."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static Concentration parseConcentration(String concentration) throws ParseException {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String trimmedConcentration \u003d concentration.trim();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!Concentration.isValidConcentration(trimmedConcentration)) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(Concentration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new Concentration(trimmedConcentration);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Parses a {@code String height} into an {@code Height}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws ParseException if the given {@code height} is invalid."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static Height parseHeight(String height) throws ParseException {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String trimmedHeight \u003d height.trim();"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!Height.isValidHeight(trimmedHeight)) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new Height(trimmedHeight);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Parses a {@code String weight} into an {@code Weight}. Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static Weight parseWeight(String weight) throws ParseException {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String trimmedWeight \u003d weight.trim();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!Weight.isValidWeight(trimmedWeight)) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new ParseException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new Weight(trimmedWeight);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Parses a {@code String repetition} into a {@code Repetition}."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws ParseException if the given {@code repetition} is invalid."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static Repetition parseRepetition(String repetition) throws ParseException {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(repetition);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String trimmedRepetition \u003d repetition.trim();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!Repetition.isValidRepetition(trimmedRepetition)) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new ParseException(Repetition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return Repetition.of(trimmedRepetition);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Parses a {@code String timeDuration} into a {@code TimeDuration}."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws ParseException if the given {@code timeDuration} is invalid."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static TimeDuration parseTimeDuration(String timeDuration) throws ParseException {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(timeDuration);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String trimmedTimeDuration \u003d timeDuration.trim();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!TimeDuration.isValidTimeDuration(trimmedTimeDuration)) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new ParseException(TimeDuration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            String[] hm \u003d trimmedTimeDuration.split(\":\");"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            int hours \u003d Integer.parseInt(hm[0]);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            int minutes \u003d Integer.parseInt(hm[1]);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new TimeDuration(hours, minutes);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 58,
      "jyx11011": 53,
      "-": 97,
      "whneo97": 282,
      "scwaterbear": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string. E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecmFoodCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAGS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.RecmFoodCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodTypeIsWantedPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Parses input arguments and creates a new RecmFoodCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class RecmFoodCommandParser implements Parser\u003cRecmFoodCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public RecmFoodCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_FOOD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        List\u003cFoodType\u003e foodTypes \u003d getWantedFoodTypes(getParsedFlags(argumentMultimap.getPreamble()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Optional\u003cString\u003e foodWords \u003d argumentMultimap.getValue(PREFIX_FOOD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (foodWords.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return new RecmFoodCommand(new FoodTypeIsWantedPredicate(foodTypes), x -\u003e true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String[] foodKeywords \u003d foodWords.get().trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new RecmFoodCommand(new FoodTypeIsWantedPredicate(foodTypes),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            new FoodNameContainsKeywordsPredicate(Arrays.asList(foodKeywords)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private List\u003cFlag\u003e getParsedFlags(String preamble) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        int expectedFlagNumber \u003d preamble.split(\"\\\\s+\").length;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        List\u003cFlag\u003e validFlags \u003d Arrays.stream(preamble.split(\"\\\\s+\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .map(f -\u003e new Flag(f))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .filter(flag -\u003e FLAGS.contains(flag))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        /*If no flag entered, return all flags to show the full list.*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (preamble.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return FLAGS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } else if (expectedFlagNumber !\u003d validFlags.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new ParseException(\"One or more flags are invalid.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return validFlags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private List\u003cFoodType\u003e getWantedFoodTypes(List\u003cFlag\u003e flags) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        List\u003cFoodType\u003e foodTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (Flag flag : flags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            foodTypes.add(FoodType.getFrom(flag.toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodTypes;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_REPETITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Parses input arguments and creates a new ReminderCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ReminderCommandParser implements Parser\u003cReminderCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReminderCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * and returns an ReminderCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CALENDAR_DESCRIPTION, PREFIX_DATETIME,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        PREFIX_CALENDAR_REPETITION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CALENDAR_DESCRIPTION, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_CALENDAR_DESCRIPTION).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Repetition repetition \u003d ParserUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .parseRepetition(argMultimap.getValue(PREFIX_CALENDAR_REPETITION).orElse(\"once\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder reminder \u003d new Reminder(description, dateTime, repetition);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new ReminderCommand(reminder);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/aesthetics/FontColourCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.parser.aesthetics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseColour;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.aesthetics.FontColourCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class FontColourCommandParser implements Parser\u003cFontColourCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public FontColourCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FontColourCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Colour fontColour \u003d parseColour(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new FontColourCommand(fontColour);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/bio/AddBioCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.parser.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DP_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMERGENCY_CONTACT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOALS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHER_BIO_INFO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.bio.AddBioCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.DateOfBirth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.DisplayPicPath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Gender;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Goal;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.MedicalCondition;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Nric;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.OtherBioInfo;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.ProfileDesc;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Parses input arguments and creates a new AddBioCommand object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AddBioCommandParser implements Parser\u003cAddBioCommand\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBioCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * and returns an AddBioCommand object for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public AddBioCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DP_PATH, PREFIX_PROFILE_DESC, PREFIX_NRIC,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        PREFIX_GENDER, PREFIX_DATE_OF_BIRTH, PREFIX_CONTACT_NUMBER, PREFIX_EMERGENCY_CONTACT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        PREFIX_MEDICAL_CONDITION, PREFIX_ADDRESS, PREFIX_GOALS, PREFIX_OTHER_BIO_INFO);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_CONTACT_NUMBER, PREFIX_EMERGENCY_CONTACT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                PREFIX_MEDICAL_CONDITION)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBioCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        DisplayPicPath displayPicPath \u003d ParserUtil.parseDpPath(argMultimap.getValue(PREFIX_DP_PATH));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ProfileDesc profileDesc \u003d ParserUtil.parseProfileDesc(argMultimap.getValue(PREFIX_PROFILE_DESC));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        DateOfBirth dateOfBirth \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE_OF_BIRTH));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cPhone\u003e contactNumberList \u003d ParserUtil.parsePhones(argMultimap.getAllValues(PREFIX_CONTACT_NUMBER));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cPhone\u003e emergencyContactList \u003d ParserUtil.parsePhones(argMultimap.getAllValues(PREFIX_EMERGENCY_CONTACT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cMedicalCondition\u003e medicalConditionList \u003d ParserUtil.parseMedicalConditions(argMultimap"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .getAllValues(PREFIX_MEDICAL_CONDITION));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cGoal\u003e goalList \u003d ParserUtil.parseGoals(argMultimap.getAllValues(PREFIX_GOALS));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        OtherBioInfo otherInfo \u003d ParserUtil.parseOtherBioInfo(argMultimap.getValue(PREFIX_OTHER_BIO_INFO));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        User user \u003d new User(name, displayPicPath, profileDesc, nric, gender, dateOfBirth, contactNumberList,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                emergencyContactList, medicalConditionList, address, goalList, otherInfo);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new AddBioCommand(user);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/bio/EditBioCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.parser.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INCONSISTENT_SUBARGUMENT_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SUBARGUMENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SUBARGUMENT_INDEX_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT_NUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DP_PATH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMERGENCY_CONTACT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GOALS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHER_BIO_INFO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILE_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.bio.EditBioCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.bio.EditBioCommand.EditUserDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Goal;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.MedicalCondition;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Parses input arguments and creates a new EditBioCommand object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class EditBioCommandParser implements Parser\u003cEditBioCommand\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // Separator used to separate sub-arguments."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String SEPARATOR \u003d \"/\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBioCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * and returns an EditBioCommand object for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public EditBioCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DP_PATH, PREFIX_PROFILE_DESC, PREFIX_NRIC,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        PREFIX_GENDER, PREFIX_DATE_OF_BIRTH, PREFIX_CONTACT_NUMBER, PREFIX_EMERGENCY_CONTACT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        PREFIX_MEDICAL_CONDITION, PREFIX_ADDRESS, PREFIX_GOALS, PREFIX_OTHER_BIO_INFO);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBioCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        EditUserDescriptor editUserDescriptor \u003d new EditBioCommand.EditUserDescriptor();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            editUserDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DP_PATH).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            editUserDescriptor.setDpPath(ParserUtil.parseDpPath(argMultimap.getValue(PREFIX_DP_PATH)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PROFILE_DESC).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            editUserDescriptor.setProfileDesc(ParserUtil.parseProfileDesc(argMultimap.getValue(PREFIX_PROFILE_DESC)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            editUserDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            editUserDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_OF_BIRTH).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            editUserDescriptor.setDateOfBirth(ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE_OF_BIRTH)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_CONTACT_NUMBER).isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            List\u003cString\u003e contactNumberStringList \u003d argMultimap.getAllValues(PREFIX_CONTACT_NUMBER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (hasIndexes(contactNumberStringList, PREFIX_CONTACT_NUMBER)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                addIndividualEdits(contactNumberStringList, PREFIX_CONTACT_NUMBER, editUserDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                parsePhonesForEdit(contactNumberStringList).ifPresent(editUserDescriptor::setContactNumbers);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_EMERGENCY_CONTACT).isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            List\u003cString\u003e emergencyContactStringList \u003d argMultimap.getAllValues(PREFIX_EMERGENCY_CONTACT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (hasIndexes(emergencyContactStringList, PREFIX_EMERGENCY_CONTACT)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                addIndividualEdits(emergencyContactStringList, PREFIX_EMERGENCY_CONTACT, editUserDescriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                parsePhonesForEdit(emergencyContactStringList).ifPresent(editUserDescriptor::setEmergencyContacts);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_MEDICAL_CONDITION).isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            List\u003cString\u003e medicalConditionStringList \u003d argMultimap.getAllValues(PREFIX_MEDICAL_CONDITION);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (hasIndexes(medicalConditionStringList, PREFIX_MEDICAL_CONDITION)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                addIndividualEdits(medicalConditionStringList, PREFIX_MEDICAL_CONDITION, editUserDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                parseMedicalConditionsForEdit(medicalConditionStringList)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        .ifPresent(editUserDescriptor::setMedicalConditions);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            editUserDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_GOALS).isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            List\u003cString\u003e goalStringList \u003d argMultimap.getAllValues(PREFIX_GOALS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (hasIndexes(goalStringList, PREFIX_GOALS)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                addIndividualEdits(goalStringList, PREFIX_GOALS, editUserDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                parseGoalsForEdit(goalStringList)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        .ifPresent(editUserDescriptor::setGoals);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OTHER_BIO_INFO).isPresent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            editUserDescriptor.setOtherBioInfo(ParserUtil"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    .parseOtherBioInfo(argMultimap.getValue(PREFIX_OTHER_BIO_INFO)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!editUserDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(EditBioCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new EditBioCommand(editUserDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Adds individual edits and corresponding indices given in the stringList to the editUserDescriptor."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param stringList  List of strings representing tokens for given prefixes."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param prefix Prefix containing values with indexes to specify individual items to replace in"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *               editUserDescription."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param editUserDescriptor EditUserDescriptor instance containing items that replace those in the original list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static void addIndividualEdits(List\u003cString\u003e stringList, Prefix prefix,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                                           EditUserDescriptor editUserDescriptor) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (String phoneString : stringList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            HashMap\u003cIndex, String\u003e indexMap \u003d getValidatedIndexValueMap(phoneString, prefix);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Index index \u003d indexMap.keySet().iterator().next();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (PREFIX_CONTACT_NUMBER.equals(prefix)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Phone contactNumber \u003d ParserUtil.parsePhone(indexMap.get(index));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                HashMap\u003cIndex, Phone\u003e indexContactNumberMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                indexContactNumberMap.put(index, contactNumber);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                editUserDescriptor.addToIndividualContactNumberEdit(indexContactNumberMap);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (PREFIX_EMERGENCY_CONTACT.equals(prefix)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Phone emergencyContact \u003d ParserUtil.parsePhone(indexMap.get(index));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                HashMap\u003cIndex, Phone\u003e indexEmergencyContactMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                indexEmergencyContactMap.put(index, emergencyContact);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                editUserDescriptor.addToIndividualEmergencyContactsEdit(indexEmergencyContactMap);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (PREFIX_MEDICAL_CONDITION.equals(prefix)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                MedicalCondition medicalCondition \u003d ParserUtil.parseMedicalCondition(indexMap.get(index));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                HashMap\u003cIndex, MedicalCondition\u003e indexMedicalConditionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                indexMedicalConditionMap.put(index, medicalCondition);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                editUserDescriptor.addToIndividualMedicalConditionsEdit(indexMedicalConditionMap);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (PREFIX_GOALS.equals(prefix)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Goal goal \u003d ParserUtil.parseGoal(indexMap.get(index));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                HashMap\u003cIndex, Goal\u003e indexGoalMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                indexGoalMap.put(index, goal);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                editUserDescriptor.addToIndividualGoalsEdit(indexGoalMap);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_SUBARGUMENT_INDEX);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns whether or not given stringList contains indexes."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures that presence of indexing given for each type of prefix is consistent."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param stringList List of strings representing tokens for given prefixes."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param prefix Prefix which has values possibly containing indexes."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static boolean hasIndexes(List\u003cString\u003e stringList, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (stringList.size() \u003e 0) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            boolean containsSeparator \u003d stringList.get(0).contains(SEPARATOR);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            for (int i \u003d 1; i \u003c stringList.size(); i++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (stringList.get(i).contains(SEPARATOR) !\u003d containsSeparator) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    throw new ParseException(MESSAGE_INCONSISTENT_SUBARGUMENT_INDEX);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return containsSeparator;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a map containing a validated one-based index and value, given a string."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param subArgs String containing items representing a one-based index and value to be"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *               validated respectively."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param prefix Prefix for which the map is to be generated for."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A HashMap containing a validated one-based index and value for the prefix\u0027s value."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws ParseException if the tokens are of invalid size, or index cannot be parsed."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static HashMap\u003cIndex, String\u003e getValidatedIndexValueMap(String subArgs, Prefix prefix)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String[] tokens \u003d subArgs.split(SEPARATOR);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (tokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBioCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String indexString \u003d tokens[0];"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String valueString \u003d tokens[1];"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            int index \u003d Integer.parseInt(indexString);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (index \u003c 0) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            HashMap\u003cIndex, String\u003e indexMap \u003d new HashMap\u003c\u003e(1);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            indexMap.put(Index.fromOneBased(index), valueString);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return indexMap;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SUBARGUMENT_INDEX);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new ParseException(MESSAGE_SUBARGUMENT_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e phones} into a {@code List\u003cPhone\u003e} if {@code phones} is non-empty."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * If {@code phones} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * {@code List\u003cPhone\u003e} containing zero phones."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Optional\u003cList\u003cPhone\u003e\u003e parsePhonesForEdit(Collection\u003cString\u003e phones) throws ParseException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert phones !\u003d null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (phones.isEmpty()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Collection\u003cString\u003e phoneList \u003d phones.size() \u003d\u003d 1 \u0026\u0026 phones.contains(\"\") ? Collections.emptyList() : phones;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Optional.of(ParserUtil.parsePhones(phoneList));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e medicalConditions} into a {@code List\u003cMedicalCondition\u003e} if"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * {@code medicalConditions} is non-empty."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * If {@code medicalConditions} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * {@code List\u003cMedicalCondition\u003e} containing zero medicalConditions."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Optional\u003cList\u003cMedicalCondition\u003e\u003e parseMedicalConditionsForEdit(Collection\u003cString\u003e medicalConditions)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert medicalConditions !\u003d null;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (medicalConditions.isEmpty()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Collection\u003cString\u003e medicalConditionList \u003d medicalConditions.size() \u003d\u003d 1 \u0026\u0026 medicalConditions.contains(\"\")"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? Collections.emptyList()"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : medicalConditions;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Optional.of(ParserUtil.parseMedicalConditions(medicalConditionList));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e goals} into a {@code List\u003cGoal\u003e} if {@code goals} is non-empty."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * If {@code goals} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * {@code List\u003cGoal\u003e} containing zero goals."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Optional\u003cList\u003cGoal\u003e\u003e parseGoalsForEdit(Collection\u003cString\u003e goals) throws ParseException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert goals !\u003d null;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (goals.isEmpty()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Collection\u003cString\u003e goalList \u003d goals.size() \u003d\u003d 1 \u0026\u0026 goals.contains(\"\") ? Collections.emptyList() : goals;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Optional.of(ParserUtil.parseGoals(goalList));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 287
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}. {@code persons} must not contain duplicate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds a person to the address book. The person must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}. {@code target} must exist in the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * address book. The person identity of {@code editedPerson} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}. {@code key} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Calendar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.UniqueCalendarEntryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Wraps all data at the calendar level Duplicates are not allowed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Calendar implements ReadOnlyCalendar {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final UniqueCalendarEntryList calendarEntries;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        calendarEntries \u003d new UniqueCalendarEntryList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Calendar() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Creates an calendar using the CalendarEntries in the {@code toBeCopied}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Calendar(ReadOnlyCalendar toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Replaces the contents of the calendar list with {@code calendarEntries}. {@code calendarEntries} must not"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * contain duplicate calendar entries."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setCalendarEntries(List\u003cCalendarEntry\u003e calendarEntries) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.calendarEntries.setCalendarEntries(calendarEntries);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Resets the existing data of this {@code Calendar} with {@code newData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void resetData(ReadOnlyCalendar newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        setCalendarEntries(newData.getCalendarEntryList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if a calendar entry with the same identity as {@code calendarEntry} exists in the calendar."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean hasCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(calendarEntry);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return calendarEntries.contains(calendarEntry);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Adds a calendar to the calendar. The calendar entry must not already exist in the calendar."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void addCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        calendarEntries.add(calendarEntry);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Replaces the given calendar entry {@code target} in the list with {@code editedCalendarEntry}. {@code target}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * must exist in the calendar. The calendar entry identity of {@code editedCalendar} must not be the same as"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * another existing calendar entry in the calendar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setCalendarEntry(CalendarEntry target, CalendarEntry editedCalendarEntry) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(editedCalendarEntry);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        calendarEntries.setCalendarEntry(target, editedCalendarEntry);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Removes {@code key} from this {@code Calendar}. {@code key} must exist in the calendar."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void removeCalendarEntry(CalendarEntry key) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        calendarEntries.remove(key);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return calendarEntries.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ObservableList\u003cCalendarEntry\u003e getCalendarEntryList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return calendarEntries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                || (other instanceof Calendar // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 calendarEntries.equals(((Calendar) other).calendarEntries));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return calendarEntries.hashCode();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/DateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents a date and a time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String VALIDATION_PATTERN_STRING \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(VALIDATION_PATTERN_STRING);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"DateTime should be in the format: yyyy-MM-dd HH:mm and it \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"should contain valid number\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.date \u003d LocalDateTime.parse(dateTime, DATE_TIME_FORMATTER).toLocalDate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.time \u003d LocalDateTime.parse(dateTime, DATE_TIME_FORMATTER).toLocalTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(localDateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.date \u003d localDateTime.toLocalDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.time \u003d localDateTime.toLocalTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns true if a given string is a valid dateTime."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            LocalDateTime.parse(test, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return date.getDayOfWeek();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getDayOfWeekString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dayString \u003d getDayOfWeek().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dayString.substring(0, 1).concat(dayString.substring(1).toLowerCase());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a DateTime with a time duration subtracted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DateTime minus(TimeDuration timeDuration) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        LocalDateTime current \u003d LocalDateTime.of(date, time);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new DateTime(current.minusHours(timeDuration.getHours()).minusMinutes(timeDuration.getMinutes()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if time are same."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param dateTime the dateTime to be compared with."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return true if time are same."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean isSameTime(DateTime dateTime) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this.time.equals(dateTime.getTime());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if both date and time are same."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!(other instanceof DateTime)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTime otherDateTime \u003d (DateTime) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return LocalDateTime.of(date, time).equals(LocalDateTime.of(otherDateTime.date, otherDateTime.time));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return LocalDateTime.of(date, time).hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return LocalDateTime.of(date, time).format(formatter);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 109,
      "scwaterbear": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    Predicate\u003cUser\u003e PREDICATE_SHOW_ALL_USERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //TODO: check what this means"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    Predicate\u003cRecord\u003e PREDICATE_SHOW_ALL_RECORDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Deletes the given person. The person must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds the given person. {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}. {@code target} must exist in the address"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * book. The person identity of {@code editedPerson} must not be the same as another existing person in the address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces food list data with the data in {@code newFoodList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void setFoodList(UniqueFoodList newFoodList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    boolean hasFood(Food food);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Deletes the given food. The food must exist in the recommendations."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void deleteFood(Food food);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds the given food. {@code food} must not already exist in the recommendations."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void addFood(Food food);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the {@code UniqueFoodList} object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    UniqueFoodList getUniqueFoodListObject();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the a list of foods."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ObservableList\u003cFood\u003e getFilterFoodList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dRECORD\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Replaces food list data with the data in {@code newFoodList}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    void setRecordList(UniqueRecordList newRecordList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    boolean hasRecord(Record record);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Deletes the given food. The food must exist in the recommendations."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    void deleteRecord(Record record);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Adds the given food. {@code food} must not already exist in the recommendations."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    void addRecord(Record record);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns the {@code UniqueFoodList} object."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    UniqueRecordList getUniqueRecordListObject();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns the a list of foods."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    ObservableList\u003cRecord\u003e getRecordList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilterRecordList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Returns the last average type calculated."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    AverageType getAverageType();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Returns the last record type whose average is calculated."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    RecordType getRecordType();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets the average type being calculated currently."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    void setAverageType(AverageType averageType);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Sets the record type whose average is being calculated currently."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    void setRecordType(RecordType recordType);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Calculate average values of a record type."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    void calculateAverageMap(AverageType averageType, RecordType recordType, int count);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Returns a {@code AverageMap} object that maps time period to the respective average values."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    ObservableMap\u003cLocalDate, Double\u003e getAverageMap();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns whether or not a user biography already exists."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean bioExists();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Returns the UserList */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ReadOnlyUserList getUserList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the user prefs\u0027 user list file path."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    Path getUserListFilePath();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Replaces user list data with the data in {@code userList}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    void setUserList(ReadOnlyUserList userList);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Sets the user prefs\u0027 user list file path."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    void setUserListFilePath(Path userListFilePath);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a user with the same identity as {@code user} exists in the address book."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    boolean hasUser(User user);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Adds the given user. {@code user} must not already exist in the user list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    void addUser(User user);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Replaces the given user {@code target} with {@code editedUser}. {@code target} must exist in the address"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * book. The user identity of {@code editedUser} must not be the same as another existing user in the address"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    void setUser(User target, User editedUser);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns an unmodifiable view of the filtered user list"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ObservableList\u003cUser\u003e getFilteredUserList();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Updates the filter of the filtered user list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    void updateFilteredUserList(Predicate\u003cUser\u003e predicate);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the Calendar."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    ReadOnlyCalendar getCalendar();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if a calendar entry with the same identity as {@code calendarEntry} exists in the calendar."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    boolean hasCalendarEntry(CalendarEntry calendarEntry);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Deletes the given calendarEntry. The calendarEntry must exist in the calendar."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void deleteCalendarEntry(CalendarEntry target);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Adds the given calendar entry. {@code calendarEntry} must not already exist in the calendar."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void addCalendarEntry(CalendarEntry calendarEntry);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Replaces the given calendarEntry {@code target} with {@code editedCalendarEntry}. {@code target} must exist in"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * the calendar. The calendarEntry identity of {@code editedCalendarEntry} must not be the same as another existing"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * calendar entry in the calendar."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void setCalendarEntry(CalendarEntry target, CalendarEntry editedCalendarEntry);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns an unmodifiable view of the filtered calendar entry list"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEntryList();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Aesthetics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Sets the font colour of this application and saves it to the user preferences file."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    void setFontColour(Colour fontColour);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the font colour to be set for this app."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    Colour getFontColour();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 62,
      "jyx11011": 34,
      "-": 71,
      "whneo97": 72,
      "scwaterbear": 43,
      "chen-xi-cx": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final FilteredList\u003cUser\u003e filteredUserList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final UniqueFoodList foodList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final UserList userList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoodList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final UniqueRecordList recordList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final FilteredList\u003cRecord\u003e filteredRecordList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final Calendar calendar;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final FilteredList\u003cCalendarEntry\u003e filteredCalenderEntryList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private final AverageMap averageMap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private AverageType averageType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private RecordType recordType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, ReadOnlyUserList userList,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        UniqueFoodList foodList, UniqueRecordList recordList,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        ReadOnlyCalendar calendar) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, foodList, userList, recordList, calendar);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \" and food map: \" + foodList + \" and record list: \" + recordList + \" and calendar: \" + calendar);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.userList \u003d new UserList(userList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.filteredUserList \u003d new FilteredList\u003c\u003e(this.userList.getUserList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodList \u003d foodList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.filteredFoodList \u003d new FilteredList\u003c\u003e(this.foodList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.recordList \u003d recordList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.filteredRecordList \u003d new FilteredList\u003c\u003e(this.recordList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.calendar \u003d new Calendar(calendar);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.filteredCalenderEntryList \u003d new FilteredList\u003c\u003e(this.calendar.getCalendarEntryList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.averageMap \u003d new AverageMap();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.averageType \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.recordType \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new UserList(), new UniqueFoodList(), new UniqueRecordList(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                new Calendar());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of {@code"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * versionedAddressBook}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            Object obj) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setUserList(ReadOnlyUserList userList) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.userList.resetData(userList);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean bioExists() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return !this.userList.isEmpty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ReadOnlyUserList getUserList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return userList;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Path getUserListFilePath() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return userPrefs.getUserListFilePath();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean hasUser(User user) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return userList.hasUser(user);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void addUser(User user) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        userList.addUser(user);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        updateFilteredUserList(PREDICATE_SHOW_ALL_USERS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code User} backed by the internal list of {@code"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * versionedAddressBook}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ObservableList\u003cUser\u003e getFilteredUserList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return filteredUserList;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void updateFilteredUserList(Predicate\u003cUser\u003e predicate) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        filteredUserList.setPredicate(predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    //Calendar"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean hasCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(calendarEntry);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return calendar.hasCalendarEntry(calendarEntry);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void deleteCalendarEntry(CalendarEntry target) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        calendar.removeCalendarEntry(target);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void addCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        calendar.addCalendarEntry(calendarEntry);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setCalendarEntry(CalendarEntry target, CalendarEntry editedCalendarEntry) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireAllNonNull(target, editedCalendarEntry);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        calendar.setCalendarEntry(target, editedCalendarEntry);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEntryList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return filteredCalenderEntryList;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setUser(User target, User editedUser) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireAllNonNull(target, editedUser);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        userList.setUser(target, editedUser);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setUserListFilePath(Path userListFilePath) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(userListFilePath);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        userPrefs.setUserListFilePath(userListFilePath);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Aesthetics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Colour getFontColour() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return userPrefs.getFontColour();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setFontColour(Colour fontColour) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        userPrefs.setFontColour(fontColour);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Food Map \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //addFood() Function"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodList.contains(food);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void deleteFood(Food food) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.remove(food);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void setFoodList(UniqueFoodList uniqueFoodLists) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireAllNonNull(uniqueFoodLists);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.setFoods(uniqueFoodLists);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public UniqueFoodList getUniqueFoodListObject() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilterFoodList() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return filteredFoodList;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        filteredFoodList.setPredicate(predicate);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return recordList.contains(record);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void deleteRecord(Record record) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        recordList.remove(record);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        recordList.add(record);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void setRecordList(UniqueRecordList uniqueRecordLists) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireAllNonNull(uniqueRecordLists);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        recordList.setRecords(uniqueRecordLists);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public UniqueRecordList getUniqueRecordListObject() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return recordList;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return recordList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilterRecordList() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return filteredRecordList;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        filteredRecordList.setPredicate(predicate);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public AverageType getAverageType() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return averageType;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public RecordType getRecordType() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return recordType;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void setAverageType(AverageType averageType) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.averageType \u003d averageType;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void setRecordType(RecordType recordType) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        this.recordType \u003d recordType;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void calculateAverageMap(AverageType averageType, RecordType recordType, int count) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        setAverageType(averageType);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        setRecordType(recordType);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        averageMap.calculateAverage(getRecordList(), averageType, recordType, count);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public ObservableMap\u003cLocalDate, Double\u003e getAverageMap() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return averageMap.asUnmodifiableObservableMap();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 59,
      "jyx11011": 45,
      "-": 144,
      "whneo97": 83,
      "scwaterbear": 50,
      "chen-xi-cx": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an unmodifiable view of the persons list. This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCalendar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Unmodifiable view of a calendar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public interface ReadOnlyCalendar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns an unmodifiable view of the calendar entry list. This list will not contain any"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * duplicate calendar entries."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    ObservableList\u003cCalendarEntry\u003e getCalendarEntryList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRecordBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Unmodifiable view of a record book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public interface ReadOnlyRecordBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns an unmodifiable view of the records list. This list will not contain any duplicate records."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    ObservableList\u003cRecord\u003e getRecordList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public interface ReadOnlyUserList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns an unmodifiable view of the persons list. This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ObservableList\u003cUser\u003e getUserList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    Colour getFontColour();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "whneo97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TimeDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents a time duration."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TimeDuration {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time duration must be in the format: hh:mm and it should not be\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{2}:\\\\d{2}$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private int hours;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private int minutes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TimeDuration(int hours, int minutes) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int getHours() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return hours;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int getMinutes() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return minutes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if a given string is a valid time duration;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static boolean isValidTimeDuration(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return String.format(\"%d hours %d minutes\", hours, minutes);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                || (other instanceof TimeDuration) // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 this.hours \u003d\u003d ((TimeDuration) other).hours"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 this.minutes \u003d\u003d ((TimeDuration) other).hours;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return Objects.hash(hours, minutes);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Path userListFilePath \u003d Paths.get(\"data\", \"userList.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Path foodListFilePath \u003d Paths.get(\"data\", \"foodlist.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Path recordListFilePath \u003d Paths.get(\"data\", \"recordlist.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Path eventListFilePath \u003d Paths.get(\"data\", \"eventlist.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Path reminderListFilePath \u003d Paths.get(\"data\", \"reminderlist.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Path getUserListFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return userListFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setUserListFilePath(Path userListFilePath) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(userListFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.userListFilePath \u003d userListFilePath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Aesthetics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Colour getFontColour() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new Colour(this.guiSettings.getFontColour());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setFontColour(Colour fontColour) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(fontColour);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.guiSettings.setFontColour(fontColour);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Food Map \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Path getFoodListFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodListFilePath;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Path getRecordListFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return recordListFilePath;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Path getEventListFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return eventListFilePath;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Path getReminderListFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return reminderListFilePath;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void setFoodListFilePath(Path foodListFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodListFilePath \u003d foodListFilePath;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void setRecordListFilePath(Path recordListFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.recordListFilePath \u003d recordListFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 11,
      "jyx11011": 10,
      "-": 86,
      "whneo97": 30,
      "scwaterbear": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/aesthetics/Colour.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.aesthetics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a User\u0027s colour in the user\u0027s biography data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidColour(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Colour {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \"Colour should be a valid colour or a hexadecimal representation of a colour.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String HEXADECIMAL_VALIDATION_REGEX \u003d \"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final List\u003cColourName\u003e COLOUR_NAMES \u003d Arrays.asList(ColourName.values());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final List\u003cColourNameAsHexadecimal\u003e COLOUR_NAMES_AS_HEXADECIMAL \u003d Arrays"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            .asList(ColourNameAsHexadecimal.values());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String colour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code Colour}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param colour A valid colour."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Colour(String colour) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(colour);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidColour(colour), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ColourName colourName \u003d getColourNameAsHexadecimal(colour);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.colour \u003d (colourName !\u003d null)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? colourName.toString().toLowerCase()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : isHexaDecimal(colour)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? colour.toUpperCase()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : colour.toLowerCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts a hexadecimal value entered into a colour name, if available."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Otherwise returns null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param hexadecimal String representation of hexadecimal to be converted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Colour name converted from a hexadecimal value if any."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static ColourName getColourNameAsHexadecimal(String hexadecimal) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int hexIndex \u003d -1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 0; i \u003c COLOUR_NAMES_AS_HEXADECIMAL.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ColourNameAsHexadecimal colourNameAsHexadecimal \u003d COLOUR_NAMES_AS_HEXADECIMAL.get(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String colourNameAsHexadecimalToString \u003d \"#\" + colourNameAsHexadecimal.toString().substring(4, 10);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (colourNameAsHexadecimalToString.equals(hexadecimal.toUpperCase())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                hexIndex \u003d i;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (hexIndex !\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return COLOUR_NAMES.get(hexIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid colour."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidColour(String test) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (isHexaDecimal(test)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            for (ColourName colourName : getColourNames()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (colourName.toString().equals(test.toUpperCase())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a hexadecimal colour."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isHexaDecimal(String test) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return test.matches(HEXADECIMAL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return colour;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof Colour // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 colour.equals(((Colour) other).colour)); // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static List\u003cColourName\u003e getColourNames() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return COLOUR_NAMES;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return colour.hashCode();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/aesthetics/ColourName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.aesthetics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Enumerates possible names of colours."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public enum ColourName {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    INDIANRED,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTCORAL,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SALMON,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKSALMON,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTSALMON,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    CRIMSON,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    RED,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    FIREBRICK,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKRED,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    PINK,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTPINK,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HOTPINK,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DEEPPINK,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MEDIUMVIOLETRED,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    PALEVIOLETRED,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    CORAL,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    TOMATO,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ORANGERED,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKORANGE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ORANGE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    GOLD,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    YELLOW,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTYELLOW,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LEMONCHIFFON,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTGOLDENRODYELLOW,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    PAPAYAWHIP,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MOCCASIN,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    PEACHPUFF,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    PALEGOLDENROD,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    KHAKI,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKKHAKI,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LAVENDER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    THISTLE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    PLUM,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    VIOLET,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ORCHID,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    FUCHSIA,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MAGENTA,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MEDIUMORCHID,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MEDIUMPURPLE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    REBECCAPURPLE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    BLUEVIOLET,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKVIOLET,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKORCHID,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKMAGENTA,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    PURPLE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    INDIGO,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SLATEBLUE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKSLATEBLUE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MEDIUMSLATEBLUE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    GREENYELLOW,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    CHARTREUSE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LAWNGREEN,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIME,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIMEGREEN,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    PALEGREEN,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTGREEN,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MEDIUMSPRINGGREEN,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SPRINGGREEN,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MEDIUMSEAGREEN,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SEAGREEN,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    FORESTGREEN,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    GREEN,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKGREEN,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    YELLOWGREEN,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    OLIVEDRAB,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    OLIVE,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKOLIVEGREEN,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MEDIUMAQUAMARINE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKSEAGREEN,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTSEAGREEN,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKCYAN,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    TEAL,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    AQUA,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    CYAN,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTCYAN,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    PALETURQUOISE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    AQUAMARINE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    TURQUOISE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MEDIUMTURQUOISE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKTURQUOISE,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    CADETBLUE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    STEELBLUE,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTSTEELBLUE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    POWDERBLUE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTBLUE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SKYBLUE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTSKYBLUE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DEEPSKYBLUE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DODGERBLUE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    CORNFLOWERBLUE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ROYALBLUE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    BLUE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MEDIUMBLUE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKBLUE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    NAVY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MIDNIGHTBLUE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    CORNSILK,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    BLANCHEDALMOND,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    BISQUE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    NAVAJOWHITE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    WHEAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    BURLYWOOD,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    TAN,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ROSYBROWN,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SANDYBROWN,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    GOLDENROD,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKGOLDENROD,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    PERU,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    CHOCOLATE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SADDLEBROWN,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SIENNA,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    BROWN,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MAROON,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    WHITE,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SNOW,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HONEYDEW,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MINTCREAM,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    AZURE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ALICEBLUE,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    GHOSTWHITE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    WHITESMOKE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SEASHELL,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    BEIGE,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    OLDLACE,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    FLORALWHITE,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    IVORY,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    ANTIQUEWHITE,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LINEN,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LAVENDERBLUSH,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    MISTYROSE,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    GAINSBORO,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTGRAY,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SILVER,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKGRAY,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    GRAY,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DIMGRAY,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    LIGHTSLATEGRAY,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    SLATEGRAY,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    DARKSLATEGRAY,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    BLACK;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/aesthetics/ColourNameAsHexadecimal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.aesthetics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Enumerates hexadecimal representations of colours."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public enum ColourNameAsHexadecimal {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_CD5C5C,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_F08080,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FA8072,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_E9967A,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFA07A,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_DC143C,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FF0000,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_B22222,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_8B0000,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFC0CB,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFB6C1,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FF69B4,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FF1493,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_C71585,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_DB7093,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FF7F50,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FF6347,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FF4500,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FF8C00,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFA500,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFD700,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFFF00,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFFFE0,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFFACD,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FAFAD2,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFEFD5,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFE4B5,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFDAB9,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_EEE8AA,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_F0E68C,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_BDB76B,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_E6E6FA,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_D8BFD8,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_DDA0DD,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_EE82EE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_DA70D6,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FF00FF,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FF00FF_,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_BA55D3,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_9370DB,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_663399,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_8A2BE2,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_9400D3,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_9932CC,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_8B008B,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_800080,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_4B0082,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_6A5ACD,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_483D8B,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_7B68EE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_ADFF2F,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_7FFF00,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_7CFC00,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_00FF00,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_32CD32,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_98FB98,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_90EE90,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_00FA9A,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_00FF7F,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_3CB371,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_2E8B57,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_228B22,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_008000,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_006400,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_9ACD32,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_6B8E23,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_808000,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_556B2F,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_66CDAA,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_8FBC8B,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_20B2AA,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_008B8B,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_008080,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_00FFFF,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_00FFFF_,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_E0FFFF,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_AFEEEE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_7FFFD4,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_40E0D0,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_48D1CC,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_00CED1,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_5F9EA0,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_4682B4,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_B0C4DE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_B0E0E6,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_ADD8E6,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_87CEEB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_87CEFA,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_00BFFF,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_1E90FF,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_6495ED,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_4169E1,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_0000FF,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_0000CD,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_00008B,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_000080,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_191970,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFF8DC,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFEBCD,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFE4C4,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFDEAD,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_F5DEB3,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_DEB887,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_D2B48C,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_BC8F8F,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_F4A460,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_DAA520,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_B8860B,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_CD853F,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_D2691E,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_8B4513,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_A0522D,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_A52A2A,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_800000,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFFFFF,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFFAFA,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_F0FFF0,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_F5FFFA,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_F0FFFF,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_F0F8FF,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_F8F8FF,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_F5F5F5,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFF5EE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_F5F5DC,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FDF5E6,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFFAF0,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFFFF0,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FAEBD7,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FAF0E6,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFF0F5,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_FFE4E1,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_DCDCDC,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_D3D3D3,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_C0C0C0,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_A9A9A9,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_808080,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_696969,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_778899,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_708090,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_2F4F4F,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    HEX_000000;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 address.equals(((Address) other).address)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return address.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/BioFieldName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains name labels of existing biography fields."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class BioFieldName {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_NAME \u003d \"Name\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_DP_PATH \u003d \"DP Path\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_PROFILE_DESCRIPTION \u003d \"Profile Description\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_NRIC \u003d \"NRIC\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_GENDER \u003d \"Gender\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_DATE_OF_BIRTH \u003d \"Date of Birth\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_CONTACT_NUMBER \u003d \"Contact Number\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_EMERGENCY_CONTACT \u003d \"Emergency Contact\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_MEDICAL_CONDITION \u003d \"Medical Condition\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_ADDRESS \u003d \"Address\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_GOALS \u003d \"My Goal\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String LABEL_OTHER_BIO_INFO \u003d \"Other Bio Info\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/DateOfBirth.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a User\u0027s dateOfBirth number in the user\u0027s biography data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateOfBirth(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DateOfBirth {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \"Date should be in the format DD/MM/YYYY, should only contain numbers. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"Please also check that the number of days in a month (including those for leap years), \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"and the number of months in a year are correct.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|^(3[01]|[12][0-9]|0[1-9])/(1[0-2]|0[1-9])/[0-9]{4}$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String dateOfBirth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code DateOfBirth}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param dateOfBirth A valid dateOfBirth number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidDateOfBirth(dateOfBirth), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns whether a given year is a leap year."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param year Integer year between 0-9999."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A boolean of whether or not the given year is a leap year."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (year % 400 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid dateOfBirth number."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidDateOfBirth(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (test.equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (getDateToken(test) \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a validated three-item array representing the date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param dateString String representation of date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return An integer array with integers representing day, month and year respectively."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static int[] getDateToken(String dateString) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String[] dateTokens \u003d dateString.split(\"/\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (dateTokens.length !\u003d 3) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int day \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int month \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int year \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            day \u003d Integer.parseInt(dateTokens[0]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            month \u003d Integer.parseInt(dateTokens[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            year \u003d Integer.parseInt(dateTokens[2]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (day \u003c 0 || month \u003c 0 || month \u003e 12 || year \u003c 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if ((month \u003c\u003d 7 \u0026\u0026 month % 2 !\u003d 0)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || (month \u003e 7 \u0026\u0026 month % 2 \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (day \u003e 31) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (month \u003d\u003d 2 \u0026\u0026 isLeapYear(year)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    if (day \u003e 29) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } else if (month \u003d\u003d 2 \u0026\u0026 !isLeapYear(year)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    if (day \u003e 28) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    if (day \u003e 30) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new int[]{day, month, year};"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof DateOfBirth // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 dateOfBirth.equals(((DateOfBirth) other).dateOfBirth)); // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return dateOfBirth.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/DisplayPicPath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a Person\u0027s displayPicPath in the displayPicPath book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDisplayPicPath(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DisplayPicPath {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Display picture path can take any values that represents a valid \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"path to an image.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|[^\\\\s].*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String displayPicPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs an {@code DisplayPicPath}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param displayPicPath A valid displayPicPath."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DisplayPicPath(String displayPicPath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(displayPicPath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidDisplayPicPath(displayPicPath), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.displayPicPath \u003d displayPicPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidDisplayPicPath(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return displayPicPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof DisplayPicPath // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 displayPicPath.equals(((DisplayPicPath) other).displayPicPath)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return displayPicPath.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/Gender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a User\u0027s gender in the user\u0027s biography data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \"Gender should only contain alphanumeric characters and spaces.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code Gender}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param gender A valid gender."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid gender."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 gender.equals(((Gender) other).gender)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return gender.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/Goal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a Goal in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidGoal(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Goal implements ListableField {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Goal names can take any values.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|[^\\\\\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String goal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code Goal}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param goal A valid goal."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Goal(String goal) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(goal);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidGoal(goal), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid goal."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidGoal(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof Goal // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 goal.equals(((Goal) other).goal)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return goal.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return goal;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/ListableField.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A field type that contains multiple values which can be represented in the form of a list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * E.g. A diabetic patient can have multiple medical conditions."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public interface ListableField {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/MedicalCondition.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a User\u0027s medical condition in the user\u0027s biography data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMedicalCondition(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class MedicalCondition implements ListableField {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \"Medical conditions can take any values, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\"^$|[^\\\\\\\\s].*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String medicalCondition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code MedicalCondition}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param medicalCondition A valid medicalCondition."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public MedicalCondition(String medicalCondition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(medicalCondition);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidMedicalCondition(medicalCondition), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.medicalCondition \u003d medicalCondition;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid medicalCondition."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidMedicalCondition(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return !test.isEmpty() \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof MedicalCondition // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 medicalCondition.equals(((MedicalCondition) other).medicalCondition)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return medicalCondition.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return medicalCondition;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a User\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \"Name should only contain alphabets and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[A-Za-z\\\\s]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return !test.isEmpty() \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Tests that a {@code User}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cUser\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean test(User user) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(user.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/Nric.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a User\u0027s nric in the user\u0027s biography data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \"NRIC should only contain alphanumeric characters and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String nric;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code Nric}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param nric A valid nric."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Nric(String nric) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid nric."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 nric.equals(((Nric) other).nric)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return nric.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/OtherBioInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a OtherBioInfo in the user\u0027s biography data."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidOtherInfo(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class OtherBioInfo {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \"Other Bio Info can take any values.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|[^\\\\\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String otherInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code OtherBioInfo}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param otherInfo A valid otherInfo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public OtherBioInfo(String otherInfo) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidOtherInfo(otherInfo), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.otherInfo \u003d otherInfo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid otherInfo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidOtherInfo(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        boolean temp \u003d test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof OtherBioInfo // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherInfo.equals(((OtherBioInfo) other).otherInfo)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return otherInfo.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return otherInfo;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a User\u0027s phone number in the user\u0027s biography data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Phone implements ListableField {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \"Phone numbers should only contain numbers, at least 3 digits long, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String phoneNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        phoneNumber \u003d phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return !test.isEmpty() \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 phoneNumber.equals(((Phone) other).phoneNumber)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return phoneNumber.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return phoneNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/ProfileDesc.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a ProfileDesc in the user\u0027s biography data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidProfileDesc(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class ProfileDesc {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \"Profile description can take any values.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public final String profileDesc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code ProfileDesc}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param profileDesc A valid profileDesc."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ProfileDesc(String profileDesc) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(profileDesc);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        checkArgument(isValidProfileDesc(profileDesc), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.profileDesc \u003d profileDesc;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a given string is a valid profileDesc."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isValidProfileDesc(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof ProfileDesc // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 profileDesc.equals(((ProfileDesc) other).profileDesc)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return profileDesc.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return profileDesc;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/UniqueUserList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.exceptions.DuplicateUserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.exceptions.UserNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A list of users that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A user is considered unique by comparing using {@code User#isSameUser(User)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * users uses User#isSameUser(User) for equality so as to ensure that the user being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * unique in terms of identity in the UniqueUserList. However, the removal of a user uses User#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * as to ensure that the user with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * @see User#isSameUser(User)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class UniqueUserList implements Iterable\u003cUser\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final ObservableList\u003cUser\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final ObservableList\u003cUser\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if the list contains an equivalent user as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean contains(User toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns whether or not the user list is empty."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return internalList.isEmpty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Adds a user to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * The user must not already exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void add(User toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new DuplicateUserException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Replaces the user {@code target} in the list with {@code editedUser}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * The user identity of {@code editedUser} must not be the same as another existing user in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setUser(User target, User editedUser) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireAllNonNull(target, editedUser);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new UserNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!target.isSameUser(editedUser) \u0026\u0026 contains(editedUser)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new DuplicateUserException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        internalList.set(index, editedUser);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Removes the equivalent user from the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * The user must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void remove(User toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new UserNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setUsers(UniqueUserList replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Replaces the contents of this list with {@code users}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * {@code users} must not contain duplicate users."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setUsers(List\u003cUser\u003e users) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireAllNonNull(users);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!usersAreUnique(users)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new DuplicateUserException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        internalList.setAll(users);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ObservableList\u003cUser\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Iterator\u003cUser\u003e iterator() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof UniqueUserList // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueUserList) other).internalList));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if {@code users} contains only unique users."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private boolean usersAreUnique(List\u003cUser\u003e users) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 0; i \u003c users.size() - 1; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c users.size(); j++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (users.get(i).isSameUser(users.get(j))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/User.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_CONTACT_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_DP_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_EMERGENCY_CONTACT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_GENDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_GOALS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_MEDICAL_CONDITION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_NRIC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_OTHER_BIO_INFO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.model.bio.BioFieldName.LABEL_PROFILE_DESCRIPTION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents the patient using this program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final DisplayPicPath dpPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final ProfileDesc profileDesc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final OtherBioInfo otherBioInfo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final List\u003cPhone\u003e contactNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final List\u003cPhone\u003e emergencyContacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final List\u003cMedicalCondition\u003e medicalConditions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final List\u003cGoal\u003e goals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // Contains a data structure that maps  bio fields of the User."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private LinkedHashMap\u003cString, String\u003e fieldMap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public User(Name name, DisplayPicPath dpPath, ProfileDesc profileDesc, Nric nric, Gender gender,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                DateOfBirth dateOfBirth, List\u003cPhone\u003e contactNumbers, List\u003cPhone\u003e emergencyContacts,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                List\u003cMedicalCondition\u003e medicalConditions, Address address, List\u003cGoal\u003e goals,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                OtherBioInfo otherBioInfo) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireAllNonNull(name, dpPath, profileDesc, nric, gender, dateOfBirth, contactNumbers, emergencyContacts,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                medicalConditions, goals, otherBioInfo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.dpPath \u003d dpPath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.profileDesc \u003d profileDesc;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.contactNumbers.addAll(contactNumbers);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.emergencyContacts.addAll(emergencyContacts);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.medicalConditions.addAll(medicalConditions);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.goals.addAll(goals);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.otherBioInfo \u003d otherBioInfo;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DisplayPicPath getDpPath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return dpPath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ProfileDesc getProfileDesc() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return profileDesc;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DateOfBirth getDateOfBirth() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns an immutable contact number set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public List\u003cPhone\u003e getContactNumbers() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Collections.unmodifiableList(contactNumbers);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns an immutable emergency contact set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public List\u003cPhone\u003e getEmergencyContacts() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Collections.unmodifiableList(emergencyContacts);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns an immutable medical condition set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public List\u003cMedicalCondition\u003e getMedicalConditions() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Collections.unmodifiableList(medicalConditions);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns an immutable goal set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public List\u003cGoal\u003e getGoals() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Collections.unmodifiableList(goals);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public OtherBioInfo getOtherBioInfo() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return otherBioInfo;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if both users of the same name have the same NRIC."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * This defines a weaker notion of equality between two users."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean isSameUser(User otherUser) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (otherUser \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return otherUser !\u003d null"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getName().equals(getName())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 (otherUser.getNric().equals(getNric()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a {@code LinkedHashMap} containing differences of this user\u0027s biography compared to another."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param other Other user with biography to be compared to this user\u0027s."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A {@code LinkedHashMap} containing differences of this user\u0027s biography compared to another."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public LinkedHashMap\u003cString, List\u003cString\u003e\u003e getDifferencesTo(User other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e thisFieldList \u003d getFieldMap();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        LinkedHashMap\u003cString, String\u003e otherFieldList \u003d other.getFieldMap();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        LinkedHashMap\u003cString, List\u003cString\u003e\u003e differencesMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        thisFieldList.forEach((key, value) -\u003e {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String otherValue \u003d otherFieldList.get(key);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!value.equals(otherValue)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                differencesMap.put(key, new ArrayList\u003c\u003e(List.of(value, otherValue)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return differencesMap;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a {@code HashMap} representing this user\u0027s biography information."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return {@code HashMap} representing this user\u0027s biography information."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public LinkedHashMap\u003cString, String\u003e getFieldMap() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (fieldMap \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_NAME, name.toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_DP_PATH, dpPath.toString());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_PROFILE_DESCRIPTION, profileDesc.toString());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_NRIC, nric.toString());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_GENDER, gender.toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_DATE_OF_BIRTH, dateOfBirth.toString());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_CONTACT_NUMBER, contactNumbers.toString());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_EMERGENCY_CONTACT, emergencyContacts.toString());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_MEDICAL_CONDITION, medicalConditions.toString());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_ADDRESS, address.toString());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_GOALS, goals.toString());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fieldMap.put(LABEL_OTHER_BIO_INFO, otherBioInfo.toString());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return fieldMap;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if both users have the same identity and data fields."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!(other instanceof User)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        User otherUser \u003d (User) other;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return otherUser.getName().equals(getName())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getDpPath().equals(getDpPath())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getProfileDesc().equals(getProfileDesc())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getNric().equals(getNric())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getGender().equals(getGender())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getDateOfBirth().equals(getDateOfBirth())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getContactNumbers().equals(getContactNumbers())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getEmergencyContacts().equals(getEmergencyContacts())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getMedicalConditions().equals(getMedicalConditions())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getGoals().equals(getGoals())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 otherUser.getOtherBioInfo().equals(getOtherBioInfo());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Objects.hash(name, dpPath, profileDesc, nric, gender, dateOfBirth, contactNumbers, emergencyContacts,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                medicalConditions, address, goals, otherBioInfo);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .append(\" DP Path: \")"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .append(getDpPath())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .append(\" Profile Desc: \")"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .append(getProfileDesc())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .append(\" NRIC: \")"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .append(\" Date Of Birth: \")"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .append(getDateOfBirth())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .append(\" Contact Numbers: \");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        getContactNumbers().forEach(contactNumber -\u003e builder.append(contactNumber).append(\"|\"));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        builder.deleteCharAt(builder.length() - 1);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        builder.append(\" Emergency Contacts: \");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        getEmergencyContacts().forEach(emergencyContact -\u003e builder.append(emergencyContact).append(\"|\"));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        builder.deleteCharAt(builder.length() - 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        builder.append(\" Medical Conditions: \");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        getMedicalConditions().forEach(condition -\u003e builder.append(condition).append(\"|\"));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        builder.deleteCharAt(builder.length() - 1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        builder.append(\" Address: \");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        builder.append(\" Goals: \");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        getGoals().forEach(condition -\u003e builder.append(condition).append(\"|\"));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        builder.deleteCharAt(builder.length() - 1);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        builder.append(\" Other Info: \").append(getOtherBioInfo());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 258
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/UserList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Wraps all data at the user-list level"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Duplicates are not allowed (by .isSameUser comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class UserList implements ReadOnlyUserList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final UniqueUserList users;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        users \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public UserList() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an UserList using the Users in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public UserList(ReadOnlyUserList toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns whether or not the user list is empty."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return users.isEmpty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Replaces the contents of the user list with {@code users}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * {@code users} must not contain duplicate users."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setUsers(List\u003cUser\u003e users) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.users.setUsers(users);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Resets the existing data of this {@code UserList} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void resetData(ReadOnlyUserList newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        setUsers(newData.getUserList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //// user-level operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns true if a user with the same identity as {@code user} exists in the user list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean hasUser(User user) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return users.contains(user);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Adds a user to the user list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * The user must not already exist in the user list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void addUser(User p) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        users.add(p);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Replaces the given user {@code target} in the list with {@code editedUser}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * {@code target} must exist in the user list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * The user identity of {@code editedUser} must not be the same as another existing user in the user list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setUser(User target, User editedUser) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(editedUser);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        users.setUser(target, editedUser);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Removes {@code key} from this {@code UserList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * {@code key} must exist in the user list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void removeUser(User key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        users.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return users.asUnmodifiableObservableList().size() + \" users\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ObservableList\u003cUser\u003e getUserList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return users.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                || (other instanceof UserList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \u0026\u0026 users.equals(((UserList) other).users));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return users.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/exceptions/DuplicateUserException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DuplicateUserException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DuplicateUserException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bio/exceptions/UserNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.bio.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that the operation is unable to find the specified user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class UserNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents a Calendar Entry in the calendar."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public abstract class CalendarEntry {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CalendarEntry(Description description, DateTime dateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dateTime.getTime();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dateTime.getDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if both calendar entries are same;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * This defines a weaker notion of equality between two calendar entries;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public abstract boolean isSameCalendarEntry(CalendarEntry calendarEntry);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the day of week of the date in the entry."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the day of week of the date in the entry."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DayOfWeek getDayOfWeek() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dateTime.getDayOfWeek();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a String representation of the day of week of the date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a String representation of the day of week of the date."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getDayOfWeekString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dateTime.getDayOfWeekString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents a Description in the calender entry."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                || (other instanceof Description"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents an Event in the calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Event extends CalendarEntry {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cDateTime\u003e endingDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cReminder\u003e autoReminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Event(Description description, DateTime dateTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        endingDateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        autoReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setEndingDateTime(Optional\u003cDateTime\u003e endingDateTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.endingDateTime \u003d endingDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setEndingDateTime(DateTime endingDateTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.endingDateTime \u003d Optional.ofNullable(endingDateTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setAutoReminder(Optional\u003cReminder\u003e autoReminder) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.autoReminder \u003d autoReminder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setAutoReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.autoReminder \u003d Optional.ofNullable(reminder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Optional\u003cDateTime\u003e getEndingDateTime() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return endingDateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Optional\u003cReminder\u003e getAutoReminder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return autoReminder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if both events have the same description, date and time;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherEvent.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean isSameCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return calendarEntry instanceof Event"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 isSameEvent((Event) calendarEntry);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if both events have the same description, dateTime, endingDateTime and autoReminder."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherEvent.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherEvent.getEndingDateTime().equals(getEndingDateTime())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherEvent.getAutoReminder().equals(getAutoReminder());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        builder.append(\"Event\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(\" From: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(getDateTime())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(getEndingTimeString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String getEndingTimeString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (endingDateTime.isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return \" To: \" + endingDateTime.get();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents a Reminder in the calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Reminder extends CalendarEntry {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Repetition repetition;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Reminder(Description description, DateTime dateTime, Repetition repetition) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.repetition \u003d repetition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Repetition getRepetition() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return repetition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if both reminders have the same description, date and time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * This defines a weaker notion of equality between two reminders."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean isSameReminder(Reminder otherReminder) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (otherReminder \u003d\u003d this) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return otherReminder !\u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherReminder.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherReminder.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if both reminders have the same description, dateTime and repetition."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return otherReminder.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherReminder.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 otherReminder.getRepetition().equals(getRepetition());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return Objects.hash(getDescription(), getDateTime(), getRepetition());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        builder.append(\"Reminder\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (repetition.equals(Repetition.Once)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            builder.append(\" on: \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(getDateTime());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else if (repetition.equals(Repetition.Daily)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            builder.append(\" at: \")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(getTime())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(\" everyday\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(\" from: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(getDate());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else if (repetition.equals(Repetition.Weekly)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            builder.append(\" at: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(getTime())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(\" every \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    .append(getDayOfWeekString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean isSameCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return calendarEntry instanceof Reminder"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 isSameReminder((Reminder) calendarEntry);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Repetition.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents repetition of a reminder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public enum Repetition {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * No repetition."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Once,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Repeats everyday."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Daily,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Repeats everyweek."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Weekly;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Repetition can only take value \u0027once\u0027, \u0027daily\u0027 or \u0027weekly\u0027\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            + \"(case insensitive)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if a given string is a valid repetition."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static boolean isValidRepetition(String repetition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String lowerRepetition \u003d repetition.toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return lowerRepetition.equals(\"once\") || lowerRepetition.equals(\"daily\") || lowerRepetition.equals(\"weekly\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a Repetition corresponding to the given string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static Repetition of(String repetition) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String lowerRepetition \u003d repetition.toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (lowerRepetition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"once\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return Repetition.Once;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"daily\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return Repetition.Daily;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return Repetition.Weekly;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return Repetition.Once;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this.name().toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/UniqueCalendarEntryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.exceptions.CalendarEntryNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.exceptions.DuplicateCalendarEntryException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A list of calendar entries that enforces uniqueness between its elements and does not allow nulls. A calendar entry"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * is considered unique by comparing using {@code CalendarEntry#isCalendarEntry(CalendarEntry)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * updating of calendar entries uses CalendarEntry#isSameCalendar(CalendarEntry) for equality so as to ensure that the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * calendar entries being added or updated is unique in terms of identity in the UniqueCalendarEntryList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * @see CalendarEntry#isSameCalendarEntry(CalendarEntry)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class UniqueCalendarEntryList implements Iterable\u003cCalendarEntry\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final ObservableList\u003cCalendarEntry\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final ObservableList\u003cCalendarEntry\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if the list contains an equivalent calendar entry as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean contains(CalendarEntry toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCalendarEntry);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Adds a calendar entry to the list. The calendar entry must not already exist in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void add(CalendarEntry toAdd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new DuplicateCalendarEntryException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Replaces the calendar entry {@code target} in the list with {@code editedCalendarEntry}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * {@code target} must exist in the list. The calendar entry identity of {@code editedCalendarEntry} must not be"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * the same as another existing calendar entry in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setCalendarEntry(CalendarEntry target, CalendarEntry editedCalendarEntry) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireAllNonNull(target, editedCalendarEntry);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new CalendarEntryNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!target.isSameCalendarEntry(editedCalendarEntry) \u0026\u0026 contains(editedCalendarEntry)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new DuplicateCalendarEntryException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        internalList.set(index, editedCalendarEntry);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Removes the equivalent calendar entry from the list. The calendar entry must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void remove(CalendarEntry toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new CalendarEntryNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setCalendarEntries(UniqueCalendarEntryList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Replaces the contents of this list with {@code calendarEntries}. {@code calendarEntries} must not contain"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * duplicate calendar entries."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setCalendarEntries(List\u003cCalendarEntry\u003e calendarEntries) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireAllNonNull(calendarEntries);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!calendarEntriesAreUnique(calendarEntries)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new DuplicateCalendarEntryException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        internalList.setAll(calendarEntries);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ObservableList\u003cCalendarEntry\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Iterator\u003cCalendarEntry\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                || (other instanceof UniqueCalendarEntryList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCalendarEntryList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if {@code calendarEntries} contains only unique calendar entries."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private boolean calendarEntriesAreUnique(List\u003cCalendarEntry\u003e calendarEntries) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarEntries.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            for (int j \u003d i + 1; j \u003c calendarEntries.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                if (calendarEntries.get(i).isSameCalendarEntry(calendarEntries.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/exceptions/CalendarEntryNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Signals that the operation is unable to find the specified calendar entry."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class CalendarEntryNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/exceptions/DuplicateCalendarEntryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Signals that the operation will result in duplicate CalendarEntries."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DuplicateCalendarEntryException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DuplicateCalendarEntryException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(\"Operation would result in duplicate calendar entries\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Person\u0027s address in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Person\u0027s email in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Person\u0027s name in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Person in the address book. Guarantees: details are present and not null, field values are validated,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if modification is attempted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same. This"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if both persons have the same identity and data fields. This defines a stronger notion of equality"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * between two persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 7,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Person\u0027s phone number in the address book. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls. A person is considered"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of persons uses"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is unique in terms of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so as to ensure that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds a person to the list. The person must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Removes the equivalent person from the list. The person must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the contents of this list with {@code persons}. {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/BloodSugar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a Blood Sugar record in the record book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class BloodSugar extends Record {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"BloodSugar can take any postitive values, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        + \"and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final Concentration concentration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BloodSugar(Concentration concentration, DateTime dateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(concentration);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.concentration \u003d concentration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Concentration getConcentration() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return concentration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        builder.append(\"Blood Sugar Record :\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(\" Concentration: \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(concentration);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return builder.toString() + \" \" + super.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 1,
      "scwaterbear": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/BloodSugarBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * A utility class to help with building BloodSugar objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class BloodSugarBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"2019-01-04 09:09\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String DEFAULT_CONCENTRATION \u003d \"1.23\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Concentration concentration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Initializes the BloodSugarBuilder with the default data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BloodSugarBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.dateTime \u003d new DateTime(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.concentration \u003d new Concentration(DEFAULT_CONCENTRATION);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Initializes the BloodSugarBuilder with the data of {@code bloodSugarToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BloodSugarBuilder(BloodSugar bloodSugarToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.dateTime \u003d bloodSugarToCopy.getDateTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.concentration \u003d bloodSugarToCopy.getConcentration();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Sets the {@code DateTime} of the {@code BloodSugar} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BloodSugarBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.dateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Sets the {@code Concentration} of the {@code BloodSugar} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BloodSugarBuilder withConcentration(String concentration) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.concentration \u003d new Concentration(concentration);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BloodSugar build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new BloodSugar(concentration, dateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 1,
      "scwaterbear": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Bmi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a Bmi record in the record book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class Bmi extends Record {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Bmi can take any positive values,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        + \" and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final Height height;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final Weight weight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Bmi(Height height, Weight weight, DateTime dateTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        super(dateTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Weight getWeight() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        builder.append(\"BMI record :\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(\" Height: \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(height)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(\" Weight: \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(weight);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return builder.toString() + \" \" + super.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 1,
      "scwaterbear": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/BmiBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * A utility class to help with building Bmi objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class BmiBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"2019-01-01 09:09\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String DEFAULT_HEIGHT \u003d \"34.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String DEFAULT_WEIGHT \u003d \"10.0\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Height height;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Weight weight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Initializes the BmiBuilder with the default data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BmiBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.dateTime \u003d new DateTime(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.height \u003d new Height(DEFAULT_HEIGHT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.weight \u003d new Weight(DEFAULT_WEIGHT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Initializes the BmiBuilder with the data of {@code bmiToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BmiBuilder(Bmi bmiToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.dateTime \u003d bmiToCopy.getDateTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.height \u003d bmiToCopy.getHeight();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.weight \u003d bmiToCopy.getWeight();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Bmi} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BmiBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.dateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Sets the {@code Height} of the {@code Bmi} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BmiBuilder withHeight(String height) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.height \u003d new Height(height);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Sets the {@code Weight} of the {@code Bmi} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BmiBuilder withWeight(String weight) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.weight \u003d new Weight(weight);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Bmi build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new Bmi(height, weight, dateTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 1,
      "scwaterbear": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Concentration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a Blood Sugar Record\u0027s sugar concentration in the record book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidConcentration(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class Concentration {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \"Concentration should only contain a positive real number\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^+?\\\\d*\\\\.{0,1}\\\\d+$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final double concentration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Concentration(String concentration) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(concentration);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        checkArgument(isValidConcentration(concentration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.concentration \u003d Double.parseDouble(concentration);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public double getConcentration() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return concentration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static boolean isValidConcentration(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            || (other instanceof Concentration // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 concentration \u003d\u003d ((Concentration) other).concentration); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return ((Double) concentration).hashCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return Double.toString(concentration);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 43,
      "chen-xi-cx": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Height.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a Bmi Record\u0027s height in the record book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \"Height should only contain positive real number\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^+?\\\\d*\\\\.{0,1}\\\\d+$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final double height;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Height(String height) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        checkArgument(isValidHeight(height), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.height \u003d Double.parseDouble(height);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 height \u003d\u003d ((Height) other).height); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return ((Double) height).hashCode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return Double.toString(height);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Record.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a record in the record book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public abstract class Record {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Record(DateTime dateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns true if both records have the same identity."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean isSameRecord(Record otherRecord) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (otherRecord \u003d\u003d this) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return otherRecord !\u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 otherRecord.dateTime.equals(dateTime)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 otherRecord.getClass().equals(this.getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!(other instanceof Record)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Record otherRecord \u003d (Record) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return otherRecord.dateTime.equals(dateTime)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 otherRecord.getClass().equals(this.getClass());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return Objects.hash(dateTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        builder.append(\"at DateTime: \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .append(dateTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 1,
      "scwaterbear": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/RecordType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents different possible types of records."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public enum RecordType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    BLOODSUGAR, BMI, DIET, EXERCISE, HEIGHTANDWEIGHT, MEDICALEXPENSES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \"Record type not recognized\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/UniqueRecordList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * A list of records that enforces uniqueness between its elements and does not allow nulls. A record is considered"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * unique by comparing using {@code Record#isSameRecord(Record)}. As such, adding and updating of records uses"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Record#isSameRecord(Record) for equality so as to ensure that the record being added or updated is unique in terms of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * identity in the UniqueRecordList. However, the removal of a record uses Record#equals(Object) so as to ensure that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * the record with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * @see Record#isSameRecord(Record)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class UniqueRecordList implements Iterable\u003cRecord\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns true if the list contains an equivalent record as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean contains(Record toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecord);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Adds a record to the list. The record must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void add(Record toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Replaces the record {@code target} in the list with {@code editedRecord}. {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as another existing record in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!target.isSameRecord(editedRecord) \u0026\u0026 contains(editedRecord)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        internalList.set(index, editedRecord);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Removes the equivalent record from the list. The record must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void remove(Record toRemove) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void setRecords(UniqueRecordList replacement) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Replaces the contents of this list with {@code records}. {@code records} must not contain duplicate records."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireAllNonNull(records);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!recordsAreUnique(records)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        internalList.setAll(records);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public ObservableList\u003cRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Iterator\u003cRecord\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            || (other instanceof UniqueRecordList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueRecordList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Returns true if {@code records} contains only unique records."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private boolean recordsAreUnique(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        for (int i \u003d 0; i \u003c records.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            for (int j \u003d i + 1; j \u003c records.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                if (records.get(i).isSameRecord(records.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Weight.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents a Bmi Record\u0027s weight in the record book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \"Weight should only contain a positive real number\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^+?\\\\d*\\\\.{0,1}\\\\d+$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final double weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Weight(String weight) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        checkArgument(isValidWeight(weight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.weight \u003d Double.parseDouble(weight);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            || (other instanceof Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 weight \u003d\u003d ((Weight) other).weight); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return ((Double) weight).hashCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return Double.toString(weight);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 43,
      "chen-xi-cx": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/exceptions/DuplicateRecordException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class DuplicateRecordException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public DuplicateRecordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        super(\"Operation would result in duplicate records\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/exceptions/RecordNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class RecordNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/AverageMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.temporal.TemporalAdjuster;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.Bmi;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * A map of average values with key as {@code LocalDate} and value as {@code Double}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Keys represent the time period of the average values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Values represent the average from values within time period of keys."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class AverageMap {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private static final Map\u003cAverageType, TemporalAdjuster\u003e TIMEADJUSTERS \u003d Map.of("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            AverageType.DAILY, TemporalAdjusters.ofDateAdjuster(date -\u003e date),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            AverageType.WEEKLY, TemporalAdjusters.previousOrSame(DayOfWeek.of(1)),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            AverageType.MONTHLY, TemporalAdjusters.firstDayOfMonth()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private final ObservableMap\u003cLocalDate, Double\u003e internalMap \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private final ObservableMap\u003cLocalDate, Double\u003e internalUnmodifiableMap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            FXCollections.unmodifiableObservableMap(internalMap);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Calculates average values of a given record type based on the average type given."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param recordList list of records."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param averageType the average type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param recordType the record type."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param count"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void calculateAverage(ObservableList\u003cRecord\u003e recordList,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                                 AverageType averageType, RecordType recordType, int count) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // Remove irrelevant record types"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        ObservableList\u003cRecord\u003e filteredRecords \u003d filterRecord(recordList, recordType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // Group records according to average type"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Map\u003cLocalDate, List\u003cRecord\u003e\u003e groupByTimeRecords \u003d groupByAverageType(averageType, filteredRecords);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // Calculate averages for each grouping in groupByTimeRecords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Map\u003cLocalDate, Double\u003e averages \u003d getAverage(recordType, groupByTimeRecords);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // Sort by descending date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Map\u003cLocalDate, Double\u003e averageMap \u003d new TreeMap\u003c\u003e(Collections.reverseOrder());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        averageMap.putAll(averages);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // get latest \"count\" records"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Map\u003cLocalDate, Double\u003e countAverageMap \u003d averageMap.entrySet().stream().limit(count)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .collect(TreeMap::new, (m, e) -\u003e m.put(e.getKey(), e.getValue()), Map::putAll);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        internalMap.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        internalMap.putAll(countAverageMap);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    //TODO: abstract this by using ModelManager#updateFilteredRecordList."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Filters list of records by the given record type."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param recordList list of records."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param recordType record type to be kept."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return returns a list containing only records of specified record type."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private ObservableList\u003cRecord\u003e filterRecord(ObservableList\u003cRecord\u003e recordList, RecordType recordType) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        FilteredList\u003cRecord\u003e filteredRecords \u003d new FilteredList\u003c\u003e(recordList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        Predicate\u003cRecord\u003e containsRecordType;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (recordType) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case BLOODSUGAR:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            containsRecordType \u003d ele -\u003e ele instanceof BloodSugar;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case BMI:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            containsRecordType \u003d ele -\u003e ele instanceof Bmi;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            // will not happen"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            containsRecordType \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        filteredRecords.setPredicate(containsRecordType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return filteredRecords;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Groups records by average type."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * For example, if average type is weekly, records from the same week are grouped together."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param averageType the average type."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param recordList list of records."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return returns a {@code Map} object that maps a time period to the respective"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * records found in that time period."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Map\u003cLocalDate, List\u003cRecord\u003e\u003e groupByAverageType(AverageType averageType,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                                                            ObservableList\u003cRecord\u003e recordList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return recordList.stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                .collect(Collectors.groupingBy(record -\u003e record.getDateTime()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                        .getDate().with(TIMEADJUSTERS.get(averageType))));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Calculates average for each group of records."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param recordType the record type."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @param recordMap a {@code Map} object that maps a time period to the respective"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * records found in that time period."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return returns a {@code Map} object that maps a time period to the respective"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * average values of records found in that time period."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private Map\u003cLocalDate, Double\u003e getAverage(RecordType recordType, Map\u003cLocalDate, List\u003cRecord\u003e\u003e recordMap) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (recordType) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case BLOODSUGAR:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return recordMap.entrySet().stream()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    .collect(Collectors.toMap(Map.Entry::getKey, ele -\u003e ele.getValue()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    .stream().map(record -\u003e (BloodSugar) record)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    .map(record -\u003e record.getConcentration().getConcentration())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    .mapToDouble(Double::doubleValue).average().getAsDouble()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case BMI:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return recordMap.entrySet().stream()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    .collect(Collectors.toMap(Map.Entry::getKey, ele -\u003e ele.getValue()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    .stream().map(record -\u003e (Bmi) record)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    .map(record -\u003e record.getWeight().getWeight())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                    .mapToDouble(Double::doubleValue).average().getAsDouble()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            // will not happen"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * Returns the backing map as an unmodifiable {@code ObservableMap}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public ObservableMap\u003cLocalDate, Double\u003e asUnmodifiableObservableMap() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        return internalUnmodifiableMap;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/AverageType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Type of average that can be computed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public enum AverageType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    DAILY, WEEKLY, MONTHLY"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Tag in the address book. Guarantees: immutable; name is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugarBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BmiBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static Food[] getSampleFoods() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Food[]{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().build(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potatodfafadfafadf\").withFoodType(\"sv\").build(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Banana\").withFoodType(\"f\").build(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken\").withFoodType(\"p\").build(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potato chips\").withFoodType(\"s\").build(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken Rice\").withFoodType(\"m\").build(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Broccoli2\").build(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potato2\").withFoodType(\"sv\").build(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Banana2\").withFoodType(\"f\").build(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken2\").withFoodType(\"p\").build(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potato chips2\").withFoodType(\"s\").build(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken Rice2\").withFoodType(\"m\").build(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Broccoli3\").build(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potato3\").withFoodType(\"sv\").build(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Banana3\").withFoodType(\"f\").build(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken3\").withFoodType(\"p\").build(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Potato chips3\").withFoodType(\"s\").build(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        new FoodBuilder().withFoodName(\"Chicken Rice3\").withFoodType(\"m\").build()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static Record[] getSampleRecords() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return new Record[]{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            new BmiBuilder().build(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            new BmiBuilder().withDateTime(\"2019-01-02 09:09\").withHeight(\"1.1\").withWeight(\"45.6\").build(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            new BloodSugarBuilder().build(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-01-03 09:09\").withConcentration(\"8.6\").build(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-01-03 09:10\").withConcentration(\"8.7\").build(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-01-04 09:11\").withConcentration(\"7.4\").build(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-01-05 09:12\").withConcentration(\"4.9\").build(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-01-06 09:13\").withConcentration(\"7.4\").build(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-01-07 09:14\").withConcentration(\"7.0\").build(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-01-08 09:15\").withConcentration(\"5.0\").build(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-01-09 09:16\").withConcentration(\"4.2\").build(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-01-10 09:17\").withConcentration(\"4.5\").build(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-02-03 09:18\").withConcentration(\"7.0\").build(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-02-04 09:19\").withConcentration(\"6.2\").build(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-03-03 09:20\").withConcentration(\"8.9\").build(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-03-04 09:21\").withConcentration(\"6.8\").build(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-04-03 09:22\").withConcentration(\"6.9\").build(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            new BloodSugarBuilder().withDateTime(\"2019-04-04 09:23\").withConcentration(\"4.0\").build()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        };"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static CalendarEntry[] getSampleCalendarEntry() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event appointmentEvent \u003d new Event(new Description(\"Appointment\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                new DateTime(LocalDateTime.of(2019, 11, 30, 14, 0)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        appointmentEvent.setEndingDateTime(new DateTime(LocalDateTime.of(2019, 11, 30, 15, 40)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event dinnerEvent \u003d new Event(new Description(\"Dinner\"), new DateTime(LocalDateTime.of(2020, 1, 1, 18, 0)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CalendarEntry[]{"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new Reminder(new Description(\"Insulin injection\"), new DateTime(LocalDateTime.of(2020, 2, 1, 11, 30)),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Repetition.Daily),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new Reminder(new Description(\"Medicine\"), new DateTime(LocalDateTime.of(2020, 1, 2, 19, 10)),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Repetition.Daily),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new Reminder(new Description(\"Buy medicine\"), new DateTime(LocalDateTime.of(2019, 12, 2, 15, 0)),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Repetition.Once),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            appointmentEvent,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            dinnerEvent"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        };"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static UniqueFoodList getSampleFoodList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        UniqueFoodList sampleFl \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (Food sampleFood : getSampleFoods()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            sampleFl.add(sampleFood);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return sampleFl;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static UniqueRecordList getSampleRecordList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        UniqueRecordList sampleRl \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        for (Record sampleRecord : getSampleRecords()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            sampleRl.add(sampleRecord);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return sampleRl;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static Calendar getSampleCalendar() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Calendar sampleCalendar \u003d new Calendar();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (CalendarEntry calendarEntry: getSampleCalendarEntry()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            sampleCalendar.addCalendarEntry(calendarEntry);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return sampleCalendar;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 36,
      "jyx11011": 33,
      "-": 60,
      "scwaterbear": 20,
      "chen-xi-cx": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleUserDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.DateOfBirth;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.DisplayPicPath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Gender;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Goal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.MedicalCondition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.OtherBioInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.ProfileDesc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains utility methods for populating {@code UserList} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class SampleUserDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static User[] getSampleUsers() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new User[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            new User(new Name(\"Alex Yeoh\"), new DisplayPicPath(\"\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    new ProfileDesc(\"Sometimes I pretend I\u0027m a carrot.\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    new Nric(\"S1234567A\"), new Gender(\"Male\"), new DateOfBirth(\"21/12/1900\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    getContactNumberList(\"91234567\"), getEmergencyContactList(\"81234567\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    getMedicalConditionList(\"Type II Diabetes\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    new Address(\"Blk 123 #01-123 Example Road S(123456)\"), getGoalList(\"test\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    new OtherBioInfo(\"dislikes potatoes\"))};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static ReadOnlyUserList getSampleUserList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        UserList sampleUserList \u003d new UserList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (User sampleUser : getSampleUsers()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            sampleUserList.addUser(sampleUser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return sampleUserList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a phone number set containing the list of user\u0027s contact numbers given."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static List\u003cPhone\u003e getContactNumberList(String... strings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .map(Phone::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a phone number set containing the list of user\u0027s emergency contacts given."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static List\u003cPhone\u003e getEmergencyContactList(String... strings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .map(Phone::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a medical condition set containing the list of user\u0027s medical condition given."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static List\u003cMedicalCondition\u003e getMedicalConditionList(String... strings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .map(MedicalCondition::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a goal set containing the list of user\u0027s goals given."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static List\u003cGoal\u003e getGoalList(String... strings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .map(Goal::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}. Returns {@code Optional.empty()} if storage file is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 4,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CalendarStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Calendar}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public interface CalendarStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns Calendar data as a {@link seedu.address.model.ReadOnlyCalendar}. Returns {@code Optional.empty()}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * if storage file is not found."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Optional\u003cReadOnlyCalendar\u003e readCalendar(Path eventFilePath, Path reminderFilePath)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Saves the given {@link ReadOnlyCalendar} to the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param calendar cannot be null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void saveCalendar(ReadOnlyCalendar calendar) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @see #saveCalendar(ReadOnlyCalendar)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void saveCalendar(ReadOnlyCalendar calendar, Path eventFilePath, Path reminderFilePath) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/GeneralStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Encapsulates the main storage functions for the main data holders and its corresponding"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * {@code JsonSerializableContent}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * {@code T} is the data holder type while {@code U} is the specific JsonSerializableContent type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * For example, if T is {@code UniqueFoodList}, then U is {@code JsonSerializableFoodList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public interface GeneralStorage\u003cT, U extends JsonSerializableContent\u003cT\u003e\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    Path getFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns stored data as a {@link T}. Returns {@code Optional.empty()} if storage file is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    Optional\u003cT\u003e read() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @see #read()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    Optional\u003cT\u003e read(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Saves the given {@link T} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param content cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void save(T content) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @see #save(T)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    void save(T content, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCalendarEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Jackson-friendly version of {@link CalendarEntry}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public abstract class JsonAdaptedCalendarEntry {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    protected final String dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructs a {@code JsonAdaptedCalendarEntry} with the given calendar entry details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public JsonAdaptedCalendarEntry(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                                    @JsonProperty(\"dateTime\") String dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Converts a given {@code CalendarEntry} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public JsonAdaptedCalendarEntry(CalendarEntry source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.dateTime \u003d source.getDateTime().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Converts this Jackson-friendly adapted calendar entry object into the model\u0027s {@code CalendarEntry} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the calendar entry."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public abstract CalendarEntry toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class JsonAdaptedEvent extends JsonAdaptedCalendarEntry {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final Optional\u003cString\u003e endingDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final Optional\u003cJsonAdaptedReminder\u003e autoReminder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                            @JsonProperty(\"dateTime\") String dateTime,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                            @JsonProperty(\"endingDateTime\") Optional\u003cString\u003e endingDateTime,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                            @JsonProperty(\"autoReminder\") Optional\u003cJsonAdaptedReminder\u003e autoReminder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.endingDateTime \u003d endingDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.autoReminder \u003d autoReminder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (source.getEndingDateTime().isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            this.endingDateTime \u003d Optional.of(source.getEndingDateTime().get().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            this.endingDateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (source.getAutoReminder().isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            this.autoReminder \u003d Optional.of(new JsonAdaptedReminder(source.getAutoReminder().get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            this.autoReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CalendarEntry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final DateTime modelDateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event modelEvent \u003d new Event(modelDescription, modelDateTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (endingDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final DateTime modelEndingDateTime;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (endingDateTime.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (!DateTime.isValidDateTime(endingDateTime.get())) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            modelEvent.setEndingDateTime(new DateTime(endingDateTime.get()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (autoReminder.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Reminder modelReminder \u003d (Reminder) autoReminder.get().toModelType();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            modelEvent.setAutoReminder(modelReminder);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return modelEvent;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFood.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Calorie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Fat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Gi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Sugar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String foodName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String foodType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String calorie;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String gi;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String sugar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final String fat;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"foodName\") String foodName, @JsonProperty(\"foodType\") String foodType,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                           @JsonProperty(\"calorie\") String calorie, @JsonProperty(\"gi\") String gi,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                           @JsonProperty(\"sugar\") String sugar, @JsonProperty(\"fat\") String fat) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodType \u003d foodType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d gi;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d sugar;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodName \u003d source.getFoodName().foodName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodType \u003d source.getFoodType().getShortHand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        calorie \u003d source.getCalorie().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        gi \u003d source.getGi().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        sugar \u003d source.getSugar().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        fat \u003d source.getFat().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code food} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (foodName \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                FoodName.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!FoodName.isValidName(foodName)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(FoodName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final FoodName modelFoodName \u003d new FoodName(foodName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (foodType \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                FoodType.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final FoodType modelFoodType;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            modelFoodType \u003d FoodType.getFrom(foodType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(FoodType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (calorie \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Calorie.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!Calorie.isValidValue(calorie)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(Calorie.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final Calorie modelCalorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (gi \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gi.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!Gi.isValidValue(gi)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(Gi.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final Gi modelGi \u003d new Gi(gi);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (sugar \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Sugar.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!Sugar.isValidValue(sugar)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(Sugar.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final Sugar modelSugar \u003d new Sugar(sugar);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (fat \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Fat.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!Fat.isValidValue(fat)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new IllegalValueException(Fat.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final Fat modelFat \u003d new Fat(fat);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Food(modelFoodName, modelCalorie, modelGi, modelSugar, modelFat, modelFoodType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Bmi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Concentration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Height;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Weight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents Jackson-friendly version of {@link Record}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "class JsonAdaptedRecord {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private String recordType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private String concentration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private String height;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private String weight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public JsonAdaptedRecord(@JsonProperty(\"recordType\") String recordType,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @JsonProperty(\"dateTime\") String dateTime, @JsonProperty(\"concentration\") String concentration,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @JsonProperty(\"height\") String height, @JsonProperty(\"weight\") String weight) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.recordType \u003d recordType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.concentration \u003d concentration;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public JsonAdaptedRecord(Record source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (source.getClass() \u003d\u003d BloodSugar.class) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            recordType \u003d \"BloodSugar\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            dateTime \u003d source.getDateTime().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            concentration \u003d ((BloodSugar) source).getConcentration().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        } else if (source.getClass() \u003d\u003d Bmi.class) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            recordType \u003d \"Bmi\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            dateTime \u003d source.getDateTime().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            height \u003d ((Bmi) source).getHeight().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            weight \u003d ((Bmi) source).getWeight().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code food} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Record toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        final DateTime modelDateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (recordType \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                RecordType.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (recordType.equals(\"BloodSugar\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            if (concentration \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                    Concentration.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            if (!Concentration.isValidConcentration(concentration)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                throw new IllegalValueException(Concentration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            final Concentration modelConcentration \u003d new Concentration(concentration);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return new BloodSugar(modelConcentration, modelDateTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        } else if (recordType.equals(\"Bmi\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            if (height \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                    Height.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            if (!Height.isValidHeight(height)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                throw new IllegalValueException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            final Height modelHeight \u003d new Height(height);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            if (weight \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                    Weight.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            if (!Weight.isValidWeight(weight)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                throw new IllegalValueException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            final Weight modelWeight \u003d new Weight(weight);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return new Bmi(modelHeight, modelWeight, modelDateTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new IllegalValueException(RecordType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 1,
      "scwaterbear": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Jackson-friendly version of {@link Reminder}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class JsonAdaptedReminder extends JsonAdaptedCalendarEntry {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Reminder\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final String repetition;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructs a {@code JsonAdaptedReminder} with the given reminder details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public JsonAdaptedReminder(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                                    @JsonProperty(\"dateTime\") String dateTime,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                                    @JsonProperty(\"repetition\") String repetition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.repetition \u003d repetition;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Converts a given {@code Reminder} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public JsonAdaptedReminder(Reminder source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(source);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.repetition \u003d source.getRepetition().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Reminder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final DateTime modelDateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (repetition \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Repetition.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (!Repetition.isValidRepetition(repetition)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final Repetition modelRepetition \u003d Repetition.of(repetition);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new Reminder(modelDescription, modelDateTime, modelRepetition);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCalendarStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class to access Calendar data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class JsonCalendarStorage implements CalendarStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCalendarStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Path eventFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Path reminderFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public JsonCalendarStorage(Path eventFilePath, Path reminderFilePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.eventFilePath \u003d eventFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.reminderFilePath \u003d reminderFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Path getEventFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return eventFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Path getReminderFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return reminderFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return readCalendar(eventFilePath, reminderFilePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar(Path eventFilePath, Path reminderFilePath)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireAllNonNull(eventFilePath, reminderFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Optional\u003cJsonSerializableEventList\u003e jsonEventList \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                JsonUtil.readJsonFile(eventFilePath, JsonSerializableEventList.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Optional\u003cJsonSerializableReminderList\u003e jsonReminderList \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                JsonUtil.readJsonFile(reminderFilePath, JsonSerializableReminderList.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (jsonEventList.isEmpty() \u0026\u0026 jsonReminderList.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Calendar calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (jsonEventList.isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                ReadOnlyCalendar events \u003d jsonEventList.get().toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                for (CalendarEntry calendarEntry: events.getCalendarEntryList()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    calendar.addCalendarEntry(calendarEntry);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                logger.info(\"Illegal values found in \" + eventFilePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                throw new DataConversionException(e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (jsonReminderList.isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                ReadOnlyCalendar reminders \u003d jsonReminderList.get().toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                for (CalendarEntry calendarEntry: reminders.getCalendarEntryList()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    calendar.addCalendarEntry(calendarEntry);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                logger.info(\"Illegal values found in \" + reminderFilePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                throw new DataConversionException(e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return Optional.of(calendar);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        saveCalendar(calendar, eventFilePath, reminderFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar, Path eventFilePath, Path reminderFilePath) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        requireAllNonNull(calendar, eventFilePath, reminderFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        FileUtil.createIfMissing(eventFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        FileUtil.createIfMissing(reminderFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Calendar events \u003d new Calendar();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Calendar reminders \u003d new Calendar();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (CalendarEntry calendarEntry: calendar.getCalendarEntryList()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (calendarEntry instanceof Event) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                events.addCalendarEntry(calendarEntry);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                reminders.addCalendarEntry(calendarEntry);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEventList(events), eventFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableReminderList(reminders), reminderFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonFoodListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents the specific version {@code JsonGeneralStorage} about food list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class JsonFoodListStorage extends JsonGeneralStorage\u003cUniqueFoodList, JsonSerializableFoodList\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonFoodListStorage(Path filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(filePath, UniqueFoodList.class, JsonSerializableFoodList.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonGeneralStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a class to access data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class JsonGeneralStorage\u003cT, U extends JsonSerializableContent\u003cT\u003e\u003e implements GeneralStorage\u003cT, U\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonGeneralStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Class\u003cT\u003e itemClassType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Class\u003cU\u003e jsonClassType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    //Due the type erasure of generics, we have to pass the specific class type, such as UniqueFoodList.class"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonGeneralStorage(Path filePath, Class\u003cT\u003e itemClassType, Class\u003cU\u003e jsonClassType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.itemClassType \u003d itemClassType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.jsonClassType \u003d jsonClassType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Path getFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cT\u003e read() throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return read(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Similar to {@link #read()}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cT\u003e read(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Optional\u003cU\u003e jsonContent \u003d JsonUtil.readJsonFile(filePath, jsonClassType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (jsonContent.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return Optional.of(jsonContent.get().toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void save(T content) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        save(content, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Similar to {@link #save(T)}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void save(T content, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            JsonUtil.saveJsonFile(jsonClassType.getConstructor(itemClassType).newInstance(content), filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            | InstantiationException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"Incorrect implement of JsonSerializableItem class\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRecordListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents the specific version {@code JsonGeneralStorage} about record list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class JsonRecordListStorage extends JsonGeneralStorage\u003cUniqueRecordList, JsonSerializableRecordList\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public JsonRecordListStorage(Path filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        super(filePath, UniqueRecordList.class, JsonSerializableRecordList.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonReminderStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents a storage for {@link seedu.address.model.calendar.Reminder}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public interface JsonReminderStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Path getReminderFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns Reminder data as a ArrayList. Returns an empty list if storage file is not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    ArrayList\u003cReminder\u003e readReminder() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @see #getReminderFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    ArrayList readReminder(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Saves the given list of reminder to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param reminders cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void saveReminder(ArrayList\u003cReminder\u003e reminders) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @see #saveReminder(ArrayList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void saveReminder(ArrayList\u003cReminder\u003e reminders, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableContent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents one type of Immutable content that is serializable to JSON format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public interface JsonSerializableContent\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Converts the content into the model\u0027s corresponding object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public T toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableEventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A list of reminders that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@JsonRootName(value \u003d \"eventlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class JsonSerializableEventList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructs a {@code JsonSerializableEventList} with the given events."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public JsonSerializableEventList(@JsonProperty(\"eventList\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.eventList.addAll(events);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Converts a given list of events into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param source future changes to this will not affect the created list of events."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public JsonSerializableEventList(ReadOnlyCalendar source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.eventList.addAll(source.getCalendarEntryList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .map(calendarEntry -\u003e (Event) calendarEntry)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Converts this list of reminders into the model\u0027s {@code Reminder} objects."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReadOnlyCalendar toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Calendar events \u003d new Calendar();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent: eventList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Event event \u003d (Event) jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (events.hasCalendarEntry(event)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            events.addCalendarEntry(event);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableFoodList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents an Immutable FoodList that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "@JsonRootName(value \u003d \"foodlist\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class JsonSerializableFoodList implements JsonSerializableContent\u003cUniqueFoodList\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"Food list contains duplicate food(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given foods."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonSerializableFoodList(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Converts a given {@code UniqueFoodList} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFoodList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public JsonSerializableFoodList(UniqueFoodList source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foods.addAll(source.asUnmodifiableObservableList().stream().map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Converts this food list into the model\u0027s {@code UniqueFoodList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public UniqueFoodList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        UniqueFoodList foodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : foods) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            if (foodList.contains(food)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            foodList.add(food);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRecordList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Represents an Immutable RecordList that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "@JsonRootName(value \u003d \"recordlist\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class JsonSerializableRecordList implements JsonSerializableContent\u003cUniqueRecordList\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"Record list contains duplicate record(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final List\u003cJsonAdaptedRecord\u003e records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Constructs a {@code JsonSerializableRecordList} with the given records."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public JsonSerializableRecordList(@JsonProperty(\"records\") List\u003cJsonAdaptedRecord\u003e records) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.records.addAll(records);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Converts a given {@code UniqueRecordList} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRecordList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public JsonSerializableRecordList(UniqueRecordList source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        records.addAll(source.asUnmodifiableObservableList().stream().map(JsonAdaptedRecord::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Converts this record list into the model\u0027s {@code UniqueRecordList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public UniqueRecordList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        UniqueRecordList recordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        for (JsonAdaptedRecord jsonAdaptedRecord : records) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            Record record \u003d jsonAdaptedRecord.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            if (recordList.contains(record)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            recordList.add(record);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return recordList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableReminderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A list of reminders that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@JsonRootName(value \u003d \"reminderlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class JsonSerializableReminderList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String LIST_CONTAINS_DUPLICATE_REMINDER \u003d \"Reminders list contains duplicate reminder(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private final List\u003cJsonAdaptedReminder\u003e reminderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructs a {@code JsonSerializableReminderList} with the given reminders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public JsonSerializableReminderList(@JsonProperty(\"reminderList\") List\u003cJsonAdaptedReminder\u003e reminders) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.reminderList.addAll(reminders);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Converts a given list of reminders into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param source future changes to this will not affect the created list of reminders."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public JsonSerializableReminderList(ReadOnlyCalendar source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.reminderList.addAll(source.getCalendarEntryList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .map(calendarEntry -\u003e (Reminder) calendarEntry)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .map(JsonAdaptedReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Converts this list of reminders into the model\u0027s {@code Reminder} objects."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReadOnlyCalendar toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Calendar reminders \u003d new Calendar();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (JsonAdaptedReminder jsonAdaptedReminder: reminderList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Reminder reminder \u003d jsonAdaptedReminder.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (reminders.hasCalendarEntry(reminder)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                throw new IllegalValueException(LIST_CONTAINS_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            reminders.addCalendarEntry(reminder);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return reminders;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public interface Storage extends AddressBookStorage, UserListStorage, UserPrefsStorage, CalendarStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Path getFoodListFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cUniqueFoodList\u003e readFoodList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cUniqueFoodList\u003e readFoodList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void saveFoodList(UniqueFoodList foodList) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void saveFoodList(UniqueFoodList foodList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Path getRecordListFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Optional\u003cUniqueRecordList\u003e readRecordList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Optional\u003cUniqueRecordList\u003e readRecordList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void saveRecordList(UniqueRecordList recordList) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void saveRecordList(UniqueRecordList recordList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Path getEventFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Path getReminderFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void saveCalendar(ReadOnlyCalendar calendar) throws IOException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    Path getUserListFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    Optional\u003cReadOnlyUserList\u003e readUserList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    void saveUserList(ReadOnlyUserList userList) throws IOException;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 11,
      "jyx11011": 9,
      "-": 31,
      "whneo97": 12,
      "scwaterbear": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private UserListStorage userListStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private JsonFoodListStorage jsonFoodListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private JsonRecordListStorage jsonRecordListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private JsonCalendarStorage calendarStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                          UserListStorage userListStorage, JsonFoodListStorage jsonFoodListStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                          JsonRecordListStorage jsonRecordListStorage, JsonCalendarStorage calendarStorage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.userListStorage \u003d userListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.jsonFoodListStorage \u003d jsonFoodListStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.jsonRecordListStorage \u003d jsonRecordListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.calendarStorage \u003d calendarStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Path getFoodListFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return jsonFoodListStorage.getFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cUniqueFoodList\u003e readFoodList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return readFoodList(jsonFoodListStorage.getFilePath());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Optional\u003cUniqueFoodList\u003e readFoodList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return jsonFoodListStorage.read(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void saveFoodList(UniqueFoodList foodList) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        saveFoodList(foodList, jsonFoodListStorage.getFilePath());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void saveFoodList(UniqueFoodList foodList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        jsonFoodListStorage.save(foodList, filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecordList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Path getRecordListFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return jsonRecordListStorage.getFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Optional\u003cUniqueRecordList\u003e readRecordList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return readRecordList(jsonRecordListStorage.getFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public Optional\u003cUniqueRecordList\u003e readRecordList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return jsonRecordListStorage.read(filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void saveRecordList(UniqueRecordList recordList) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        saveRecordList(recordList, jsonRecordListStorage.getFilePath());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void saveRecordList(UniqueRecordList recordList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        jsonRecordListStorage.save(recordList, filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Path getUserListFilePath() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return userListStorage.getUserListFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Optional\u003cReadOnlyUserList\u003e readUserList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return readUserList(userListStorage.getUserListFilePath());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Optional\u003cReadOnlyUserList\u003e readUserList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return userListStorage.readUserList(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void saveUserList(ReadOnlyUserList userList) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        saveUserList(userList, userListStorage.getUserListFilePath());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void saveUserList(ReadOnlyUserList userList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        userListStorage.saveUserList(userList, filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Path getEventFilePath() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return calendarStorage.getEventFilePath();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Path getReminderFilePath() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return calendarStorage.getReminderFilePath();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return readCalendar(calendarStorage.getEventFilePath(), calendarStorage.getReminderFilePath());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Optional\u003cReadOnlyCalendar\u003e readCalendar(Path eventFilePath, Path reminderFilePath)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + eventFilePath + \" and \" + reminderFilePath);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return calendarStorage.readCalendar(eventFilePath, reminderFilePath);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar) throws IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        saveCalendar(calendar, calendarStorage.getEventFilePath(), calendarStorage.getReminderFilePath());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void saveCalendar(ReadOnlyCalendar calendar, Path eventFilePath, Path reminderFilePath) throws IOException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + eventFilePath + \" and \" + reminderFilePath);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        calendarStorage.saveCalendar(calendar, eventFilePath, reminderFilePath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 31,
      "jyx11011": 38,
      "-": 76,
      "whneo97": 32,
      "scwaterbear": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public interface UserListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    Path getUserListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns UserList data as a {@link ReadOnlyUserList}. Returns {@code Optional.empty()} if storage file is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    Optional\u003cReadOnlyUserList\u003e readUserList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @see #getUserListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    Optional\u003cReadOnlyUserList\u003e readUserList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Saves the given {@link ReadOnlyUserList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param userList cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    void saveUserList(ReadOnlyUserList userList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @see #saveUserList(ReadOnlyUserList)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    void saveUserList(ReadOnlyUserList userList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns UserPrefs data from storage. Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/bio/JsonAdaptedContactNumbers.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.storage.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Jackson-friendly version of {@link Phone}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "class JsonAdaptedContactNumbers {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String contactNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code JsonAdaptedPhone} with the given {@code contactNumber}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonAdaptedContactNumbers(String contactNumber) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts a given {@code Phone} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonAdaptedContactNumbers(Phone source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        contactNumber \u003d source.phoneNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getContactNumbers() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return contactNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts this Jackson-friendly adapted contact number object into the model\u0027s {@code Phone} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted contact number."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Phone toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!Phone.isValidPhone(contactNumber)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new Phone(contactNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/bio/JsonAdaptedEmergencyContacts.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.storage.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Jackson-friendly version of {@link Phone}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "class JsonAdaptedEmergencyContacts {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String emergencyContacts;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code JsonAdaptedPhone} with the given {@code emergencyContacts}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonAdaptedEmergencyContacts(String emergencyContacts) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.emergencyContacts \u003d emergencyContacts;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts a given {@code Phone} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonAdaptedEmergencyContacts(Phone source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        emergencyContacts \u003d source.phoneNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getEmergencyContacts() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return emergencyContacts;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts this Jackson-friendly adapted emergency contact object into the model\u0027s {@code Phone} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted emergency contact."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Phone toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!Phone.isValidPhone(emergencyContacts)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new Phone(emergencyContacts);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/bio/JsonAdaptedGoals.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.storage.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Goal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Jackson-friendly version of {@link Goal}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "class JsonAdaptedGoals {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String goals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code JsonAdaptedGoal} with the given {@code goals}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonAdaptedGoals(String goals) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.goals \u003d goals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts a given {@code Goal} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonAdaptedGoals(Goal source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        goals \u003d source.goal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getGoals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return goals;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts this Jackson-friendly adapted goal object into the model\u0027s {@code Goal} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted goal."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Goal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!Goal.isValidGoal(goals)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(Goal.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new Goal(goals);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/bio/JsonAdaptedMedicalConditions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.storage.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.MedicalCondition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Jackson-friendly version of {@link MedicalCondition}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "class JsonAdaptedMedicalConditions {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String medicalConditions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code JsonAdaptedMedicalCondition} with the given {@code medicalConditions}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonAdaptedMedicalConditions(String medicalConditions) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.medicalConditions \u003d medicalConditions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts a given {@code MedicalCondition} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonAdaptedMedicalConditions(MedicalCondition source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        medicalConditions \u003d source.medicalCondition;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getMedicalConditions() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return medicalConditions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts this Jackson-friendly adapted medical condition object into the model\u0027s {@code MedicalCondition} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted medical condition."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public MedicalCondition toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!MedicalCondition.isValidMedicalCondition(medicalConditions)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new MedicalCondition(medicalConditions);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/bio/JsonAdaptedUser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.storage.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNABLE_TO_LOAD_IMAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.awt.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.DateOfBirth;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.DisplayPicPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Goal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.MedicalCondition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.OtherBioInfo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.ProfileDesc;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Jackson-friendly version of {@link User}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "class JsonAdaptedUser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"User\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String dpPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String profileDesc;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String dateOfBirth;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final List\u003cJsonAdaptedContactNumbers\u003e contactNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final List\u003cJsonAdaptedEmergencyContacts\u003e emergencyContacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final List\u003cJsonAdaptedMedicalConditions\u003e medicalConditions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final List\u003cJsonAdaptedGoals\u003e goals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final String otherInfo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code JsonAdaptedUser} with the given user details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonAdaptedUser(@JsonProperty(\"name\") String name, @JsonProperty(\"dpPath\") String dpPath,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           @JsonProperty(\"profileDesc\") String profileDesc,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           @JsonProperty(\"nric\") String nric, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           @JsonProperty(\"dateOfBirth\") String dateOfBirth,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           @JsonProperty(\"contactNumbers\") List\u003cJsonAdaptedContactNumbers\u003e contactNumbers,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           @JsonProperty(\"emergencyContacts\") List\u003cJsonAdaptedEmergencyContacts\u003e emergencyContacts,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           @JsonProperty(\"medicalConditions\") List\u003cJsonAdaptedMedicalConditions\u003e medicalConditions,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           @JsonProperty(\"goals\") List\u003cJsonAdaptedGoals\u003e goals,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           @JsonProperty(\"otherInfo\") String otherInfo) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.dpPath \u003d dpPath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.profileDesc \u003d profileDesc;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (contactNumbers !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.contactNumbers.addAll(contactNumbers);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (emergencyContacts !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.emergencyContacts.addAll(emergencyContacts);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (medicalConditions !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.medicalConditions.addAll(medicalConditions);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (goals !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.goals.addAll(goals);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.otherInfo \u003d otherInfo;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts a given {@code User} into this class for Jackson use."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonAdaptedUser(User source) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dpPath \u003d source.getDpPath().displayPicPath;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        profileDesc \u003d source.getProfileDesc().profileDesc;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        nric \u003d source.getNric().nric;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        gender \u003d source.getGender().gender;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dateOfBirth \u003d source.getDateOfBirth().dateOfBirth;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        contactNumbers.addAll(source.getContactNumbers().stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .map(JsonAdaptedContactNumbers::new)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        emergencyContacts.addAll(source.getEmergencyContacts().stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .map(JsonAdaptedEmergencyContacts::new)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        medicalConditions.addAll(source.getMedicalConditions().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .map(JsonAdaptedMedicalConditions::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        address \u003d source.getAddress().address;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        goals.addAll(source.getGoals().stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .map(JsonAdaptedGoals::new)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        otherInfo \u003d source.getOtherBioInfo().otherInfo;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts this Jackson-friendly adapted user object into the model\u0027s {@code User} object."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted user."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public User toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (dpPath \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    DisplayPicPath.class.getSimpleName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!DisplayPicPath.isValidDisplayPicPath(dpPath)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(DisplayPicPath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (!dpPath.isEmpty()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Image image \u003d ImageIO.read(new File(dpPath));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (image \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    throw new IllegalValueException(MESSAGE_UNABLE_TO_LOAD_IMAGE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_UNABLE_TO_LOAD_IMAGE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final DisplayPicPath modelDpPath \u003d new DisplayPicPath(dpPath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (profileDesc \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, ProfileDesc.class.getName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!ProfileDesc.isValidProfileDesc(profileDesc)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(ProfileDesc.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final ProfileDesc modelProfileDesc \u003d new ProfileDesc(profileDesc);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (dateOfBirth \u003d\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    DateOfBirth.class.getSimpleName()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(dateOfBirth)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final DateOfBirth modelDateOfBirth \u003d new DateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final List\u003cPhone\u003e userContactNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (JsonAdaptedContactNumbers contactNumber : contactNumbers) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            userContactNumbers.add(contactNumber.toModelType());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (userContactNumbers.isEmpty()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final List\u003cPhone\u003e modelContactNumbers \u003d new ArrayList\u003c\u003e(userContactNumbers);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final List\u003cPhone\u003e userEmergencyContacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (JsonAdaptedEmergencyContacts emergencyContact : emergencyContacts) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            userEmergencyContacts.add(emergencyContact.toModelType());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (userEmergencyContacts.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final List\u003cPhone\u003e modelEmergencyContacts \u003d new ArrayList\u003c\u003e(userEmergencyContacts);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final List\u003cMedicalCondition\u003e userMedicalCondition \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (JsonAdaptedMedicalConditions medicalCondition : medicalConditions) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            userMedicalCondition.add(medicalCondition.toModelType());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (userMedicalCondition.isEmpty()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final List\u003cMedicalCondition\u003e modelMedicalConditions \u003d new ArrayList\u003c\u003e(userMedicalCondition);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    .class.getSimpleName()));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final List\u003cGoal\u003e userGoals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (JsonAdaptedGoals goal : goals) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            userGoals.add(goal.toModelType());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final List\u003cGoal\u003e modelGoals \u003d new ArrayList\u003c\u003e(userGoals);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!OtherBioInfo.isValidOtherInfo(otherInfo)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new IllegalValueException(OtherBioInfo.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        final OtherBioInfo modelOtherBioInfo \u003d new OtherBioInfo(otherInfo);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new User(modelName, modelDpPath, modelProfileDesc, modelNric, modelGender, modelDateOfBirth,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                modelContactNumbers, modelEmergencyContacts, modelMedicalConditions, modelAddress, modelGoals,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                modelOtherBioInfo);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 233
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/bio/JsonSerializableUserList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.storage.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * An Immutable UserList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@JsonRootName(value \u003d \"userList\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "class JsonSerializableUserList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Users list contains duplicate user(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final List\u003cJsonAdaptedUser\u003e users \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Constructs a {@code JsonSerializableUserList} with the given users."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonSerializableUserList(@JsonProperty(\"users\") List\u003cJsonAdaptedUser\u003e users) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.users.addAll(users);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts a given {@code ReadOnlyUserList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableUserList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonSerializableUserList(ReadOnlyUserList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        users.addAll(source.getUserList().stream().map(JsonAdaptedUser::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Converts this address book into the model\u0027s {@code UserList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public UserList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        UserList addressBook \u003d new UserList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (JsonAdaptedUser jsonAdaptedUser : users) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            User user \u003d jsonAdaptedUser.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (addressBook.hasUser(user)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            addressBook.addUser(user);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/bio/JsonUserListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.storage.bio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.storage.UserListStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A class to access UserList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class JsonUserListStorage implements UserListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUserListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public JsonUserListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Path getUserListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Optional\u003cReadOnlyUserList\u003e readUserList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return readUserList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Similar to {@link #readUserList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Optional\u003cReadOnlyUserList\u003e readUserList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Optional\u003cJsonSerializableUserList\u003e jsonUserList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                filePath, JsonSerializableUserList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!jsonUserList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return Optional.of(jsonUserList.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void saveUserList(ReadOnlyUserList userList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        saveUserList(userList, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Similar to {@link #saveUserList(ReadOnlyUserList)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void saveUserList(ReadOnlyUserList userList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(userList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableUserList(userList), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Achievements.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.TilePane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A ui for the user\u0027s list of achievements, displayed in tiles."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Achievements extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"Achievements.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TilePane achievementsTilePane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Achievements() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TilePane getTilePane() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return achievementsTilePane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AchievementsImageView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A ui for a single ImageView used to contain a tile representing the user\u0027s achievements"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AchievementsImageView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"AchievementsImageView.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private ImageView achievementsImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public AchievementsImageView() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ImageView getImageView() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return achievementsImageView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AchievementsPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AchievementsPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"AchievementsPane.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static String displayImage \u003d \"/images/user.png\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private AchievementsTitle achievementsTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Achievements achievements;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private HBox achievementsTitlePlaceholder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private HBox achievementsPlaceholder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public AchievementsPane() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievementsTitle \u003d new AchievementsTitle(\"My Achievements\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                \"Hi Amy, here are the list of achievements you have collected so far.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievementsTitlePlaceholder.getChildren().add(achievementsTitle.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievements \u003d new Achievements();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d 24; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            int n \u003d i % 8 + 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Image img \u003d new Image(MainApp.class.getResourceAsStream(\"/images/sample_achievement_\" + n + \".png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ImageView imageView \u003d new AchievementsImageView().getImageView();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            imageView.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            achievements.getTilePane().getChildren().add(imageView);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievementsPlaceholder.getChildren().add(achievements.getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AchievementsTitle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A ui for the title of the achievements window used to display the user\u0027s list of"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * achievements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AchievementsTitle extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"AchievementsTitle.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Label achievementsTitleLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Label achievementsTitleDescLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public AchievementsTitle(String title, String titleDesc) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievementsTitleLabel.setText(title);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        achievementsTitleDescLabel.setText(titleDesc);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AverageGraphPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " * Represents a panel of an average graph."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class AverageGraphPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private static final String FXML \u003d \"AverageGraph.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private static final String TITLE \u003d \"%1$s average of %2$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AverageGraphPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private LineChart\u003cString, Double\u003e lineChart;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public AverageGraphPanel(Map\u003cLocalDate, Double\u003e averageMap, AverageType averageType, RecordType recordType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        lineChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String recordLabel \u003d getRecordLabel(recordType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        lineChart.setTitle(String.format(TITLE, averageType.toString(), recordLabel));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String xAxisLabel \u003d getXAxisLabel(averageType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        lineChart.getXAxis().setLabel(xAxisLabel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String yAxisLabel \u003d getYAxisLabel(recordType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        lineChart.getYAxis().setLabel(yAxisLabel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        XYChart.Series\u003cString, Double\u003e dataSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        for (Map.Entry\u003cLocalDate, Double\u003e entry : averageMap.entrySet()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            LocalDate date \u003d entry.getKey();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            Double average \u003d entry.getValue();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            dataSeries.getData().add(new XYChart.Data\u003cString, Double\u003e(date.toString(), average));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        lineChart.getData().add(dataSeries);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private String getRecordLabel(RecordType recordType) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (recordType) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case BMI:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"weight\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case BLOODSUGAR:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"blood sugar\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private String getYAxisLabel(RecordType recordType) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (recordType) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case BMI:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"Weight (kg)\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case BLOODSUGAR:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"Bloodsugar (mmol/L)\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private String getXAxisLabel(AverageType averageType) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        switch (averageType) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"Day\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case MONTHLY:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"Month\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"Week\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BioPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class BioPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"BioPane.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String DEFAULT_DP_PATH \u003d \"/images/user.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private BioTable bioTable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Image img;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String dpPath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private HBox profilePlaceholder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private VBox bioTablePlaceholder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public BioPane(ObservableList\u003cUser\u003e filteredUserList, Colour fontColour) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this(filteredUserList, null, fontColour);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public BioPane(ObservableList\u003cUser\u003e filteredUserList, Image img, Colour fontColour) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!filteredUserList.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            User user \u003d filteredUserList.get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            dpPath \u003d user.getDpPath().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String name \u003d user.getName().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String nric \u003d user.getNric().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String gender \u003d user.getGender().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String dob \u003d user.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String hp \u003d listToString(user.getContactNumbers());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String emergencyHp \u003d listToString(user.getEmergencyContacts());;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String medicalCondition \u003d listToString(user.getMedicalConditions());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String address \u003d user.getAddress().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String fontColourToString \u003d fontColour.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String bgColour \u003d \"navy-blue\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String myGoals \u003d listToString(user.getGoals());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String otherBioInfo \u003d user.getOtherBioInfo().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            File file \u003d new File(dpPath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (img !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                profile \u003d new Profile(img, user.getName().toString(), user.getProfileDesc().toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (!file.exists()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    if (img \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        img \u003d new Image(MainApp.class.getResourceAsStream(DEFAULT_DP_PATH));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    img \u003d new Image(file.toURI().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                profile \u003d new Profile(img, user.getName().toString(), user.getProfileDesc().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.img \u003d img;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            profilePlaceholder.getChildren().add(profile.getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            bioTable \u003d new BioTable(name, nric, gender, dob, hp, emergencyHp, medicalCondition, address, dpPath,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    bgColour, fontColourToString, myGoals, otherBioInfo);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            img \u003d new Image(MainApp.class.getResourceAsStream(DEFAULT_DP_PATH));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.img \u003d img;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            profile \u003d new Profile(img, \"No user bio added :(\", null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            profilePlaceholder.getChildren().add(profile.getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            bioTable \u003d new BioTable();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        bioTablePlaceholder.getChildren().add(bioTable.getRoot());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getDpPath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return dpPath;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Image getImg() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return img;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the String representation of a list that is to be displayed in this BioPane."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param list A list for which its String representation is to be representation."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of a list that is to be displayed in this BioPane."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static String listToString(List\u003c? extends Object\u003e list) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (list.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return list.get(0).toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (i \u003e 1) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                stringBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            stringBuilder.append(i).append(\". \").append(list.get(i - 1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BioTable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A ui for the table that is used to display the user\u0027s biography."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class BioTable extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"BioTable.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final List\u003cString\u003e FIELD_LABELS \u003d new ArrayList\u003c\u003e(List.of(\"Name:\", \"NRIC:\", \"Gender:\", \"DOB:\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \"HP:\", \"Emergency HP:\", \"Medical Condition:\", \"Address:\", \"DP Path:\", \"Background Colour:\", \"Font Colour:\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \"My Goals:\", \"Other Bio Info\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private ObservableList\u003cBioTableFieldDataPair\u003e list;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TableView\u003cBioTableFieldDataPair\u003e tableView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TableColumn\u003cString, String\u003e field;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TableColumn\u003cString, String\u003e data;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public BioTable() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        field.setCellValueFactory(new PropertyValueFactory\u003cString, String\u003e(\"field\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        setFontColourToColumn(field, \"yellow\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        data.setCellValueFactory(new PropertyValueFactory\u003cString, String\u003e(\"data\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        setFontColourToColumn(data, \"red\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        tableView.setSelectionModel(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        FIELD_LABELS.forEach(fieldLabel -\u003e list.add(new BioTableFieldDataPair(fieldLabel, \"\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        tableView.setItems(list);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a biotable with the user\u0027s specified fields."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public BioTable(String name, String nric, String gender, String dob, String hp, String emergencyHp,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    String medicalCondition, String address, String dpPath, String bgColour, String fontColour,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    String myGoals, String otherBioInfo) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cString\u003e data \u003d new ArrayList\u003c\u003e(List.of(name, nric, gender, dob, hp, emergencyHp, medicalCondition, address,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                dpPath, bgColour, fontColour, myGoals, otherBioInfo));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Iterator\u003cString\u003e dataIterator \u003d data.iterator();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        FIELD_LABELS.forEach(fieldLabel -\u003e list.add(new BioTableFieldDataPair(fieldLabel, dataIterator.next())));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        tableView.setItems(list);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setFontColourToColumn(TableColumn\u003cString, String\u003e column, String colour) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        column.setCellFactory(new Callback\u003cTableColumn\u003cString, String\u003e, TableCell\u003cString, String\u003e\u003e() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            public TableCell\u003cString, String\u003e call(TableColumn\u003cString, String\u003e param) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return new TableCell\u003cString, String\u003e() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    public void updateItem(String item, boolean empty) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        super.updateItem(item, empty);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        if (!isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                            setStyle(\"-fx-text-fill: \" + colour + \" !important;\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                            setText(item);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BioTableFieldDataPair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A class that fields to display in the bioTable displayed to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Reference to example from: https://docs.oracle.com/javafx/2/ui_controls/table-view.htm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class BioTableFieldDataPair {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final SimpleStringProperty field;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private final SimpleStringProperty data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    BioTableFieldDataPair(String field, String data) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.field \u003d new SimpleStringProperty(field);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.data \u003d new SimpleStringProperty(data);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return field.get();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setField(String field) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.field.set(field);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return data.get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setData(String data) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.data.set(data);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BloodSugarRecordCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * An UI component that displays information of a {@code BloodSugarRecord}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class BloodSugarRecordCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String FXML \u003d \"BloodSugarRecordListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As a consequence, UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * elements\u0027 variable names cannot be set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public final Record record;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Label recordType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Label concentration;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BloodSugarRecordCard(BloodSugar record, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.record \u003d record;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String recordType \u003d record.getClass().getSimpleName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.recordType.setText(recordType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        dateTime.setText(\"DateTime: \" + record.getDateTime().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        concentration.setText(\"Concentration: \" + record.getConcentration().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!(other instanceof BloodSugarRecordCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        BloodSugarRecordCard card \u003d (BloodSugarRecordCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 record.equals(card.record);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BmiRecordCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Bmi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * An UI component that displays information of a {@code BmiRecord}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class BmiRecordCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String FXML \u003d \"BmiRecordListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As a consequence, UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * elements\u0027 variable names cannot be set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public final Record record;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Label recordType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Label height;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Label weight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public BmiRecordCard(Bmi record, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.record \u003d record;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String recordType \u003d record.getClass().getSimpleName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        this.recordType.setText(recordType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        dateTime.setText(\"DateTime: \" + record.getDateTime().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        height.setText(\"Height: \" + record.getHeight().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        weight.setText(\"Weight: \" + record.getWeight().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        if (!(other instanceof BmiRecordCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        BmiRecordCard card \u003d (BmiRecordCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u0026\u0026 record.equals(card.record);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayPaneType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Consists the different type of main window contents based on different commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public enum DisplayPaneType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    MAIN,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    BIO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    ACHVM,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    RECM_FOOD,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    ADD,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    AVERAGE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    COLOUR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 11,
      "scwaterbear": 3,
      "whneo97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FoodCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Displays information of a {@code Food}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String CALORIE_TEXT \u003d \"Calorie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String GI_TEXT \u003d \"GI\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String SUGAR_TEXT \u003d \"Sugar\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String FAT_TEXT \u003d \"Fat\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String POSTFIX \u003d \":  \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color ORANGE \u003d Color.rgb(240, 147, 43);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color GREEN \u003d Color.rgb(186, 220, 88);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color YELLOW \u003d Color.rgb(249, 202, 36);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color BLUE \u003d Color.rgb(126, 214, 223);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color PINK \u003d Color.rgb(214, 162, 232);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final Color RED \u003d Color.rgb(255, 127, 80);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Rectangle header;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Label foodName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Label calorie;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Label gi;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Label sugar;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Label fat;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodCard(Food food) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        setTitleBackgroundColor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodName.setText(food.getFoodName().foodName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        calorie.setText(CALORIE_TEXT + POSTFIX + food.getCalorie().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        gi.setText(GI_TEXT + POSTFIX + food.getGi().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        sugar.setText(SUGAR_TEXT + POSTFIX + food.getSugar().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        fat.setText(FAT_TEXT + POSTFIX + food.getFat().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private void setTitleBackgroundColor() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        switch (food.getFoodType()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case NON_STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(GREEN);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(ORANGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FRUIT:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(YELLOW);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case PROTEIN:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(BLUE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case SNACK:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(PINK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case MEAL:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            header.setFill(RED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"Food type is not found.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Background backgroundBuilder(Color color) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Background(new BackgroundFill(color, CornerRadii.EMPTY, Insets.EMPTY));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FoodFlowPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a panel of a list of foods."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodFlowPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String FXML \u003d \"FoodFlowPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodFlowPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private FlowPane flowPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private ScrollPane mainScrollPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodFlowPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.addListener(new ListChangeListener\u003cFood\u003e() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            public void onChanged(Change\u003c? extends Food\u003e c) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                refreshFlowPanel(foodList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.stream().sorted(Comparator.comparing(food -\u003e food.getFoodType()))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .forEach(food -\u003e flowPane.getChildren().add(new FoodCard(food).getRoot()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        mainScrollPanel.setContent(flowPane);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Updates the food recommendation panel."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private void refreshFlowPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        flowPane.getChildren().clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (Food food : foodList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            flowPane.getChildren().add(new FoodCard(food).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainDisplayPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A class containing enumerations, storing the possible Main Display Panes to be displayed to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class MainDisplayPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Map\u003cDisplayPaneType, UiPart\u003cRegion\u003e\u003e map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private DisplayPaneType currPaneType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public MainDisplayPane(Logic logic) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        currPaneType \u003d DisplayPaneType.MAIN;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a UiPart representing the Main Display Pane observed by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param displayPaneType An enumerated display pane to retrieve or store the corresponding type of UiPart."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param newPaneIsToBeCreated Boolean indicating whether a new pane is to be created, regardless of whether a pane"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                           already exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A UiPart representing the Main Display Pane observed by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public UiPart\u003cRegion\u003e get(DisplayPaneType displayPaneType, boolean newPaneIsToBeCreated) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        switch (displayPaneType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case MAIN:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return getMappedPane(displayPaneType, () -\u003e new PersonListPanel(logic.getFilteredPersonList()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    newPaneIsToBeCreated);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case BIO:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ObservableList\u003cUser\u003e filteredUserList \u003d logic.getFilteredUserList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            BioPane previousPane \u003d (BioPane) map.get(DisplayPaneType.BIO);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Image previousDp \u003d previousPane !\u003d null ? previousPane.getImg() : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!filteredUserList.isEmpty() \u0026\u0026 previousDp !\u003d null \u0026\u0026 filteredUserList.get(0).getDpPath().toString()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    .equals(previousPane.getDpPath())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return getMappedPane(displayPaneType, () -\u003e new BioPane(filteredUserList, previousDp,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                                logic.getFontColour()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        newPaneIsToBeCreated);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return getMappedPane(displayPaneType, () -\u003e new BioPane(filteredUserList,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                                logic.getFontColour()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        newPaneIsToBeCreated);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        case ACHVM:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return getMappedPane(displayPaneType, AchievementsPane::new, newPaneIsToBeCreated);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case RECM_FOOD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return getMappedPane(displayPaneType, () -\u003e new FoodFlowPanel(logic.getFilterFoodList()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    newPaneIsToBeCreated);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return getMappedPane(displayPaneType, () -\u003e new RecordListPanel(logic.getFilterRecordList()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    newPaneIsToBeCreated);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        case AVERAGE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            return getMappedPane(displayPaneType, () -\u003e new AverageGraphPanel(logic.getAverageMap(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                            logic.getAverageType(), logic.getRecordType()), newPaneIsToBeCreated);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a UiPart to be displayed to the user, after adding it to the map of display panes, if not yet added."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param displayPaneType An enumerated display pane to retrieve or store the corresponding type of UiPart."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param newPaneSupplier A Supplier object containing the UiPart to be returned if a mapping for it does"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                        not exist yet, unless new pane is given to be created regardless."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param newPaneIsToBeCreated Boolean indicating whether a new pane is to be created, regardless of whether a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                           pane of the same type already exists."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A UiPart representing the Main Display Pane observed by the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private UiPart\u003cRegion\u003e getMappedPane(DisplayPaneType displayPaneType,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                                         Supplier\u003cUiPart\u003cRegion\u003e\u003e newPaneSupplier, boolean newPaneIsToBeCreated) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        UiPart\u003cRegion\u003e mappedPane \u003d map.get(displayPaneType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        currPaneType \u003d displayPaneType;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (mappedPane \u003d\u003d null || newPaneIsToBeCreated \u003d\u003d true) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            mappedPane \u003d newPaneSupplier.get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            map.put(displayPaneType, mappedPane);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return mappedPane;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a UiPart to be displayed to the user. If a panel of the same type already exists,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * it simply returns the existing panel."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param displayPaneType An enumerated display pane to retrieve or store the corresponding type of UiPart."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param newPaneSupplier A Supplier object containing the UiPart to be returned if a mapping for it does"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                        not exist yet."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A UiPart representing the Main Display Pane observed by the user, and is simply the existing part of"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * the same type if it already exists in the mapping of this MainDisplayPane object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private UiPart\u003cRegion\u003e getMappedPane(DisplayPaneType displayPaneType,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                                                 Supplier\u003cUiPart\u003cRegion\u003e\u003e newPaneSupplier) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return getMappedPane(displayPaneType, newPaneSupplier, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DisplayPaneType getCurrPaneType() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return currPaneType;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 17,
      "whneo97": 87,
      "scwaterbear": 3,
      "chen-xi-cx": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_BIO_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.ui.DisplayPaneType.BIO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.ui.DisplayPaneType.COLOUR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where other JavaFX elements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String MESSAGE_CANNOT_LOAD_WINDOW \u003d \"Unable to load window. :(\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private StyleManager styleManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private MainDisplayPane mainDisplayPane;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private VBox mainWindowPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private StackPane mainDisplayPanePlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        mainDisplayPane \u003d new MainDisplayPane(logic);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        styleManager \u003d new StyleManager(scene);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        setFontColour(logic.getGuiSettings());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    void fillInnerParts(String imagePath) throws URISyntaxException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        ImageView imageView \u003d new ImageView(imagePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        imageView.fitWidthProperty().bind(mainDisplayPanePlaceholder.widthProperty());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        imageView.fitHeightProperty().bind(mainDisplayPanePlaceholder.heightProperty());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        imageView.setPreserveRatio(true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        mainDisplayPanePlaceholder.getChildren().add(imageView);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        mainDisplayPanePlaceholder.setStyle(\"-fx-background-image: url(\u0027\" + imagePath + \"\u0027); \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"-fx-background-position: center center; \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"-fx-background-repeat: no-repeat;\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"-fx-background-size: contain;\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!logic.getFilteredUserList().isEmpty()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String name \u003d logic.getFilteredUserList().get(0).getName().toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"Hi \" + name + \"! How are you feeling, and how can SugarMummy \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"assist you today?\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"Hello there! How are you feeling, and how can SugarMummy \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"assist you today?\\n\" + MESSAGE_NO_BIO_FOUND);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Sets the font colour based on {@code guiSettings}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param guiSettings"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private void setFontColour(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        styleManager.setFontColour(guiSettings.getFontColour());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the pane to be displayed depending on the type of pane to be displayed and whether the GUI has"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * been modified."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * If the GUI has been modified, then the BIO page needs to reload to display the update if the current"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * pane displayed happens to be so."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param displayPaneType DisplayPaneType indicating whether the GUI is to be modified."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param guiIsModified Boolean indicating whether the GUI has been modified."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private DisplayPaneType getPaneToDisplay(DisplayPaneType displayPaneType, boolean guiIsModified) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (guiIsModified \u0026\u0026 mainDisplayPane.getCurrPaneType() \u003d\u003d BIO) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return BIO;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (guiIsModified) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return displayPaneType;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Modifies the GUI based on the displayPaneType and returns true if the GUI has been modified"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param displayPaneType DisplayPaneType indicating whether the GUI is to be modified."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Boolean indicating whether the GUI has been modified."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private boolean guiIsModified(DisplayPaneType displayPaneType) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (displayPaneType \u003d\u003d COLOUR) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            setFontColour(logic.getGuiSettings());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Switches the main display pane to the specified UI part."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void switchToMainDisplayPane(DisplayPaneType displayPaneType, boolean newPaneIsToBeCreated) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!Arrays.asList(DisplayPaneType.values()).contains(displayPaneType)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (displayPaneType !\u003d mainDisplayPane.getCurrPaneType() || newPaneIsToBeCreated) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            DisplayPaneType paneToDisplay \u003d getPaneToDisplay(displayPaneType, guiIsModified(displayPaneType));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (paneToDisplay \u003d\u003d null) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            newPaneIsToBeCreated \u003d (displayPaneType \u003d\u003d COLOUR \u0026\u0026 paneToDisplay \u003d\u003d BIO) || newPaneIsToBeCreated;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            mainDisplayPanePlaceholder.setBackground(Background.EMPTY);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            mainDisplayPanePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            mainDisplayPanePlaceholder.getChildren()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                .add(requireNonNull(mainDisplayPane.get(paneToDisplay, newPaneIsToBeCreated).getRoot()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY(), logic.getFontColour());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    switchToMainDisplayPane(logic.getDisplayPaneType(), logic.getnewPaneIsToBeCreated());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                    logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                    resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    String feedbackToUser \u003d commandResult.getFeedbackToUser() + \"\\n\" + MESSAGE_CANNOT_LOAD_WINDOW;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    resultDisplay.setFeedbackToUser(feedbackToUser);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10,
      "-": 179,
      "whneo97": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As a consequence, UI"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * elements\u0027 variable names cannot be set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Profile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILE_DESC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A ui for the user\u0027s profile header consisting of the user\u0027s name and customisable description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Profile extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FXML \u003d \"Profile.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Profile(Image displayPicture, String name, String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.displayPicture.setImage(displayPicture);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.name.setText(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (description !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.description.setText(\"No profile description added. But that\u0027s okay, \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"you may use the [\" + PREFIX_PROFILE_DESC"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"] prefix to add a profile descripion anytime! :)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.description.setStyle(\"-fx-font-family: Arial; -fx-font-style: italic\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.description.setText(description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecordListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Bmi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " * Panel containing the list of records."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class RecordListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String FXML \u003d \"RecordListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecordListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private ListView\u003cRecord\u003e recordListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public RecordListPanel(ObservableList\u003cRecord\u003e recordList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        recordListView.setItems(recordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        recordListView.setCellFactory(listView -\u003e new RecordListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Record} using a {@code BloodSugarRecordCard} or"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * a {@code BmiRecordCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    class RecordListViewCell extends ListCell\u003cRecord\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        protected void updateItem(Record record, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            super.updateItem(record, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            if (empty || record \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                if (record.getClass() \u003d\u003d BloodSugar.class) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                    setGraphic(new BloodSugarRecordCard((BloodSugar) record, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                } else if (record.getClass() \u003d\u003d Bmi.class) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                    setGraphic(new BmiRecordCard((Bmi) record, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return resultDisplay.getText();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "whneo97": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StyleManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Helper class that helps in managing the styles used for the GUI of the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class StyleManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String SEPARATOR \u003d System.getProperty(\"os.name\").startsWith(\"Windows\") ? \"\\\\\" : \"/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String DEFAULT_THEME_NAME \u003d \"default\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String fontColour \u003d \"yellow\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String backgroundColour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public StyleManager(Scene scene) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.scene \u003d scene;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the list of stylesheets stored in the scene attribute of this object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return List of stylesheets stored in the scene attribute of this object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ObservableList\u003cString\u003e getStylesheets() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return scene.getStylesheets();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the new styleSheet to be used by the program for rendering nodes of this"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * style manager\u0027s scene."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return New styleSheet to be used by the program for rendering."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public File getNewStyleSheet() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String directoryName \u003d System.getProperty(\"user.dir\") + SEPARATOR"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"stylesheets\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        File directory \u003d new File(directoryName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        File styleSheet \u003d new File(directoryName + SEPARATOR + \"MyTheme.css\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!styleSheet.exists()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                styleSheet.createNewFile();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        setStyleSheet(styleSheet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return styleSheet;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Sets the given styleSheet to be the active styleSheet used by the program for rendering."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param styleSheet Css file to bew used as the active styleSheet."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setStyleSheet(File styleSheet) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String themePath \u003d styleSheet.toURI().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        getStylesheets().set(0, themePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.fontColour \u003d fontColour;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Sets the font colour of this style manager\u0027s scene."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param fontColour String representation of a CSS font colour."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setFontColour(String fontColour) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        File outputCss \u003d getNewStyleSheet();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String replaceWith \u003d fontColour;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            InputStream is \u003d this.getClass().getResourceAsStream(\"/view/DarkTheme.css\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String lineReadFromReader;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String lineToWriteViaWriter \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            while ((lineReadFromReader \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                int textFillIndex \u003d lineReadFromReader.indexOf(\"-fx-text-fill: \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (textFillIndex !\u003d -1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    String subText \u003d lineReadFromReader.substring(textFillIndex, lineReadFromReader.length());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    int semiColonIndex \u003d subText.indexOf(\":\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    int exclamationIndex \u003d subText.indexOf(\"!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    String toReplace;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    if (exclamationIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        int colonIndex \u003d subText.indexOf(\";\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        toReplace \u003d lineReadFromReader.substring(textFillIndex + semiColonIndex + 1, textFillIndex"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                                + colonIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        lineReadFromReader \u003d lineReadFromReader.replace(toReplace, \" \" + replaceWith);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        toReplace \u003d lineReadFromReader.substring(textFillIndex + semiColonIndex + 1,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                                textFillIndex + exclamationIndex);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        lineReadFromReader \u003d lineReadFromReader.replace(toReplace, \" \" + replaceWith"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                                + \" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                lineToWriteViaWriter +\u003d lineReadFromReader + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            FileWriter fw \u003d new FileWriter(outputCss);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fw.write(lineToWriteViaWriter);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        setStyleSheet(outputCss);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String BACKGROUND_PATH \u003d \"/images/background.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            mainWindow.fillInnerParts(BACKGROUND_PATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns after the user has"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the application after the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 6,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It contains a scene graph with"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the {@code fx:controller}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not specify the {@code"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 22,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/Calorie.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Specifies the nutrition value of Calorie."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Calorie extends NutritionValue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code Calorie}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param calorieValue a valid calorie value"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Calorie(String calorieValue) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(calorieValue);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 17
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/Fat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Specifies the nutrition value of Fat."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Fat extends NutritionValue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code Fat}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param fatValue a valid fat value"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Fat(String fatValue) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(fatValue);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 17
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/Food.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a Food in the food recommendation list. Guarantees: details are present and not null, field values are"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final FoodName foodName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Calorie calorie;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Gi gi;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Sugar sugar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final Fat fat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final FoodType foodType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Food(FoodName foodName, Calorie calorie, Gi gi, Sugar sugar, Fat fat, FoodType foodType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireAllNonNull(foodName, calorie, gi, sugar, fat);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d gi;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d sugar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodType \u003d foodType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodName getFoodName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Calorie getCalorie() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Gi getGi() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return gi;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Sugar getSugar() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return sugar;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Fat getFat() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return fat;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodType getFoodType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if both foods have the same food names."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean isSameFood(Food other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this.foodName.equals(other.foodName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return Objects.hash(foodName, calorie, gi, sugar, fat, foodType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        builder.append(getFoodName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(getFoodType().getTypeName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(\" Calorie: \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(getCalorie())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(\" GI: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(getGi())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(\" Sugar: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(getSugar())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(\" Fat: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .append(getFat());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 90
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/FoodBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_FOOD_NAME \u003d \"FOOD\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_CALORIE \u003d \"34.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_GI \u003d \"10.0\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_SUGAR \u003d \"1.7\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_FAT \u003d \"0.4\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"nsv\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private FoodName foodName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Calorie calorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Gi gi;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Sugar sugar;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Fat fat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private FoodType foodType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Initializes the FoodBuilder with the default data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d new FoodName(DEFAULT_FOOD_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d new Calorie(DEFAULT_CALORIE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d new Gi(DEFAULT_GI);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d new Sugar(DEFAULT_SUGAR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d new Fat(DEFAULT_FAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.foodType \u003d FoodType.getFrom(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"The type cannot be wrong.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d foodToCopy.getFoodName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d foodToCopy.getCalorie();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d foodToCopy.getGi();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d foodToCopy.getSugar();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d foodToCopy.getFat();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodType \u003d foodToCopy.getFoodType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code FoodName} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFoodName(String foodName) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d new FoodName(foodName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Calorie} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withCalorie(String calorie) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Gi} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withGi(String gi) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d new Gi(gi);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Sugar} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withSugar(String sugar) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d new Sugar(sugar);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFat(String fat) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d new Fat(fat);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFoodType(String foodType) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.foodType \u003d FoodType.getFrom(foodType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"The type cannot be wrong.\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Food(foodName, calorie, gi, sugar, fat, foodType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 108
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/FoodName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents the name of \u003ccode\u003eFood\u003c/code\u003e in the recommended food list. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces. It should not be blank \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                + \"and longer than 30 characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * The first character of the food must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public final String foodName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code FoodName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param foodName a valid food name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodName(String foodName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(foodName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        checkArgument(isValidName(foodName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if a given string is a valid food name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 30;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String getFoodName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!(other instanceof FoodName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodName.equals(((FoodName) other).foodName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodName.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 67
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/FoodNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code FoodName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodNameContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(food.getFoodName().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                || (other instanceof FoodNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                \u0026\u0026 keywords.equals(((FoodNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 31
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/FoodType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_FRUIT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_MEAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_NON_STARCHY_VEGETABLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_PROTEIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_SNACK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ABBR_STARCHY_VEGETABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FLAG_SIGNAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents all useful food types for categorizing food recommendations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public enum FoodType {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    NON_STARCHY_VEGETABLE(\"Non-starchy vegetable\", ABBR_NON_STARCHY_VEGETABLE),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    STARCHY_VEGETABLE(\"Starchy vegetable\", ABBR_STARCHY_VEGETABLE),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    FRUIT(\"Fruit\", ABBR_FRUIT),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    PROTEIN(\"Protein\", ABBR_PROTEIN),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    SNACK(\"Snack\", ABBR_SNACK),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    MEAL(\"Meal\", ABBR_MEAL);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Food types should only be one of the following\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        + \"nsv(Non-starchy vegetable); sv(Starchy vegetable); f(Fruit); p(Protein); s(Snack); m(Meal) \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private String shortHand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    FoodType(String type, String shortHand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.shortHand \u003d shortHand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static FoodType getFrom(String shortHandType) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        switch (shortHandType.toLowerCase()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_NON_STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_NON_STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return NON_STARCHY_VEGETABLE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_STARCHY_VEGETABLE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return STARCHY_VEGETABLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_FRUIT:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_FRUIT:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return FRUIT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_PROTEIN:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_PROTEIN:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return PROTEIN;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_SNACK:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_SNACK:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return SNACK;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case ABBR_MEAL:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        case FLAG_SIGNAL + ABBR_MEAL:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return MEAL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new ParseException(\"Invalid food type\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String getTypeName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public String getShortHand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return shortHand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 66
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/FoodTypeIsWantedPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Tests that a {@code Food} belongs to any given {@code FoodType}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodTypeIsWantedPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final List\u003cFoodType\u003e foodTypes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodTypeIsWantedPredicate(List\u003cFoodType\u003e foodTypes) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodTypes \u003d foodTypes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return foodTypes.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            .anyMatch(foodType -\u003e food.getFoodType().equals(foodType));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            || (other instanceof FoodTypeIsWantedPredicate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \u0026\u0026 foodTypes.equals(((FoodTypeIsWantedPredicate) other).foodTypes));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 28
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/Gi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Specifies the nutrition value of glycemic index(GI)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Gi extends NutritionValue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code GI}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param giValue a valid glycemic index value"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Gi(String giValue) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(giValue);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 17
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/NutritionValue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Represents a kind of nutrition value of \u003ccode\u003eFood\u003c/code\u003e in the recommended food list. Guarantees: immutable; is"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * valid as declared in {@link #isValidValue(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class NutritionValue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \"Nutrition value should only contain number and should be non-negative.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[+]?\\\\d+\\\\.?\\\\d*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code NutritionValue}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param value a valid nutrition value"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public NutritionValue(String value) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        checkArgument(isValidValue(value.toString()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if a given string is a valid nutrition value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static boolean isValidValue(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the double value indicated in the {@code value} string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public double getNumericalValue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return Double.parseDouble(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!(other instanceof NutritionValue)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return value.equals(((NutritionValue) other).value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 60
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/Sugar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Specifies the nutrition value of Sugar."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class Sugar extends NutritionValue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Constructs a {@code Sugar}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * @param sugarValue a valid sugar value"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Sugar(String sugarValue) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(sugarValue);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 17
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/TypicalFoods.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class TypicalFoods {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO \u003d new FoodBuilder().withFoodName(\"Potatodfafadfafadf\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA \u003d new FoodBuilder().withFoodName(\"Banana\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN \u003d new FoodBuilder().withFoodName(\"Chicken\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS \u003d new FoodBuilder().withFoodName(\"Potato chips\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE \u003d new FoodBuilder().withFoodName(\"Chicken Rice\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI2 \u003d new FoodBuilder().withFoodName(\"Broccoli2\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO2 \u003d new FoodBuilder().withFoodName(\"Potato2\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA2 \u003d new FoodBuilder().withFoodName(\"Banana2\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN2 \u003d new FoodBuilder().withFoodName(\"Chicken2\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS2 \u003d new FoodBuilder().withFoodName(\"Potato chips2\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE2 \u003d new FoodBuilder().withFoodName(\"Chicken Rice2\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI3 \u003d new FoodBuilder().withFoodName(\"Broccoli3\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO3 \u003d new FoodBuilder().withFoodName(\"Potato3\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA3 \u003d new FoodBuilder().withFoodName(\"Banana3\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN3 \u003d new FoodBuilder().withFoodName(\"Chicken3\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS3 \u003d new FoodBuilder().withFoodName(\"Potato chips3\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE3 \u003d new FoodBuilder().withFoodName(\"Chicken Rice3\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final List\u003cFood\u003e FOODS \u003d new ArrayList\u003c\u003e(Arrays.asList(new Food[]{BROCCOLI, POTATO, BANANA, CHICKEN,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        POTATO_CHIPS, CHICKEN_RICE, BROCCOLI2, POTATO2, BANANA2, CHICKEN2, POTATO_CHIPS2, CHICKEN_RICE2, BROCCOLI3,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        POTATO3, BANANA3, CHICKEN3, POTATO_CHIPS3, CHICKEN_RICE3}));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 34
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/UniqueFoodList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.exception.DuplicateFoodException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.exception.FoodNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This class represents a list of foods that enforces uniqueness between its elements and does not allow nulls. A food"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * is considered unique by comparing using {@code Food#isSameFood(Food)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * @see Food#isSameFood(Food)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class UniqueFoodList implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Adds a food to the list. The food must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedFood}. {@code target} must exist in the list. The"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * food identity of {@code editedFood} must not be the same as another existing food in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!target.isSameFood(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Removes the equivalent food from the list. The food must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void setFoods(UniqueFoodList replacement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Replaces the contents of this list with {@code foods}. {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        if (!foodsAreUnique(foods)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                || (other instanceof UniqueFoodList"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFoodList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Returns true if {@code foods} contains only unique foods."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private boolean foodsAreUnique(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 129
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/exception/DuplicateFoodException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Signals that the operation will result in duplicate Foods. Foods are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * name."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(\"Operation would result in duplicate foods\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 11
    }
  },
  {
    "path": "src/main/java/seedu/sgm/model/food/exception/FoodNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.sgm.model.food.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * Signals that the operation is unable to find the specified food."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        super(\"Cannot find the specified food!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 10
    }
  },
  {
    "path": "src/main/resources/view/Achievements.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.TilePane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cHBox fx:id\u003d\"achievementsPlaceHolder\" HBox.hgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"achievementsScrollPane\" fitToWidth\u003d\"true\" pannable\u003d\"true\" styleClass\u003d\"profile-scroll\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \u003cTilePane fx:id\u003d\"achievementsTilePane\" hgap\u003d\"10\" vgap\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003c/content\u003e\u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 18
    }
  },
  {
    "path": "src/main/resources/view/AchievementsImageView.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cImageView fx:id\u003d\"achievementsImageView\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 6
    }
  },
  {
    "path": "src/main/resources/view/AchievementsPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cHBox fx:id\u003d\"achievementsTitlePlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cHBox fx:id\u003d\"achievementsPlaceholder\" styleClass\u003d\"pane-with-border\" HBox.Hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 21
    }
  },
  {
    "path": "src/main/resources/view/AchievementsTitle.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cHBox fx:id\u003d\"achievementsTitle\" HBox.hgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" minHeight\u003d\"62\" fitToWidth\u003d\"true\" pannable\u003d\"true\" styleClass\u003d\"profile-scroll\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003cVBox maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"achievementsTitleLabel\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" maxHeight\u003d\"Infinity\" styleClass\u003d\"profile-name\" text\u003d\"Label\" wrapText\u003d\"true\" VBox.vgrow\u003d\"always\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"achievementsTitleDescLabel\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" maxHeight\u003d\"Infinity\" styleClass\u003d\"profile-asl\" text\u003d\"Label\" wrapText\u003d\"true\" VBox.vgrow\u003d\"always\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cInsets top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 35
    }
  },
  {
    "path": "src/main/resources/view/AverageGraph.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003cScrollPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "      \u003cLineChart fx:id\u003d\"lineChart\" prefWidth\u003d\"465.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "          \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "          \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "      \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 19
    }
  },
  {
    "path": "src/main/resources/view/BioPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cHBox fx:id\u003d\"profilePlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     \u003c/HBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     \u003cVBox fx:id\u003d\"bioTablePlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 21
    }
  },
  {
    "path": "src/main/resources/view/BioTable.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cTableView fx:id \u003d \"tableView\" styleClass\u003d\"bio-table\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003ccolumnResizePolicy\u003e\u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\"/\u003e\u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cTableColumn minWidth\u003d\"150\" maxWidth\u003d\"150\" reorderable\u003d\"false\" fx:id\u003d\"field\" text\u003d\"Field\" sortable\u003d\"false\" styleClass\u003d\"field-column\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cTableColumn reorderable\u003d\"false\" fx:id\u003d\"data\" text\u003d\"Data\" sortable\u003d\"false\" styleClass\u003d\"data-column\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/columns\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 17
    }
  },
  {
    "path": "src/main/resources/view/BloodSugarRecordListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003cLabel fx:id\u003d\"recordType\" text\u003d\"\\$recordType\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cLabel fx:id\u003d\"concentration\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 33
    }
  },
  {
    "path": "src/main/resources/view/BmiRecordListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003cLabel fx:id\u003d\"recordType\" text\u003d\"\\$recordType\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cLabel fx:id\u003d\"height\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cLabel fx:id\u003d\"weight\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 34
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".blue {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-control-inner-background: transparent;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: rgba(255, 255, 0, 0.2);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: #FF00FF;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /*-fx-table-cell-border-color: transparent;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /*-fx-table-header-border-color: transparent;*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ".v-box {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ".card_big_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    -fx-font-family: \"Candara\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    -fx-padding: 6;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ".card_small_label {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    -fx-text-fill: #d1d1e0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".profile-name {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": " }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".profile-asl {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".bio-table {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".bio-table .table-row-cell {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".field-column {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Arial\" !important;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt !important;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-style: italic !important;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-weight: bold !important;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".data-column {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Arial\" !important;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt !important;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".field-column .label {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Arial\" !important;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt !important;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-style: italic !important;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".data-column .label{"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Arial\" !important;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt !important;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".profile-scroll {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background: transparent !important;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent !important;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: transparent !important;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 18,
      "-": 354,
      "whneo97": 63
    }
  },
  {
    "path": "src/main/resources/view/FoodFlowPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003cScrollPane fx:id\u003d\"mainScrollPanel\" hbarPolicy\u003d\"NEVER\" vbarPolicy\u003d\"AS_NEEDED\" fitToWidth\u003d\"true\" fitToHeight\u003d\"true\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            style\u003d\"-fx-background: #383838; -fx-background-color: #1d1d1d\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"flowPane\" orientation\u003d\"HORIZONTAL\" hgap\u003d\"10\" vgap\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \u003cInsets top\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" right\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 15
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003cVBox alignment\u003d\"TOP_CENTER\" styleClass\u003d\"v-box\" minHeight\u003d\"200\" minWidth\u003d\"150\" prefHeight\u003d\"200\" prefWidth\u003d\"150\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "      maxHeight\u003d\"200\" maxWidth\u003d\"150\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cRectangle fx:id\u003d\"header\" height\u003d\"70\" width\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cLabel fx:id\u003d\"foodName\" styleClass\u003d\"card_big_label\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cLabel fx:id\u003d\"calorie\" styleClass\u003d\"card_small_label\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cLabel fx:id\u003d\"gi\" styleClass\u003d\"card_small_label\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cLabel fx:id\u003d\"sugar\" styleClass\u003d\"card_small_label\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    \u003cLabel fx:id\u003d\"fat\" styleClass\u003d\"card_small_label\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 22
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "whneo97": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "         title\u003d\"SugarMummy App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    \u003cScene fx:id\u003d\"scene\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cVBox fx:id\u003d\"mainWindowPlaceholder\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        \u003cVBox styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" minHeight\u003d\"270\" prefHeight\u003d\"270\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "          \u003cStackPane fx:id\u003d\"mainDisplayPanePlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "-": 53,
      "scwaterbear": 1,
      "whneo97": 3
    }
  },
  {
    "path": "src/main/resources/view/Profile.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cHBox fx:id\u003d\"profile\" HBox.hgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"76.0\" fitWidth\u003d\"76.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" pannable\u003d\"true\" styleClass\u003d\"profile-scroll\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003cVBox maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" maxHeight\u003d\"Infinity\" styleClass\u003d\"profile-name\" text\u003d\"Label\" wrapText\u003d\"true\" VBox.vgrow\u003d\"always\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"description\" alignment\u003d\"TOP_LEFT\" contentDisplay\u003d\"TOP\" maxHeight\u003d\"Infinity\" styleClass\u003d\"profile-asl\" text\u003d\"Label\" wrapText\u003d\"true\" VBox.vgrow\u003d\"always\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        \u003cInsets top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 37
    }
  },
  {
    "path": "src/main/resources/view/RecordListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        \u003cLabel fx:id\u003d\"recordType\" text\u003d\"\\$recordType\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cLabel fx:id\u003d\"concentration\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cLabel fx:id\u003d\"height\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "      \u003cLabel fx:id\u003d\"weight\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 35
    }
  },
  {
    "path": "src/main/resources/view/RecordListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "  \u003cListView fx:id\u003d\"recordListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" wrapText\u003d\"true\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "whneo97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.storage.JsonCalendarStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.storage.JsonFoodListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.storage.JsonRecordListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.storage.bio.JsonUserListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        JsonUserListStorage userListStorage \u003d new JsonUserListStorage(temporaryFolder.resolve(\"userList.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        JsonFoodListStorage jsonFoodListStorage \u003d new JsonFoodListStorage(temporaryFolder.resolve(\"foodList.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        JsonRecordListStorage jsonRecordListStorage \u003d new JsonRecordListStorage("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            temporaryFolder.resolve(\"recordList.json\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        JsonCalendarStorage jsonCalendarStorage \u003d new JsonCalendarStorage(temporaryFolder.resolve(\"eventlist.json\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                temporaryFolder.resolve(\"reminderlist.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, userListStorage,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                jsonFoodListStorage, jsonRecordListStorage, jsonCalendarStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //TODO: rewrite test with different add command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                new JsonAddressBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e - the feedback message is equal to {@code"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * expectedMessage} \u003cbr\u003e - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getUserList(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                new UniqueFoodList(), new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is thrown \u003cbr\u003e - the resulting error"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * message is equal to {@code expectedMessage} \u003cbr\u003e - the internal model manager state is the same as that in {@code"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 13,
      "jyx11011": 6,
      "-": 123,
      "scwaterbear": 28,
      "whneo97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AchvmCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.commands.achvm.AchvmCommand.SHOWING_ACHVM_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.achvm.AchvmCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "class AchvmCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute_achvm_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_ACHVM_MESSAGE, false, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertCommandSuccess(new AchvmCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UserList(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new FoodMap(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        new RecordBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void execute_duplicateRecord_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "jyx11011": 2,
      "-": 24,
      "whneo97": 3,
      "scwaterbear": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Bmi;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Concentration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Height;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Weight;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private LocalDate ld \u003d LocalDate.of(1970, Month.JANUARY, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private LocalTime lt \u003d LocalTime.of(8, 0, 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private DateTime dt \u003d new DateTime(ld, lt);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private BloodSugar bs \u003d new BloodSugar(new Concentration(\"12.34\"), dt);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private Bmi bmi \u003d new Bmi(new Height(\"12.34\"), new Weight(\"23.34\"), dt);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void execute_recordAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        ModelStubAcceptingRecordAdded modelStub \u003d new ModelStubAcceptingRecordAdded();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(bs).execute(modelStub);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, bs), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertEquals(Arrays.asList(bs), modelStub.recordsAdded);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void execute_duplicateRecord_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(bs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRecord(bs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_RECORD, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        AddCommand addBloodSugarCommand \u003d new AddCommand(bs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        AddCommand addBmiCommand \u003d new AddCommand(bmi);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(addBloodSugarCommand.equals(addBloodSugarCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        AddCommand addBloodSugarCommandCopy \u003d new AddCommand(bs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(addBloodSugarCommand.equals(addBloodSugarCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(addBloodSugarCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(addBloodSugarCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(addBloodSugarCommand.equals(addBmiCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setFoodList(UniqueFoodList newFoodList) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void deleteFood(Food food) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public UniqueFoodList getUniqueFoodListObject() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void addRecord(Record toAdd) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public UniqueRecordList getUniqueRecordListObject() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public ObservableList\u003cRecord\u003e getFilterRecordList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public boolean hasRecord(Record toAdd) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void deleteRecord(Record record) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilterFoodList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void setRecordList(UniqueRecordList newRecordList) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setUserList(ReadOnlyUserList userList) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public boolean bioExists() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public ReadOnlyUserList getUserList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Path getUserListFilePath() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public boolean hasUser(User user) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void addUser(User user) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public ObservableList\u003cUser\u003e getFilteredUserList() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void updateFilteredUserList(Predicate\u003cUser\u003e predicate) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public boolean hasCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void deleteCalendarEntry(CalendarEntry target) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void addCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setCalendarEntry(CalendarEntry target, CalendarEntry editedCalendarEntry) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEntryList() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setUser(User target, User editedUser) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setUserListFilePath(Path userListFilePath) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public AverageType getAverageType() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Aesthetics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Colour getFontColour() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setFontColour(Colour fontColour) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public RecordType getRecordType() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public void setAverageType(AverageType averageType) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public void setRecordType(RecordType recordType) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public void calculateAverageMap(AverageType averageType, RecordType recordType, int count) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public ObservableMap\u003cLocalDate, Double\u003e getAverageMap() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private class ModelStubAcceptingRecordAdded extends ModelStub {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        final ArrayList\u003cRecord\u003e recordsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return recordsAdded.stream().anyMatch(record::isSameRecord);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void addRecord(Record record) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            recordsAdded.add(record);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     */"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private class ModelStubWithRecord extends ModelStub {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        private final Record record;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        ModelStubWithRecord(Record record) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            this.record \u003d record;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return this.record.isSameRecord(record);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 41,
      "jyx11011": 34,
      "-": 172,
      "scwaterbear": 111,
      "whneo97": 70,
      "chen-xi-cx": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddFoodCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "class AddFoodCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Food food;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFoodCommand(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void execute_foodAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommandTest.ModelStubAcceptingFoodAdded modelStub \u003d new AddFoodCommandTest.ModelStubAcceptingFoodAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        CommandResult commandResult \u003d new AddFoodCommand(food).execute(modelStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(String.format(AddFoodCommand.MESSAGE_SUCCESS, food), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertEquals(Arrays.asList(food), modelStub.foodsAdded);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void execute_duplicateFood_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommand addFoodCommand \u003d new AddFoodCommand(validFood);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommandTest.ModelStub modelStub \u003d new AddFoodCommandTest.ModelStubWithFood(validFood);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertThrows(CommandException.class, AddFoodCommand.MESSAGE_DUPLICATE_FOOD, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            addFoodCommand.execute(modelStub));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Food yogurt \u003d new FoodBuilder().withFoodName(\"Yogurt\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Food water \u003d new FoodBuilder().withFoodName(\"water\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommand addYogurtCommand \u003d new AddFoodCommand(yogurt);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommand addWaterCommand \u003d new AddFoodCommand(water);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertTrue(addYogurtCommand.equals(addYogurtCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        AddFoodCommand addFoodCommandCopy \u003d new AddFoodCommand(yogurt);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertTrue(addYogurtCommand.equals(addFoodCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertFalse(addYogurtCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertFalse(addYogurtCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        assertFalse(addYogurtCommand.equals(addWaterCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addRecord(Record toAdd) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public UniqueRecordList getUniqueRecordListObject() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public ObservableList\u003cRecord\u003e getFilterRecordList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasRecord(Record toAdd) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void deleteRecord(Record record) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void deleteFood(Food food) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public UniqueFoodList getUniqueFoodListObject() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setFoodList(UniqueFoodList newFoodList) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilterFoodList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void setRecordList(UniqueRecordList newRecordList) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setUserList(ReadOnlyUserList userList) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public boolean bioExists() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public ReadOnlyUserList getUserList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Path getUserListFilePath() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public boolean hasUser(User user) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void addUser(User user) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public ObservableList\u003cUser\u003e getFilteredUserList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void updateFilteredUserList(Predicate\u003cUser\u003e predicate) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public boolean hasCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void deleteCalendarEntry(CalendarEntry target) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void addCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setCalendarEntry(CalendarEntry target, CalendarEntry editedCalendarEntry) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEntryList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setUser(User target, User editedUser) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setUserListFilePath(Path userListFilePath) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public AverageType getAverageType() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Aesthetics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Colour getFontColour() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setFontColour(Colour fontColour) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public RecordType getRecordType() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public void setAverageType(AverageType averageType) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public void setRecordType(RecordType recordType) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public void calculateAverageMap(AverageType averageType, RecordType recordType, int count) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public ObservableMap\u003cLocalDate, Double\u003e getAverageMap() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * A Model stub that contains a single food."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private class ModelStubWithFood extends AddFoodCommandTest.ModelStub {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        private final Food food;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        ModelStubWithFood(Food food) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.food \u003d food;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return this.food.isSameFood(food);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private class ModelStubAcceptingFoodAdded extends AddFoodCommandTest.ModelStub {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        final ArrayList\u003cFood\u003e foodsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            return foodsAdded.stream().anyMatch(food::isSameFood);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            foodsAdded.add(food);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 251,
      "jyx11011": 32,
      "whneo97": 71,
      "scwaterbear": 24,
      "chen-xi-cx": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AverageCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PARAMETER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.logic.parser.AverageCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "public class AverageCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    private AverageCommandParser parser \u003d new AverageCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseSuccess(parser, \" a/DAILY rt/BLOODSUGAR n/8\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new AverageCommand(AverageType.DAILY, RecordType.BLOODSUGAR, 8));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseSuccess(parser, \" a/weekly rt/BLOODSUGAR n/3\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new AverageCommand(AverageType.WEEKLY, RecordType.BLOODSUGAR, 3));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseSuccess(parser, \" a/MONTHLY rt/BLOODSUGAR n/1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new AverageCommand(AverageType.MONTHLY, RecordType.BLOODSUGAR, 1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void parse_optionalFieldAbsent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // missing count prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseSuccess(parser, \" a/DAILY rt/BLOODSUGAR\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new AverageCommand(AverageType.DAILY, RecordType.BLOODSUGAR, 5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseSuccess(parser, \" a/weekly rt/BLOODSUGAR\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new AverageCommand(AverageType.WEEKLY, RecordType.BLOODSUGAR, 5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseSuccess(parser, \" a/MONTHLY rt/BLOODSUGAR\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                new AverageCommand(AverageType.MONTHLY, RecordType.BLOODSUGAR, 5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AverageCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // missing average type prefix"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseFailure(parser, \" rt/BLOODSUGAR\", expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // missing record type prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseFailure(parser, \" a/DAILY\", expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // all prefixes missing prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // invalid average type"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseFailure(parser, \" a/YEARLY rt/BLOODSUGAR\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                String.format(MESSAGE_INVALID_PARAMETER, AverageCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                AverageCommand.MESSAGE_INVALID_AVGTYPE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // invalid record type"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseFailure(parser, \" a/WEEKLY rt/ANYHOW\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                String.format(MESSAGE_INVALID_PARAMETER, AverageCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                        AverageCommand.MESSAGE_INVALID_RECORDTYPE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        // invalid count type"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        assertParseFailure(parser, \" a/WEEKLY rt/BLOODSUGAR n/five\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                String.format(MESSAGE_INVALID_PARAMETER, AverageCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "                        AverageCommand.MESSAGE_INVALID_COUNT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AverageCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//import static seedu.address.logic.commands.AverageCommand.MESSAGE_NO_RECORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//public class AverageCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//    public void execute_zeroRecordType_throwsCommandException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//        AverageCommand command \u003d new AverageCommand(AverageType.DAILY,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//                RecordType.HEIGHTANDWEIGHT, 5);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//        assertThrows(CommandException.class, String.format(MESSAGE_NO_RECORD,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//                RecordType.HEIGHTANDWEIGHT), () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "chen-xi-cx": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BioCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static seedu.address.logic.commands.bio.BioCommand.SHOWING_BIO_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.bio.BioCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "class BioCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute_bio_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_BIO_MESSAGE, false, true,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertCommandSuccess(new BioCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UserList(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UserList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                new UniqueFoodList(), new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "jyx11011": 3,
      "-": 30,
      "whneo97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public static void showRecordAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertTrue(targetIndex.getZeroBased() \u003c model.getFilterRecordList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Record record \u003d model.getFilterRecordList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        final String[] splitName \u003d record.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        model.updateFilteredRecordList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(1, model.getFilterRecordList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "scwaterbear": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UserList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UniqueFoodList(), new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Record recordToDelete \u003d model.getRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RECORD_SUCCESS, recordToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new UserList(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                new UniqueFoodList(), new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        expectedModel.deleteRecord(recordToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilterRecordList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    ////        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Record recordToDelete \u003d model.getFilterRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RECORD_SUCCESS, recordToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                new UserList(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //            new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        expectedModel.deleteRecord(recordToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    ////        showNoRecord(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    ////        showRecordAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Index outOfBoundIndex \u003d INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFilterRecordList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_RECORD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private void showNoRecord(Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        model.updateFilteredRecordList(p -\u003e false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(model.getFilterRecordList().isEmpty());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "jyx11011": 2,
      "-": 54,
      "scwaterbear": 57,
      "whneo97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UserList(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UniqueFoodList(), new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECORD, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UserList(), new UniqueFoodList(), new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UserList(), new UniqueFoodList(), new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECORD, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UserList(), new UniqueFoodList(), new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UserList(), new UniqueFoodList(), new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_RECORD, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    ////        showPersonAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Index outOfBoundIndex \u003d INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFilterRecordList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_RECORD, DESC_AMY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_RECORD, copyDescriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_RECORD, DESC_AMY)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_RECORD, DESC_BOB)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 5,
      "jyx11011": 6,
      "-": 137,
      "scwaterbear": 31,
      "whneo97": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECORDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UserList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UniqueFoodList(), new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UserList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UniqueFoodList(), new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "jyx11011": 3,
      "-": 78,
      "scwaterbear": 4,
      "whneo97": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new UserList(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new UserList(), new UniqueFoodList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new UniqueRecordList(), new Calendar());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "jyx11011": 3,
      "-": 34,
      "whneo97": 4,
      "scwaterbear": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyCalendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.ReadOnlyUserList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.aesthetics.Colour;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.User;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.record.RecordType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "import seedu.address.model.statistics.AverageType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "class ReminderCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ReminderCommand(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void execute_reminderAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ModelStubAcceptingReminderAdded modelStub \u003d new ModelStubAcceptingReminderAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder validReminder \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        CommandResult commandResult \u003d new ReminderCommand(validReminder).execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(String.format(ReminderCommand.MESSAGE_SUCCESS, validReminder), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        //assertEquals(Arrays.asList(validReminder), modelStub.remindersAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void execute_duplicateReminder_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder validReminder \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ReminderCommand reminderCommand \u003d new ReminderCommand(validReminder);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithReminder(validReminder);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(CommandException.class, ReminderCommand.MESSAGE_DUPLICATE_REMINDER,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                () -\u003e reminderCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder insulinInjection \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder wakeUp \u003d new ReminderBuilder().withDescription(\"Wake up\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ReminderCommand insulinInjectionCommand \u003d new ReminderCommand(insulinInjection);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ReminderCommand wakeUpCommand \u003d new ReminderCommand(wakeUp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(insulinInjection.equals(insulinInjection));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ReminderCommand insulinInjectionCommandCopy \u003d new ReminderCommand(insulinInjection);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(insulinInjectionCommand.equals(insulinInjectionCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(insulinInjectionCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(insulinInjectionCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different reminders -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(insulinInjectionCommand.equals(wakeUpCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addRecord(Record toAdd) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public UniqueRecordList getUniqueRecordListObject() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public ObservableList\u003cRecord\u003e getFilterRecordList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasRecord(Record toAdd) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void deleteRecord(Record record) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void deleteFood(Food food) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public UniqueFoodList getUniqueFoodListObject() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void setFoodList(UniqueFoodList newFoodList) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilterFoodList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        public void setRecordList(UniqueRecordList newRecordList) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setUserList(ReadOnlyUserList userList) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public boolean bioExists() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public ReadOnlyUserList getUserList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Path getUserListFilePath() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public boolean hasUser(User user) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void addUser(User user) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public ObservableList\u003cUser\u003e getFilteredUserList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void updateFilteredUserList(Predicate\u003cUser\u003e predicate) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public boolean hasCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void deleteCalendarEntry(CalendarEntry target) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void addCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void setCalendarEntry(CalendarEntry target, CalendarEntry editedCalendarEntry) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEntryList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setUser(User target, User editedUser) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setUserListFilePath(Path userListFilePath) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public AverageType getAverageType() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Aesthetics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public Colour getFontColour() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        public void setFontColour(Colour fontColour) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public RecordType getRecordType() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public void setAverageType(AverageType averageType) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public void setRecordType(RecordType recordType) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public void calculateAverageMap(AverageType averageType, RecordType recordType, int count) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        public ObservableMap\u003cLocalDate, Double\u003e getAverageMap() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chen-xi-cx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * A Model stub that contains a single reminder."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private class ModelStubWithReminder extends ModelStub {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        private final Reminder reminder;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ModelStubWithReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public boolean hasCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            requireNonNull(calendarEntry);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return this.reminder.isSameCalendarEntry(calendarEntry);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * A Model stub that always accept the reminder being added."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private class ModelStubAcceptingReminderAdded extends ModelStub {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        final ArrayList\u003cReminder\u003e remindersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public boolean hasCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            requireNonNull(calendarEntry);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return remindersAdded.stream().anyMatch(calendarEntry::isSameCalendarEntry);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public void addCalendarEntry(CalendarEntry calendarEntry) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            requireNonNull(calendarEntry);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            remindersAdded.add((Reminder) calendarEntry);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 35,
      "jyx11011": 253,
      "whneo97": 72,
      "scwaterbear": 22,
      "chen-xi-cx": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Bmi;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Concentration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Height;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Weight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalDate ld \u003d LocalDate.of(1970, Month.JANUARY, 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalTime lt \u003d LocalTime.of(8, 0, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        DateTime dt \u003d new DateTime(ld, lt);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //bloodsugar success"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        BloodSugar bs \u003d new BloodSugar(new Concentration(\"12.34\"), dt);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseSuccess(parser, \" rt/BLOODSUGAR con/12.34 dt/1970-01-01 08:00\", new AddCommand(bs));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //bmi success"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Bmi bmi \u003d new Bmi(new Height(\"12.34\"), new Weight(\"23.34\"), dt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseSuccess(parser, \" rt/BMI h/12.34 w/23.45 dt/1970-01-01 08:00\", new AddCommand(bmi));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(bmi));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // multiple names - last name accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // multiple tags - all accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        // zero tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseFailure(parser, \" rt/BLOODSUGAR dt/1970-01-01 08:00\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseFailure(parser, \" rt/BLOODSUGAR con/12.34\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseFailure(parser, \" rt/BMI w/1 h/1\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseFailure(parser, \" rt/BMI h/1 dt/1970-01-01 08:00\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseFailure(parser, \" rt/BMI w/1 dt/1970-01-01 08:00\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // missing name prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // missing phone prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // missing email prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // missing address prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // all prefixes missing"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, \" rt/BLOODSUGAR con/-1.23 dt/hello\", BloodSugar.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, \" rt/BMI h/-1 w/-1 dt/hello\", Bmi.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // invalid name"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // invalid phone"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // invalid email"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // invalid address"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // invalid tag"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        // non-empty preamble"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 1,
      "-": 33,
      "scwaterbear": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.achvm.AchvmCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.logic.commands.bio.BioCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.BloodSugar;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.Concentration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalDate ld \u003d LocalDate.of(1970, Month.JANUARY, 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        LocalTime lt \u003d LocalTime.of(8, 0, 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        DateTime dt \u003d new DateTime(ld, lt);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        BloodSugar bs \u003d new BloodSugar(new Concentration(\"12.34\"), dt);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        //        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(bs));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(\"add rt/BLOODSUGAR con/12.34 dt/1970-01-01 08:00\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertEquals(new AddCommand(bs), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_RECORD), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseCommand_bio() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertTrue(parser.parseCommand(BioCommand.COMMAND_WORD) instanceof BioCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(BioCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseCommand_achvm() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertTrue(parser.parseCommand(AchvmCommand.COMMAND_WORD) instanceof AchvmCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(AchvmCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 1,
      "-": 81,
      "scwaterbear": 18,
      "whneo97": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_RECORD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "scwaterbear": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_RECORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECORD;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        // phone"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        // email"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        // address"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        // tags"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                .build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        // no other valid values specified"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        // other valid values specified"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "scwaterbear": 2,
      "whneo97": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.DateOfBirth;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Goal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.MedicalCondition;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.OtherBioInfo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.ProfileDesc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"S23\\\u00275+\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"#male\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String INVALID_DATE_OF_BIRTH \u003d \"31/02/2019\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String INVALID_MEDICAL_CONDITION \u003d \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String INVALID_POSITIVEFLOAT_1 \u003d \"-1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String INVALID_POSITIVEFLOAT_2 \u003d \"123asb\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String INVALID_POSITIVEFLOAT_3 \u003d \"-1.asd\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String INVALID_POSITIVEFLOAT_4 \u003d \"asbd123\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    private static final String VALID_POSITIVEFLOAT \u003d \"12.34\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String VALID_PROFILE_DESC \u003d \"Sometimes I pretend I\u0027m a carrot.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String VALID_GENDER \u003d \"Female\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String VALID_DATE_OF_BIRTH \u003d \"02/01/2019\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String VALID_PHONE_1 \u003d \"123456\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String VALID_PHONE_2 \u003d \"987654\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String VALID_MEDICAL_CONDITION_1 \u003d \"Type II Diabetes\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String VALID_MEDICAL_CONDITION_2 \u003d \"High Cholesterol.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String VALID_GOAL_1 \u003d \"lose 5kg by 20/10/2019.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String VALID_GOAL_2 \u003d \"run 10km this week.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String VALID_OTHER_BIO_INFO \u003d \"dislikes potatoes.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertEquals(INDEX_FIRST_RECORD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertEquals(INDEX_FIRST_RECORD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseHeight_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseHeight((String) null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseWeight_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWeight((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseConcentration_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseConcentration((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseHeight_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_POSITIVEFLOAT_1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_POSITIVEFLOAT_2));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_POSITIVEFLOAT_3));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_POSITIVEFLOAT_4));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseWeight_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_POSITIVEFLOAT_1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_POSITIVEFLOAT_2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_POSITIVEFLOAT_3));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_POSITIVEFLOAT_4));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void parseConcentration_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseConcentration(INVALID_POSITIVEFLOAT_1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseConcentration(INVALID_POSITIVEFLOAT_2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseConcentration(INVALID_POSITIVEFLOAT_3));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseConcentration(INVALID_POSITIVEFLOAT_4));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //TODO: make these 6 tests pass"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseHeight_validValueWithoutWhitespace_returnsHeight() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Height expectedHeight \u003d new Height(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedHeight, ParserUtil.parseHeight(VALID_POSITIVEFLOAT));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseWeight_validValueWithoutWhitespace_returnsWeight() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Weight expectedWeight \u003d new Weight(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedWeight, ParserUtil.parseWeight(VALID_POSITIVEFLOAT));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseConcentration_validValueWithoutWhitespace_returnsConcentration() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Concentration expectedConcentration \u003d new Concentration(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedConcentration, ParserUtil.parseConcentration(VALID_POSITIVEFLOAT));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseHeight_validValueWithWhitespace_returnsTrimmedHeight() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String heightWithWhitespace \u003d WHITESPACE + VALID_POSITIVEFLOAT + WHITESPACE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Height expectedHeight \u003d new Height(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedHeight, ParserUtil.parseHeight(heightWithWhitespace));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseWeight_validValueWithWhitespace_returnsTrimmedWeight() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String weightWithWhitespace \u003d WHITESPACE + VALID_POSITIVEFLOAT + WHITESPACE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Weight expectedWeight \u003d new Weight(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedWeight, ParserUtil.parseWeight(weightWithWhitespace));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public void parseConcentration_validValueWithWhitespace_returnsTrimmedConcentration() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        String concentrationWithWhitespace \u003d WHITESPACE + VALID_POSITIVEFLOAT + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        Concentration expectedConcentration \u003d new Concentration(VALID_POSITIVEFLOAT);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        assertEquals(expectedConcentration, ParserUtil.parseConcentration(concentrationWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseProfileDesc_validValueWithoutWhitespace_returnsProfileDesc() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ProfileDesc expectedProfileDesc \u003d new ProfileDesc(VALID_PROFILE_DESC);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedProfileDesc, ParserUtil.parseProfileDesc(Optional.of(VALID_PROFILE_DESC)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseProfileDesc_validValueWithWhitespace_returnsTrimmedProfileDesc() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String profileDescWithWhitespace \u003d WHITESPACE + VALID_PROFILE_DESC + WHITESPACE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ProfileDesc expectedProfileDesc \u003d new ProfileDesc(VALID_PROFILE_DESC);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedProfileDesc, ParserUtil.parseProfileDesc(Optional.of(profileDescWithWhitespace)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseNric_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNric(Optional.of(INVALID_NRIC)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseNric_validValueWithoutWhitespace_returnsNric() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(Optional.of(VALID_NRIC)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseNric_validValueWithWhitespace_returnsTrimmedNric() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String nricWithWhitespace \u003d WHITESPACE + VALID_NRIC + WHITESPACE;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(Optional.of(nricWithWhitespace)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseGender_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGender(Optional.of(INVALID_GENDER)));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(Optional.of(VALID_GENDER)));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseGender_validValueWithWhitespace_returnsTrimmedGender() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String genderWithWhitespace \u003d WHITESPACE + VALID_GENDER + WHITESPACE;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(Optional.of(genderWithWhitespace)));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseDateOfBirth_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateOfBirth((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseDateOfBirth_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateOfBirth(Optional.of(INVALID_DATE_OF_BIRTH)));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseDateOfBirth_validValueWithoutWhitespace_returnsDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(Optional.of(VALID_DATE_OF_BIRTH)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseDateOfBirth_validValueWithWhitespace_returnsTrimmedDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String dateOfBirthWithWhitespace \u003d WHITESPACE + VALID_DATE_OF_BIRTH + WHITESPACE;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(Optional.of(dateOfBirthWithWhitespace)));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE_1);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE_1));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE_1 + WHITESPACE;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE_1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parsePhones_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhones(null));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parsePhones_collectionWithInvalidPhones_throwsParseException() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhones(Arrays.asList(VALID_PHONE_1, INVALID_PHONE)));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parsePhones_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhones(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parsePhones_collectionWithValidPhones_returnsPhoneSet() throws Exception {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cPhone\u003e actualPhoneList \u003d ParserUtil.parsePhones(Arrays.asList(VALID_PHONE_1, VALID_PHONE_2));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cPhone\u003e expectedPhoneList \u003d new ArrayList\u003cPhone\u003e(Arrays.asList(new Phone(VALID_PHONE_1),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                new Phone(VALID_PHONE_2)));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedPhoneList, actualPhoneList);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseGoal_validValueWithoutWhitespace_returnsGoal() throws Exception {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Goal expectedGoal \u003d new Goal(VALID_GOAL_1);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedGoal, ParserUtil.parseGoal(VALID_GOAL_1));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseGoal_validValueWithWhitespace_returnsTrimmedGoal() throws Exception {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String goalWithWhitespace \u003d WHITESPACE + VALID_GOAL_1 + WHITESPACE;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Goal expectedGoal \u003d new Goal(VALID_GOAL_1);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedGoal, ParserUtil.parseGoal(goalWithWhitespace));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseGoals_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGoals(null));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseGoals_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertTrue(ParserUtil.parseGoals(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseGoals_collectionWithValidGoals_returnsGoalSet()"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cGoal\u003e actualGoalList \u003d ParserUtil.parseGoals("
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Arrays.asList(VALID_GOAL_1, VALID_GOAL_2));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cGoal\u003e expectedGoalList \u003d new ArrayList\u003cGoal\u003e("
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Arrays.asList(new Goal(VALID_GOAL_1),"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                new Goal(VALID_GOAL_2)));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedGoalList, actualGoalList);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseMedicalCondition_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMedicalCondition(INVALID_MEDICAL_CONDITION));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseMedicalCondition_validValueWithoutWhitespace_returnsMedicalCondition() throws Exception {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        MedicalCondition expectedMedicalCondition \u003d new MedicalCondition(VALID_MEDICAL_CONDITION_1);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedMedicalCondition, ParserUtil.parseMedicalCondition(VALID_MEDICAL_CONDITION_1));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseMedicalCondition_validValueWithWhitespace_returnsTrimmedMedicalCondition() throws Exception {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String medicalConditionWithWhitespace \u003d WHITESPACE + VALID_MEDICAL_CONDITION_1 + WHITESPACE;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        MedicalCondition expectedMedicalCondition \u003d new MedicalCondition(VALID_MEDICAL_CONDITION_1);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedMedicalCondition, ParserUtil.parseMedicalCondition(medicalConditionWithWhitespace));"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseMedicalConditions_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMedicalConditions(null));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseMedicalConditions_collectionWithInvalidMedicalConditions_throwsParseException() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMedicalConditions(Arrays.asList("
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                VALID_MEDICAL_CONDITION_1, INVALID_MEDICAL_CONDITION)));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseMedicalConditions_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMedicalConditions(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseMedicalConditions_collectionWithValidMedicalConditions_returnsMedicalConditionSet()"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cMedicalCondition\u003e actualMedicalConditionList \u003d ParserUtil.parseMedicalConditions("
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Arrays.asList(VALID_MEDICAL_CONDITION_1, VALID_MEDICAL_CONDITION_2));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        List\u003cMedicalCondition\u003e expectedMedicalConditionList \u003d new ArrayList\u003cMedicalCondition\u003e("
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Arrays.asList(new MedicalCondition(VALID_MEDICAL_CONDITION_1),"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        new MedicalCondition(VALID_MEDICAL_CONDITION_2)));"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedMedicalConditionList, actualMedicalConditionList);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseOtherBioInfo_validValueWithoutWhitespace_returnsOtherBioInfo() throws Exception {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        OtherBioInfo expectedOtherBioInfo \u003d new OtherBioInfo(VALID_OTHER_BIO_INFO);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedOtherBioInfo, ParserUtil.parseOtherBioInfo(Optional.of(VALID_OTHER_BIO_INFO)));"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void parseOtherBioInfo_validValueWithWhitespace_returnsTrimmedOtherBioInfo() throws Exception {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String otherBioInfoWithWhitespace \u003d WHITESPACE + VALID_OTHER_BIO_INFO + WHITESPACE;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        OtherBioInfo expectedOtherBioInfo \u003d new OtherBioInfo(VALID_OTHER_BIO_INFO);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(expectedOtherBioInfo, ParserUtil.parseOtherBioInfo(Optional.of(otherBioInfoWithWhitespace)));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // Todo to remove if not used."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "scwaterbear": 85,
      "whneo97": 257
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import static seedu.sgm.model.food.TypicalFoods.FOODS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.model.bio.UserList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        UniqueFoodList foodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        foodList.setFoods(FOODS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        UniqueRecordList recordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        UserList userList \u003d new UserList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Calendar calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, userList, foodList, recordList, calendar);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, userList, foodList, recordList,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                calendar);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, userList, foodList,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                recordList, calendar)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, userList, foodList, recordList,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                calendar)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, userList, foodList,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                recordList, calendar)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 4,
      "jyx11011": 8,
      "-": 129,
      "whneo97": 4,
      "scwaterbear": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/DateTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDate validDate \u003d LocalDate.of(2020, 1, 20);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalTime validTime \u003d LocalTime.of(12, 30);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DateTime validDateTime \u003d new DateTime(validDate, validTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(null, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(null, validTime));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(validDate, null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void getDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(validDate, validDateTime.getDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void getTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(validTime, validDateTime.getTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void getDayOfWeek() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(DayOfWeek.MONDAY, validDateTime.getDayOfWeek());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void getDayOfWeekString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"Monday\", validDateTime.getDayOfWeekString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"2020-01-20 12:30\", validDateTime.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Appointment\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Insulin injection before lunch\")); // long appointment"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.APPOINTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.AUTO_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DATE_FEB10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DATE_MAR22;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TIME_EVEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TIME_MORN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    void isSameEvent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.isSameEvent(APPOINTMENT));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.isSameEvent(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description and date, time -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(APPOINTMENT).withDescription(\"description\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .withDateTime(DATE_MAR22, TIME_MORN).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different date and time -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withDateTime(DATE_MAR22, TIME_EVEN).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withDescription(\"description\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same description and date, time, different endingDateTime -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withEndingDateTime(null).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same description and date, time, different autoReminder -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withAutoReminder(null).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withAutoReminder(AUTO_REMINDER).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.isSameEvent(editedEvent));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event appointmentCopy \u003d new EventBuilder(APPOINTMENT).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.equals(appointmentCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(APPOINTMENT.equals(APPOINTMENT));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(MEETING));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(APPOINTMENT).withDescription(\"description\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(editedEvent));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different date, time -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withDateTime(DATE_FEB10, TIME_EVEN).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(editedEvent));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different ending date time -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withEndingDateTime(DATE_FEB10, TIME_EVEN).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(editedEvent));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different autoReminder -\u003e return false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedEvent \u003d new EventBuilder(APPOINTMENT).withAutoReminder(AUTO_REMINDER).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(APPOINTMENT.equals(editedEvent));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/ReminderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.BUY_INSULIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.DATE_DEC20;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.DATE_JAN04;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.LUNCH_INSULIN_INJECTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.ONCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.TIME_EVEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.TIME_MORN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.WEEKLY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ReminderTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void isSamePersonReminder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(LUNCH_INSULIN_INJECTION.isSameReminder(LUNCH_INSULIN_INJECTION));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.isSameReminder(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description and date, time -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withDescription(\"description\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .withDateTime(DATE_DEC20, TIME_MORN).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.isSameReminder(editedReminder));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different date and time -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withDateTime(DATE_JAN04, TIME_EVEN).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.isSameReminder(editedReminder));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withDescription(\"description\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.isSameReminder(editedReminder));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same description and date, time, different repetition -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withRepetition(WEEKLY).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(LUNCH_INSULIN_INJECTION.isSameReminder(editedReminder));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder lunchInsulinInjectionCopy \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(LUNCH_INSULIN_INJECTION.equals(lunchInsulinInjectionCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertTrue(LUNCH_INSULIN_INJECTION.equals(LUNCH_INSULIN_INJECTION));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different reminder -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(BUY_INSULIN));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Reminder editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withDescription(\"description\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(editedReminder));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different date, time -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withDateTime(DATE_DEC20, TIME_EVEN).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(editedReminder));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        // different repetition -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        editedReminder \u003d new ReminderBuilder(LUNCH_INSULIN_INJECTION).withRepetition(ONCE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertFalse(LUNCH_INSULIN_INJECTION.equals(editedReminder));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/BloodSugarTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class BloodSugarTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/BmiTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class BmiTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/ConcentrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class ConcentrationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Concentration(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_invalidConcentration_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String invalidConcentration \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Concentration(invalidConcentration));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void isValidConcentration() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Concentration.isValidConcentration(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // invalid concentration"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Concentration.isValidConcentration(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Concentration.isValidConcentration(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Concentration.isValidConcentration(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Concentration.isValidConcentration(\"peter\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Concentration.isValidConcentration(\"-2323\")); // negative double"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // valid concentration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Concentration.isValidConcentration(\"0.12\")); // ≤1 double"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Concentration.isValidConcentration(\"12.34\")); // ≥1 double"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Concentration.isValidConcentration(\"10000\")); // positive"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Concentration.isValidConcentration(\"0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/HeightTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class HeightTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Height(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_invalidHeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String invalidHeight \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Height(invalidHeight));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void isValidHeight() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Height.isValidHeight(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Height.isValidHeight(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Height.isValidHeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Height.isValidHeight(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Height.isValidHeight(\"peter\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Height.isValidHeight(\"-2323\")); // negative double"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // valid height"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Height.isValidHeight(\"0.12\")); // ≤1 double"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Height.isValidHeight(\"12.34\")); // ≥1 double"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Height.isValidHeight(\"10000\")); // positive"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Height.isValidHeight(\"0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/RecordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class RecordTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/WeightTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "public class WeightTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Weight(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void constructor_invalidWeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        String invalidWeight \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Weight(invalidWeight));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public void isValidWeight() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Weight.isValidWeight(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Weight.isValidWeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"peter\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"-2323\")); // negative double"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"0.12\")); // ≤1 double"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"12.34\")); // ≥1 double"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"10000\")); // positive"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "scwaterbear": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.address.storage.bio.JsonUserListStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        JsonUserListStorage userListStorage \u003d new JsonUserListStorage(getTempFilePath(\"userList\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        JsonFoodListStorage jsonFoodListStorage \u003d new JsonFoodListStorage(getTempFilePath(\"fl\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "        JsonRecordListStorage jsonRecordListStorage \u003d new JsonRecordListStorage(getTempFilePath(\"rl\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        JsonCalendarStorage jsonCalendarStorage \u003d new JsonCalendarStorage(getTempFilePath(\"el\"), getTempFilePath(\"rl\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, userListStorage, jsonFoodListStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            jsonRecordListStorage, jsonCalendarStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 1,
      "jyx11011": 2,
      "-": 67,
      "whneo97": 3,
      "scwaterbear": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A utility class to help with building Event objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Appointment\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DEFAULT_DATE \u003d LocalDate.of(2020, 1, 10);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime DEFAULT_TIME \u003d LocalTime.of(14, 45);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime DEFAULT_ENDING_TIME \u003d LocalTime.of(16, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder DEFAULT_AUTO_REMINDER \u003d new Reminder(new Description(\"auto reminder\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new DateTime(DEFAULT_DATE, LocalTime.of(13, 20)), Repetition.Once);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cDateTime\u003e endingDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cReminder\u003e autoReminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATE, DEFAULT_TIME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        endingDateTime \u003d Optional.of(new DateTime(DEFAULT_DATE, DEFAULT_ENDING_TIME));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        autoReminder \u003d Optional.of(DEFAULT_AUTO_REMINDER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code eventToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dateTime \u003d eventToCopy.getDateTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        endingDateTime \u003d eventToCopy.getEndingDateTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        autoReminder \u003d eventToCopy.getAutoReminder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code Description} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder withDateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.dateTime \u003d new DateTime(date, time);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code endingDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder withEndingDateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.endingDateTime \u003d Optional.ofNullable(new DateTime(date, time));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code endingDateTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder withEndingDateTime(DateTime endingDateTime) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.endingDateTime \u003d Optional.ofNullable(endingDateTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code autoReminder} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventBuilder withAutoReminder(Reminder autoReminder) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.autoReminder \u003d Optional.ofNullable(autoReminder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Build a event."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a event."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event event \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        event.setEndingDateTime(endingDateTime);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        event.setAutoReminder(autoReminder);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FoodBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Calorie;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Fat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.FoodType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Gi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Sugar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a utility class to help with building Food objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_FOOD_NAME \u003d \"FOOD\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_CALORIE \u003d \"34.0\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_GI \u003d \"10.0\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_SUGAR \u003d \"1.7\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_FAT \u003d \"0.4\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"nsv\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private FoodName foodName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Calorie calorie;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Gi gi;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Sugar sugar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private Fat fat;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    private FoodType foodType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Initializes the FoodBuilder with the default data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d new FoodName(DEFAULT_FOOD_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d new Calorie(DEFAULT_CALORIE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d new Gi(DEFAULT_GI);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d new Sugar(DEFAULT_SUGAR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d new Fat(DEFAULT_FAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.foodType \u003d FoodType.getFrom(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"The type cannot be wrong.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d foodToCopy.getFoodName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d foodToCopy.getCalorie();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d foodToCopy.getGi();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d foodToCopy.getSugar();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d foodToCopy.getFat();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodType \u003d foodToCopy.getFoodType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code FoodName} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFoodName(String foodName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.foodName \u003d new FoodName(foodName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Calorie} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withCalorie(String calorie) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.calorie \u003d new Calorie(calorie);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Gi} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withGi(String gi) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.gi \u003d new Gi(gi);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Sugar} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withSugar(String sugar) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.sugar \u003d new Sugar(sugar);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFat(String fat) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        this.fat \u003d new Fat(fat);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     * Sets the {@code Fat} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public FoodBuilder withFoodType(String foodType) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            this.foodType \u003d FoodType.getFrom(foodType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "            assert false : \"The type cannot be wrong.\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        return new Food(foodName, calorie, gi, sugar, fat, foodType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public static String getAddCommand(Record record) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        return AddCommand.COMMAND_WORD + \" \" + getRecordDetails();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    public static String getRecordDetails() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        sb.append(PREFIX_BLOODSUGAR_CONCENTRATION + \"12.34\" + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        sb.append(PREFIX_DATETIME + \"datetime\" + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "scwaterbear": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ReminderBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* A utility class to help with building Reminder objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ReminderBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Insulin injection\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DEFAULT_DATE \u003d LocalDate.of(2019, 10, 12);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime DEFAULT_TIME \u003d LocalTime.of(11, 30);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Repetition DEFAULT_REPETITION \u003d Repetition.Daily;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Repetition repetition;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATE, DEFAULT_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        repetition \u003d DEFAULT_REPETITION;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Initializes the ReminderBuilder with the data of {@code reminderToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderBuilder(Reminder reminderToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        description \u003d reminderToCopy.getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dateTime \u003d reminderToCopy.getDateTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        repetition \u003d reminderToCopy.getRepetition();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code Description} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderBuilder withDateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.dateTime \u003d new DateTime(date, time);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets the {@code repetition} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ReminderBuilder withRepetition(Repetition repetition) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.repetition \u003d repetition;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Reminder build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new Reminder(description, dateTime, repetition);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DATE_FEB10 \u003d LocalDate.of(2020, 2, 10);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DATE_MAR22 \u003d LocalDate.of(2020, 3, 22);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime TIME_MORN \u003d LocalTime.of(7, 45);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime TIME_EVEN \u003d LocalTime.of(19, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder AUTO_REMINDER \u003d new Reminder(new Description(\"description\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            new DateTime(DATE_FEB10, TIME_EVEN), Repetition.Once);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Event APPOINTMENT \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Event MEETING \u003d new EventBuilder().withDescription(\"Team meeting\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDateTime(DATE_MAR22, TIME_MORN).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFoods.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "import seedu.sgm.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " * This is a utility class containing a list of {@code Food} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "public class TypicalFoods {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO \u003d new FoodBuilder().withFoodName(\"Potatodfafadfafadf\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA \u003d new FoodBuilder().withFoodName(\"Banana\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN \u003d new FoodBuilder().withFoodName(\"Chicken\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS \u003d new FoodBuilder().withFoodName(\"Potato chips\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE \u003d new FoodBuilder().withFoodName(\"Chicken Rice\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI2 \u003d new FoodBuilder().withFoodName(\"Broccoli2\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO2 \u003d new FoodBuilder().withFoodName(\"Potato2\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA2 \u003d new FoodBuilder().withFoodName(\"Banana2\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN2 \u003d new FoodBuilder().withFoodName(\"Chicken2\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS2 \u003d new FoodBuilder().withFoodName(\"Potato chips2\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE2 \u003d new FoodBuilder().withFoodName(\"Chicken Rice2\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BROCCOLI3 \u003d new FoodBuilder().withFoodName(\"Broccoli3\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO3 \u003d new FoodBuilder().withFoodName(\"Potato3\").withFoodType(\"sv\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food BANANA3 \u003d new FoodBuilder().withFoodName(\"Banana3\").withFoodType(\"f\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN3 \u003d new FoodBuilder().withFoodName(\"Chicken3\").withFoodType(\"p\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food POTATO_CHIPS3 \u003d new FoodBuilder().withFoodName(\"Potato chips3\").withFoodType(\"s\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final Food CHICKEN_RICE3 \u003d new FoodBuilder().withFoodName(\"Chicken Rice3\").withFoodType(\"m\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "    public static final List\u003cFood\u003e FOODS \u003d new ArrayList\u003c\u003e(Arrays.asList(new Food[]{BROCCOLI, POTATO, BANANA, CHICKEN,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        POTATO_CHIPS, CHICKEN_RICE, BROCCOLI2, POTATO2, BANANA2, CHICKEN2, POTATO_CHIPS2, CHICKEN_RICE2, BROCCOLI3,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "        POTATO3, BANANA3, CHICKEN3, POTATO_CHIPS3, CHICKEN_RICE3}));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhangHuafan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhangHuafan": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Index INDEX_FIRST_RECORD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Index INDEX_SECOND_RECORD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    public static final Index INDEX_THIRD_RECORD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "scwaterbear": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalReminders.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import seedu.address.model.calendar.Repetition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A utility class containing a list of {@code Reminder} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TypicalReminders {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DATE_DEC20 \u003d LocalDate.of(2019, 12, 20);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalDate DATE_JAN04 \u003d LocalDate.of(2020, 1, 4);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime TIME_MORN \u003d LocalTime.of(7, 45);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime TIME_NOON \u003d LocalTime.of(11, 30);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final LocalTime TIME_EVEN \u003d LocalTime.of(18, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Repetition DAILY \u003d Repetition.Daily;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Repetition WEEKLY \u003d Repetition.Weekly;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Repetition ONCE \u003d Repetition.Once;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder LUNCH_INSULIN_INJECTION \u003d new ReminderBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDescription(\"Lunch insulin injection\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDateTime(DATE_DEC20, TIME_NOON).withRepetition(DAILY).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder DINNER_INSULIN_INJECTION \u003d new ReminderBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDescription(\"Dinner insulin injection\").withDateTime(DATE_DEC20, TIME_EVEN)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withRepetition(DAILY).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder BUY_INSULIN \u003d new ReminderBuilder().withDescription(\"Buy insulin\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDateTime(DATE_JAN04, TIME_MORN).withRepetition(ONCE).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final Reminder CHECK_WEEKLY_SUMMARY \u003d new ReminderBuilder().withDescription(\"Check weekly summary\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            .withDateTime(DATE_DEC20, TIME_EVEN).withRepetition(WEEKLY).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TypicalReminders() {} // prevents instantiation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static List\u003cReminder\u003e getTypicalReminders() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LUNCH_INSULIN_INJECTION, DINNER_INSULIN_INJECTION, BUY_INSULIN,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                CHECK_WEEKLY_SUMMARY));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 42
    }
  },
  {
    "path": "stylesheets/MyTheme.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".blue {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-control-inner-background: transparent;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: rgba(255, 255, 0, 0.2);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: #FF00FF;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /*-fx-table-cell-border-color: transparent;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /*-fx-table-header-border-color: transparent;*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".v-box {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".card_big_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Candara\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 6;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".card_small_label {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".profile-name {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": " }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".profile-asl {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".bio-table {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".bio-table .table-row-cell {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".field-column {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Arial\" !important;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt !important;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-style: italic !important;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-weight: bold !important;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".data-column {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Arial\" !important;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt !important;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".field-column .label {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Arial\" !important;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt !important;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-style: italic !important;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".data-column .label{"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Arial\" !important;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 10pt !important;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/*"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".profile-scroll {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background: transparent !important;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent !important;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: transparent !important;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "whneo97"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "scwaterbear"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 405,
      "scwaterbear": 30
    }
  }
]
