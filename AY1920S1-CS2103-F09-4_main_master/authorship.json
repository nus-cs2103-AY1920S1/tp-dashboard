[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "\u003d Insurelytics"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103-F09-4/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103-F09-4/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-F09-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-F09-4/main/badge.svg?branch\u003dmaster[Coverage"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "Too many clients to keep track of? Not sure which insurance policies to recommended to your potential customers? Not"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "to worry, Insurelytics can help you with that!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "* Insurelytics is a client tracking/management application for insurance agents."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "* Keep track of your clients\u0027 information by storing them in our application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "* Generate statistical reports and analytics to help you out with your sales performance."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "* Our application is geared towards users who prefer typing over mouse actions, so interactions with our application is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "mainly keyboard based."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "* This project is a based off the AddressBook-Level3 project, created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 3,
      "ybchen97": 9,
      "-": 23
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Insurelytics was developed by the https://github.com/AY1920S1-CS2103-F09-4/main[cinnamon-agents] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d\u003d Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Role: Lecturer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d\u003d Keith Sim"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "image::kthSim.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "{empty}[https://github.com/kthSim[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Role: Teaching Assistant"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d\u003d Chaitanya Baranwal"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "image::chaitanyabaranwal.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "{empty}[http://chaitanyabaranwal.netlify.com[homepage]]{empty}[http://github.com/chaitanyabaranwal[github]][\u003c\u003cChaitanyaBaranwal#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Responsibilities: Team Lead, Undo/Redo"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d\u003d Oliver Cheok"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "image::olivercheok20.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "{empty}[http://github.com/olivercheok20[github]] [\u003c\u003cOliverCheok#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Responsibilities: Documentation, Integration, Search function"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d\u003d Chow Yi Yin"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "image::chowyiyin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "{empty}[http://github.com/chowyiyin[github]] [\u003c\u003cChowYiYin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Responsibilities: Testing, Scheduling and Tracking, Input Validation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d\u003d Chen Yuan Bo"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "image::ybchen97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "{empty}[https://ybchen97.github.io/[homepage]][http://github.com/ybchen97[github]] [\u003c\u003cChenYuanBo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Responsibilities: Code Quality, Intellij Expert, Recycling Bin"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d\u003d Larry Law"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "image::larrylawl.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "{empty}[http://github.com/larrylawl[github]] [\u003c\u003cLarryLaw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Responsibilities: Deliverables \u0026 deadlines, JavaFX Expert, Visual Representation"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 37,
      "-": 34
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-F09-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Email us* : You can also reach us at `chaitanyabaranwal@ymail.com`, `yiyin.chow@gmail.com`, `olivercheok20@gmail.com`, `larry_law97@hotmail.com`, `yuanbo.chen97@gmail.com`"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "// tag::merging[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Merging Feature"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "The merging mechanism is facilitated by abstract classes `MergeCommand`, `DoNotMergeCommand`, `MergeConfirmedCommand` and `MergeRejectedCommand` and their child classes, which implement the merging of profiles and policies respectively."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "These classes extend `Command`. The child classes of `MergeCommand` are `MergePersonCommand` and `MergePolicyCommand`. A `MergePersonCommand` object will store the `Person` created by the input and the corresponding `Person` that is stored in the model."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Additionally, the main crucial operations implemented by this class are:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `MergeCommand#getDifferences()` -- Finds all the different fields between the input person and the original person."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `MergeCommand#removeFirstDifferentField()` -- Removes the first different field in the list of differences. This method is called after a merge decision has been input by the user and executed."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `MergeCommand#getNextMergeFieldType()` -- Returns the type of the field for the next merge."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `MergeCommand#onlyOneMergeLeft()` -- Checks whether there is only one merge left."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "The implementation of `MergePolicyCommand` is similar."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "The child classes of `MergeConfirmedCommand` are `MergePersonConfirmedCommand` and `MergePolicyConfirmedCommand`, while the child classes of `MergeRejectedCommand` are `MergePersonRejectedCommand` and `MergePolicyRejectedCommand`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "They all implement `#execute(Model)`. Additionally, these classes implement an `#isLastMerge()` command to indicate if this is the last possible merge for the entity being merged."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "AddressBookParser stores a boolean flag to indicate whether a merge is currently taking place. When it is set as true, all other commands will not be parsed and will be treated as invalid commands."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "The AddressBookParser object also stores the MergeCommand object during a merge process. This object is then used by `MergeConfirmedCommand` objects and `MergeRejectedCommand` objects in their execution."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "image::MergeClassDiagram.png[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Given below is an example usage scenario and how the merge mechanism behaves at each step."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Step 1. The user adds a duplicate profile. The `AddCommand` will throw a `DuplicatePersonWithMergeException` during its execution."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "This exception is thrown if there is at least one different field between the input person and the original person stored in the model. Else, a `DuplicatePersonWithoutMergeException` will be thrown."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "The `DuplicatePersonWithMergeException` will finally be caught in the `CommandBox`. UI outputs the error message and a prompt to start a merge. `CommandBox` then constructs two command strings: one to proceed with the merge and one to reject the merge."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "This is done via `#standByForMerge(String, String)`. This string is then stored."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Step 2. The user inputs yes or presses enter to proceed with the merge. `CommandBox` then calls `CommandExecutor#execute()` to execute the merge command it constructed previously."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "When the command is being parsed in the `AddressBookParser` object, a new `MergeCommand` object is created and stored. The `isMerging` flag is also set to true."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "The execution of this command then returns a CommandResult that prompts the next merge."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Step 3. The user inputs yes or presses enter to update the field that was displayed in the prompt. The `AddressBookParser` parses the input and creates a new `MergePersonConfirmedCommand` object."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "The `MergePersonConfirmedCommand` object obtains information for the merge from the `MergeCommand` object that was passed in as a parameter in the constructor."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "In the execution, a new `EditCommand` is created and `EditCommand#executeForMerge()` is used to update the person in the model. If the"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`MergePersonConfirmedCommand#isLastMerge` returns false, `MergeCommand#removeFirstDifferentField` is called and the command result then shows a success message and the next prompt."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "This process is shown in the sequence diagram below."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "image::MergeSequenceDiagram.png[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "If the user inputs an invalid command, the prompt will be displayed again along with an error message."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Step 4. The user inputs no to reject the update of the field that was displayed in the prompt. The input gets parsed in the `AddressBookParser` object and creates a new MergePersonRejectedCommand."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "If it is not the last merge, `MergeCommand#removeFirstDifferentField` is called. The command result then shows the next prompt. Else, it will show a success message of successfully updating the profile."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "This is repeated until all merges have been prompted."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "image::MergeActivityDiagram.png[]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How merge command executes"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* **Alternative 1 (current choice):** Stores the `MergeCommand` object in the `AddressBookParser` to be accessed by `MergeConfirmedCommand` and `MergeRejectedCommand` objects."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "** Pros: Finding of different fields is only executed once and can be used by future commands."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "** Cons: More coupling between `MergeCommand` and other classes."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* **Alternative 2:** Update the field in the command string and pass it on in the command result."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "** Pros: Less coupling between `MergeCommand` and other classes."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "*** User has to see the updated command (information that user does not need to see is displayed)."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "*** Command still has to be stored somewhere to be accessed by other future merge commands."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "// end::merging[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* is an insurance agent"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* is always meeting new clients, so needs to manage a significant number of contacts"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* needs to manage a significant number of insurance policies"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* always offering insurance schemes to client base"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* finds it easier to understand visual data"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "*Value proposition*: manages large number of contacts and insurance policies faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* * *` |user |add a new contact/policy |"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* * *` |user |delete a contact/policy |remove entries that I no longer need"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* * *` |insurance agent |find a person/policy by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* * *` |insurance agent |predefine a custom set of policies |so I can select policies in this predefined set and make data entry faster"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* * *` |insurance agent |tag or untag clients |so I can target people belonging to different target groups"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* * *` |insurance agent |generate basic statistics and data about my sales for the month| so I can visualise and keep track of them"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* * *` |busy user |quickly check what commands  are available |so I do not have to remember all commands of the app"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* * *` |user handling many profiles and contacts |can use mass operations to change the same details across different people/policies |so I can speed up my workflow"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* * *` |insurance agent with many clients |filter and sort people according to their policies and tags |so I can get information about a particular group of people quickly"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* * *` |user who prefers typing over using a mouse |interact with all aspects of GUI using commands only |"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|`* * *` |insurance agent | view the key KPIs of my address book | track my performance"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |user with not a strong memory |view all commands as a dropdown list |"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |insurance agent prone to making mistakes during manual entry |I want to be sure that the details of buyers are valid without having to manually check every record |"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |insurance agent |start-up page to reflect key KPIs (e.g: sales in current quarter) |"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |insurance agent with many contacts |disallow creating duplicate profiles |so I need not worry about accidentally creating duplicate profiles"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |clumsy insurance agent |retrieve deleted contacts from an archive of recently deleted contacts |"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |insurance agent |want to see which policies a new contact is eligible for |so I can quickly check eligible policies while constantly adding new contacts"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |clumsy user |I can undo and redo my previous commands |to amend mistakes made by entering incorrect commands"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |insurance agent |I can export the data as an Excel document for easier sharing of data |so I can generate reports and and send these reports to authorities/other agents"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |insurance agent |I can group families who are under the same insurance |so it is easier to sell/manage plans for these people"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |insurance agent with new policies |I want to be able to filter people based on eligibility for these policies |for faster data entry"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |insurance agent |I can have details auto-filled into business/government forms |so I can save time keying in details I already have"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |insurance agent |receive reminders for clients whose policies are almost due for renewal |so I can contact them to renew their insurance policy"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`* *` |insurance agent |receive reminders when clients pass a certain age group |so I can contact them about the new policies that they are now eligible for."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|`* *` |insurance agent who prefers visualisation | view key performance indicators as diagrams |"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`*` |insurance agent with many clients |configure automatic greeting emails to policyholders |so I can maintain a good relationship with clients without manually sending individual emails"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`*` |user with personal preferences |configure the CLI |so I can speed up my workflow"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`*` |insurance agent with many clients |want to contact my policyholders with ease (such as email) |so I have a convenient method of communication"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "|`*` |busy user |auto-complete my commands |so I can perform operations and find the data I need quickly"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d\u003d Use case: Add person"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Guarantees: +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "1. Person is added even if input fields might be invalid (see 1a)."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "1.  User requests to add a person."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "2.  AddressBook adds the person."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "+"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* 1a. Either of the given NRIC, contact number, or email address is invalid."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "+"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** 1a1. AddressBook adds the person into address book."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** 1a1. AddressBook shows a warning."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* 1b. Duplicate profile is added."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "+"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** 1b1. AddressBook shows an error message and will attempt to merge the profile."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "+"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d\u003d Use case: Edit person"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Guarantees: +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "1. Person is editted even if input fields might be invalid (see 3a)."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "1.  User requests to find a person"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "2.  AddressBook shows details of the person"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "3.  User requests to edit that specific person."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "4.  AddressBook edits the person."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "+"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* 1a. Person is not found"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "+"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** 1a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "+"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* 3a. Either of the given NRIC, contact number, or email address is invalid."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "+"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** 3a1. AddressBook adds the person into address book."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** 3a2. AddressBook shows a warning."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "+"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *a. At any time, User requests to cancel the edit."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "+"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** *a1. Address books requests to confirm the cancellation."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** *a1. User confirms the cancellation."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "\u003d\u003d\u003d Use case: Delete contact"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "1.  User requests to list contacts"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "2.  AddressBook shows a list of contacts"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "3.  User requests to delete a specific contact in the list"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "4.  AddressBook deletes the contact"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "5.  Contact appears in the recycling bin"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "+"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "+"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "+"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Use case: Assigning a policy to a person"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "3.  User requests to assign a policy to a specific person"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "4.  The policy gets assigned to the person"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* 3b. The person is not eligible for the policy."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "+"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "** 3b1. AddressBook shows an error message and returns a list of policies the person is eligible for."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "+"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "\u003d\u003d\u003d Use case: Restoring recently deleted contact"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "1.  User requests to list recently deleted contacts from recycling bin"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "2.  AddressBook shows a list of contacts"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "3.  User requests to restore a specific contact in the list"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "4.  AddressBook restores the contact"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Use case: Merging a duplicate person with different fields"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "1.  User requests to add a person."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "2.  AddressBook indicates that this person already exists and prompts a merge."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "3.  User indicates whether or not to edit this profile."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "4.  A different field is displayed and asks the user whether or not to update this field."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "5.  Steps 3 and 4 repeat until decisions whether or not to merge different fields have been completed."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *a. User indicates to stop the merging process."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "+"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "** 3a1. The user inputs an invalid command."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "** 3a2. The AddressBook indicates an error and prompts the merge again."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "+"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Use case resumes at 4."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ".  Should display visual representations as long as Excel is installed."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 102,
      "larrylawl": 72,
      "chaitanyabaranwal": 54,
      "ybchen97": 31,
      "-": 441
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "\u003d Insurelytics - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F09-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "By: `CS2103-F09-04`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Insurelytics is for insurance agents who *prefer to use a desktop app for managing contacts and policies*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "More importantly, Insurelytics is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "If you can type fast, Insurelytics can get your contact management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Adds a person to the list of people +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format: `add n/NAME ic/NRIC p/PHONE_NUMBER e/EMAIL a/ADDRESS dob/DATE_OF_BIRTH`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Birthdays are in the form `DD.MM.YYYY`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `add n/John Doe ic/S9999999J p/98765432 e/johnd@example.com a/John street, block 123, #01-01 dob/12.09.1980`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Adding a policy: `addpolicy`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Adds a policy to the list of policies +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format: `addpolicy n/NAME d/DESCRIPTION c/[days/DAYS_VALID][months/MONTHS_VALID][years/YEARS_VALID] p/PRICE [sa/START_AGE] [ea/END_AGE]`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Coverage time period is specified in days, years and months, in the format days/D months/M years/Y (e.g. 20 days, 11 months, 5 years is represented by days/20 months/11 years/5)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Price is specified in dollar ($) units."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `addpolicy n/SeniorCare d/Care for seniors c/days/20 months/11 years/5 p/50000 sa/50 ea/75`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `listpeople`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Shows a list of all persons currently stored. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format: `listpeople`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d\u003d Listing all policies : `listpolicy`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Shows a list of all current policies. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "Format: `listpolicy`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003d\u003d\u003d Listing command history : `history`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Shows a list of all previously entered (valid) commands."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format: `edit INDEX [n/NAME] [ic/NRIC] [p/PHONE] [e/EMAIL] [a/ADDRESS] [dob/DATE_OF_BIRTH]`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `edit 2 n/Betsy Crower a/` +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears the address tag."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Editing a policy : `editpolicy`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format: `edit INDEX [n/NAME] [d/DESCRIPTION] [c/[days/DAYS_VALID][months/MONTHS_VALID][years/YEARS_VALID]] [p/PRICE] [sa/START_AGE] [ea/END_AGE]`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Edits the policy at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `editpolicy 1 n/Seniors` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Edits the name of the 1st policy to `Seniors`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Locating policies by keywords: `findpolicy`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Finds policies whose names or descriptions contain any of the given keywords. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format: `findpolicy KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The search is case insensitive. e.g `senior` will match `Seniors`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The order of the keywords does not matter. e.g. `Senior Care` will match `Care Seniors`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Partially-matching words will be matched e.g. `Senior` will match `Seniors`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Policies matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `find family children` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Returns any policy having names or descriptions containing `family` or `children`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "\u003d\u003d\u003d Locating people by tags: `findtagpeople`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Finds people who have the specified tag(s). +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Format: `findtagpeople TAG [MORE_TAGS]`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The search is case insensitive. e.g. `diabetic` will match `Diabetic`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The order of the tags does not matter."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Tags must be specified completely and accurately."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Only people who possess all specified tags will be returned (e.g. searching `diabetic` and `smoker` will only return people with both tags)."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "\u003d\u003d\u003d Locating policies by tags: `findtagpolicy`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Finds policies who have the specified tag(s) +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Format: `findtagpolicy TAG [MORE_TAGS]`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The search is case insensitive. e.g. `accident` will match `Accident`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The order of the tags does not matter."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Tags must be specified completely and accurately."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Only policies that possess all specified tags will be returned (e.g. searching `accident` and `life` will only return policies with both tags)."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "\u003d\u003d\u003d Find current policyholders: `findpolicyholders`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Finds people in possession of a policy (or policies) +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Format: `findpolicyholders INDEX`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The index refers to the index number shown in the displayed policy list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* `listpolicy` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "`findpolicyholders 1` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Finds all people who are in current possession of the 1st policy in the list of policies."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "\u003d\u003d\u003d Find eligible policies: `eligiblepolicies`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Finds policies a specific person is eligible for +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Format: `eligiblepolicies INDEX`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "****"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* `listpeople` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "`eligiblepolicies 1` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Finds all policies the 1st person in the displayed person list is eligible for."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "\u003d\u003d\u003d Find eligible people: `eligiblepeople`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Finds people eligible for a specific policy +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Format: `eligiblepeople INDEX`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "****"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The index refers to the index number shown in the displayed policy list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "****"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* `listpolicy` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "`eligiblepeople 1` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Finds all people eligible for the 1st policy in the displayed policy list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Adding policies to a person : `assignpolicy`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Assigns a policy to the person at the specified index. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Format: `assignpolicy INDEX pol/POLICY NAME`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Adds the policies to the person at the specified `INDEX`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The policy refers to the name of the policy."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Each policy name must match the policy exactly as it appears in the absolute policy list."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Any number of policies can be added as long as the person is eligible for the policy."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `listpeople` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`assignpolicy perindex/2 polindex/2` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Assigns the \u0027Senior Care\u0027 (the second policy in the list) policy to the 2nd person in the list of people."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`assignpolicy 1 pol/Accident Insurance` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Assigns the \u0027Accident Insurance\u0027 (the first policy in the list) policy to the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Adding tags to a person : `addtag`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Adds a new tag to the person at the specified index. +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format: `addtag INDEX t/TAG [MORE_TAGS]`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Adds the tags to the person at the specified `INDEX`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Any number of tags can be added."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `listpeople` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`addtag 2 t/high_priority` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Adds a `high_priority` tag to the 2nd person in the list of people."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`addtag 1 t/high_risk` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Adds a `high_risk` tag to the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Adding tags to a policy : `addpolicytag`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Adds a new tag to the policy at the specified index. +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format: `addpolicytag INDEX t/TAG [MORE_TAGS]`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Adds the tags to the policy at the specified `INDEX`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index refers to the index number shown in the displayed policies list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Any number of tags can be added."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* `listpolicy` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`addpolicytag 2 t/lifeinsurance` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Adds a `lifeinsurance` tag to the 2nd policy in the list of polciies."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `findpolicy Betsy` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`addpolicytag 1 t/motorinsurance` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Adds a `motorinsurance` tag to the 1st policy in the results of the `find` command."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "\u003d\u003d\u003d Adding criteria to a policy : `addpolicycriteria`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Adds a new criteria to the policy at the specified index. +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Format: `addpolicycriteria INDEX cri/CRITERIA [MORE_CRITERIA]`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "****"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Adds the criteria to the policy at the specified `INDEX`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The index refers to the index number shown in the displayed policies list."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Any number of criteria can be added."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "****"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* `listpolicy` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "`addpolicycriteria 2 t/nonsmoker` +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Adds a `nonsmoker` criteria to the 2nd policy in the list of policies."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* `findpolicy Betsy` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "`addpolicycriteria 1 t/nonsmoker` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Adds a `nonsmoker` tag to the 1st policy in the results of the `findpolicy` command."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Deletes the specified person from the list of people. +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Deletes the 2nd person in the list of people."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Deleting a policy : `deletepolicy`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Deletes the specified policy from the address book. +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format: `deletepolicy INDEX`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Deletes the policy at the specified `INDEX`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index refers to the index number shown in the displayed policy list."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* `listpolicy` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "`deletepolicy 2` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Deletes the 2nd policy in the list of policies."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* `findpolicy senior` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "`deletepolicy 1` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "Deletes the 1st policy in the results of the `findpolicy` command."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Deleting policies from a person : `unassignpolicy`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Removes a policy from the person at the specified index. +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Format: `unassignpolicy INDEX pol/POLICY NAME`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Removes the policies to the person at the specified `INDEX`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* The policy refers to the index number of the policy in the absolute list."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* Each policy *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `listpeople` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`unassignpolicy 2 pol/Accident Insurance` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Removes the policy \u0027Accident Insurance\u0027 in the absolute list from the 2nd person in the displayed list of people."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`unassignpolicy 1 pol/Health insurance` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Removes the policy \u0027Health Insurance\u0027 in the absolute list from the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Deleting tags from a person : `deletetag`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Deletes a tag from the person at the specified index. +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format: `deletetag INDEX t/TAG [MORE_TAGS]`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Deletes the tags from the person at the specified `INDEX`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Any number of tags can be deleted."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `listpeople` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`deletetag 2 t/high_priority` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Deletes a `high_priority` tag from the 2nd person in the list of people."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`deletetag 1 t/high_risk` +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Deletes a `high_risk` tag from the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Deleting tags from a policy : `deletepolicytag`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Deletes a tag from the policy at the specified index. +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format: `deletepolicytag INDEX t/TAG [MORE_TAGS]`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Deletes the tags from the policy at the specified `INDEX`."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index refers to the index number shown in the displayed policies list."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* Any number of tags can be deleted."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* `listpolicy` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`deletepolicytag 2 t/high_priority` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Deletes a `high_priority` tag from the 2nd policy in the list of policies."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* `findpolicy Senior` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`deletepolicytag 1 t/high_risk` +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Deletes a `high_risk` tag from the 1st policy in the results of the `find` command."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Incorrect NRIC Alert"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Returns an error message to inform the user of an invalid NRIC. The contact number and/or email address is returned"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "if present."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`add n/John Doe ic/Q9999999J p/98765432 e/johnd@example.com a/John street, block 123, #01-01 dob/12.09.1980 pol/1 t/high-priority` +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "New person added: John Doe Phone:98765432 Email:johnd@example.com Address:John street, block 123, #01-01 Date of birth: 12th September 1980 Policy: SeniorCare Tags: high_priority"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Q9999999J is invalid."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You might want to contact John Doe: 98765432 johnd@example.com`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Incorrect Contact Number Alert"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Returns an error message to inform the user of an invalid contact number. The email address is returned"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "if present."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`add n/John Doe ic/S9999999J p/48765432 e/johnd@example.com a/John street, block 123, #01-01 dob/12.09.1980 pol/1 t/high-priority` +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "New person added: John Doe NRIC: S9999999J Email:johnd@example.com Address:John street, block 123, #01-01 Date of birth:s12th September 1980 Policy: SeniorCare Tags: high_priority"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "48765432 is invalid."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You might want to contact John Doe: johnd@example.com"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Incorrect Email Address Alert"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Returns an error message to inform the user of an invalid email address. The phone number is returned"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "if present."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`add n/John Doe ic/S9999999J p/98765432 e/@example.com a/John street, block 123, #01-01 dob/12.09.1980` +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "New person added: John Doe NRIC: S9999999J Phone: 98765432 Address:John street, block 123, #01-01 Date of birth: 12th September 1980 Policy: SeniorCare Tags: high_priority"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "@example.com is invalid. You might want to contact John Doe: 98765432"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Incorrect Command Suggestions"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Returns an error message and a suggestion of a correct command when a command is typed incorrectly."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`dlete 2`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "dlete is not recognised. Did you mean: delete 2?"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "The input will automatically be updated to the suggested command."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Turning Command Suggestions On and off"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Switches suggestions for invalid commands on or off."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`suggestion [ON/] [OFF/]`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`suggestion ON/`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Suggestions have been switched on."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Incorrect Insurance Policy Assignment Alert"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Returns an error if a person is ineligible for the insurance policy and provides suggestions for policies that this person is eligible for."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* The new information will be accepted and updated except for the updated policy."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "****"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`edit n/John Doe ic/S9999999J p/91234567 e/johndoe@example.com a/John street, block 123, #01-01 age/30 pol/SeniorCare`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "John Doe is ineligible for this policy. These are other possible policies that John Doe is eligible for:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "..."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Duplicate profile alert"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Returns an error message of an existing person and will attempt to merge the profiles."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "For each different attribute, there will be a prompt to suggest a change from the original attribute to the new one."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`add n/John Doe ic/S9999999J p/91234567 e/johndoe@example.com a/John street, block 123, #01-01 age/30`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "This profile already exists:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "n/John Doe ic/S9999999J p/98765432 e/johndoe@example.com a/John street, block 123, #01-01 age/30`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Do you wish to update John Doe’s profile?"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "User may input `yes` or `no`. Further prompts will be provided if user inputs  `yes`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Would you like to update p/98765432 to p/91234567?"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "If `yes`, the new profile will be created."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "If `no`,"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "You may edit John Doe’s profile using the edit command. For more information, type help."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "```"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Reminders of expiring policies"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Displays a list of people whose policies are expiring in the current month on the start up page. This list will be updated every month."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Expanding a profile"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expands the profile details on the right panel."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`expandperson INDEX`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`expandperson 1`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003d\u003d\u003d Expanding a policy"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Expands the policy details on the right panel."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`expandpolicy INDEX`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "`expandpolicy 1`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003d\u003d\u003d Generate Report: `report`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Generates report of key performance indicators (KPI). Report is saved in the same directory as the application, or the file path if specified."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`report [f/FILEPATH]`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`report f/~/reports/` +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Saves report in `~/reports` directory."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "image::Report.png[width\u003d\"400\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003d\u003d\u003d Export to Excel: `export`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Exports contact details to an excel sheet in the same directory as the application, or the file path if specified."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Depending on what the user specifies as arguments,"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "different fields of the contacts can be exported. Arguments can also be chained to export multiple fields together at once."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`export [name] [phone] [email] [address] [insurance] [f/FILEPATH]`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* If no arguments are provided, all possible fields are exported."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`export` +"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Exports all possible fields in the address book."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`export name phone email f/~/sheets/` +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Exports name, phone, and email into `~/sheets` directory."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003d\u003d\u003d Display Indicator `display`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Displays indicator according to specified format."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "`display i/INDICATOR f/CHARTf`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* Indicators include:"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "- Policy Popularity breakdown"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "- Age Group breakdown"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "- Gender breakdown"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "- Contact List growth rate"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "`display i/policy-popularity-breakdown f/piechart` +"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Displays policy popularity breakdown as a piechart."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Expected Output: +"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "image::PolicyPopBreakdown.png[width\u003d\"400\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003d\u003d\u003d List Recycling Bin: `bin`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Shows recently deleted contacts that are stored inside `bin`."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`bin`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* Items inside the bin can be restored within its expiration time, which is 30 days since it has been deleted,"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "after which it is removed forever."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`bin`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Expected Output: +"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "1. Contact 1 expires in 30 mins"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "2. Contact 2 expires in 5 days"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "3. Contact 3 expires in 30 days"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003d\u003d\u003d Restore Recycling Bin: `restore`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Restores the contact specified by the user."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`restore INDEX`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* Mass restoration by field is also possible by specifying `field:value`."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "****"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`restore 1` +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Restores first index of contacts listed in `bin`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Expected Output: +"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "The following contact has been restored:"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Contact 1"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003d\u003d\u003d Undo recently entered commands"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Displaying a list of recently entered commands, and the user can select the range of commands the user wants to undo."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`undo list`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Here is the list of recently entered commands:"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "1. Add Person - Name: John Doe IC: S9999999J Phone: 98765432 Email: johndoe@example.com"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "2. Delete Person - Name: Jane Doe IC: S9999999J Phone: 123456789 Email: janedoe@example.com"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "3. Edit Person - Name: Jonathan Doe IC: S9999999J Phone: 123456789 Email: jonathandoe@example.com"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`undo 3`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Undoing the following commands:"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "1. Add Person - Name: John Doe IC: S9999999J Phone: 98765432 Email: johndoe@example.com"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "2. Delete Person - Name: Jane Doe IC: S9999999J Phone: 123456789 Email: janedoe@example.com"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "3. Edit Person - Name: Jonathan Doe IC: S9999999J Phone: 123456789 Email: jonathandoe@example.com"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Okay! Commands have been undone."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "The user can also simply enter the command `undo` to undo the most recent command."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`undo`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Undoing the following command:"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Add Person - Name: John Doe IC: S9999999J Phone: 98765432 Email: johndoe@example.com"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Okay! Command has been undone."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003d\u003d\u003d Redo recently undone commands"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Displaying a list of recently entered commands, and the user can select the range of commands the user wants to undo."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`redo list`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Here is the list of recently undone commands:"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "1. Add Person - Name: John Doe IC: S9999999J Phone: 98765432 Email: johndoe@example.com"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "2. Delete Person - Name: Jane Doe IC: S9999999J Phone: 123456789 Email: janedoe@example.com"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "3. Edit Person - Name: Jonathan Doe IC: S9999999J Phone: 123456789 Email: jonathandoe@example.com"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`redo 3`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Redoing the following commands:"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "1. Add Person - Name: John Doe IC: S9999999J Phone: 98765432 Email: johndoe@example.com"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "2. Delete Person - Name: Jane Doe IC: S9999999J Phone: 123456789 Email: janedoe@example.com"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "3. Edit Person - Name: Jonathan Doe IC: S9999999J Phone: 123456789 Email: jonathandoe@example.com"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Okay! Commands have been redone."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "The user can also simply enter the command `redo` to undo the most recent command."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "`redo`"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Redoing the following command:"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Add Person - Name: John Doe IC: S9999999J Phone: 98765432 Email: johndoe@example.com"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "Okay! Command has been redone."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "```"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Add Person* `add n/NAME ic/NRIC p/PHONE_NUMBER e/EMAIL a/ADDRESS dob/DATE_OF_BIRTH​` +"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `add n/John Doe ic/S9999999J p/98765432 e/johnd@example.com a/John street, block 123, #01-01 dob/12.09.1980`"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Add Policy* `addpolicy  addpolicy n/NAME d/DESCRIPTION c/[days/DAYS_VALID][months/MONTHS_VALID][years/YEARS_VALID]  p/PRICE [sa/START_AGE] [ea/END_AGE]...` +"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `add pol n/SeniorCare d/care for seniors c/months/10 p/$50000 [sa/50 ea/75]`"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *List People* : `listpeople`"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *List Policy* : `listpolicy`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* *List Command History*: `history`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Edit Person* : `edit INDEX [n/NAME] [ic/NRIC] [p/PHONE] [e/EMAIL] [a/ADDRESS] [dob/DATE_OF_BIRTH]` +"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Edit Policy* : `edit INDEX [n/NAME] [d/DESCRIPTION] [c/[days/DAYS_VALID][months/MONTHS_VALID][years/YEARS_VALID] ] [p/PRICE]` +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `editpolicy 1 n/Seniors`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Find Person* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Find Policy* : `findpolicy KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `findpolicy senior`"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* *Find people by tags*: `findtagpeople TAG [MORE_TAGS]` +"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "e.g. `findtagpeople smoker diabetic`"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "* *Find policy by tags*: `findtagpolicy TAG [MORE_TAGS]` +"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "e.g. `findtagpolicy accident life`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* *Assign Policy* : `assignpolicy INDEX pol/POLICY NAME` +"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "e.g. `assignpolicy 2 pol/Health insurance`"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Add Tag To Person* : `addtag INDEX t/TAG [MORE_TAGS]` +"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `addtag 3 t/high_priority`"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Add Tag To Policy* : `addpolicytag INDEX t/TAG [MORE_TAGS]` +"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `addpolicytag 2 t/lifeinsurance`"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Delete Person* : `delete INDEX` +"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Delete Policy* : `deletepolicy INDEX` +"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `deletepolicy 3`"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* *Unassign Policy* : `unassignpolicy INDEX pol/POLICY NAME` +"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "e.g. `unassignpolicy 2 pol/Health insurance`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Delete Tag From Person* : `deletetag INDEX t/TAG [MORE_TAGS]` +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `deletetag 3 t/high_priority`"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Delete Tag From Policy* : `deletepolicytag INDEX t/TAG [MORE_TAGS]` +"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `deletepolicytag 2 t/lifeinsurance`"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Expanding a profile* : `expandperson INDEX` +"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `expandperson 1`"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Expanding a policy* : `expandpolicy INDEX` +"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "e.g. `expandpolicy 1`"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* *Generate Report*: `report [f/FILEPATH]` +"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "e.g. `report f/~/reports/`"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* *Export to Excel*: `export [name] [phone] [email] [address] [insurance] [f/FILEPATH]` +"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "e.g. `export name phone email f/~/sheets/`"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Display*: `display i/INDICATOR f/FORMAT` +"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "e.g. `display i/policy-popularity-breakdown f/piechart`"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* *List of undone commands*: `undo list`"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* *Undo till a particular command*: `undo INDEX` +"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "e.g. `undo 3`"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* *Undo the most recent command*: `undo`"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* *List of undone commands*: `redo list`"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* *Undo till a particular command*: `redo INDEX` +"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "e.g. `redo 3`"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "* *Undo the most recent command*: `redo`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 94,
      "chowyiyin": 360,
      "larrylawl": 16,
      "chaitanyabaranwal": 239,
      "ybchen97": 3,
      "-": 150
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter an arbitrary description e.g. addressbook"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "larrylawl": 2,
      "-": 47
    }
  },
  {
    "path": "docs/diagrams/MergeActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ":Prompt user for merge;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "while (has unprompted different fields)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    :prompt next merge;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    if () then ([\"yes\" or \"\"])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    :update field;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    else ([\"no\"])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    :skip merge;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "endwhile"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 20
    }
  },
  {
    "path": "docs/diagrams/MergeClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "abstract class MergeCommand"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "class MergePersonCommand"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeCommand \u003c|-- MergePersonCommand"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeCommand : {abstract} getDifferences(): String[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeCommand : {abstract} removeFirstDifferentField()"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeCommand : {abstract} getNextMergeType(): String"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeCommand : {abstract} onlyOneMergeLeft(): boolean"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeCommand : equals(Object): boolean"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : originalPerson: Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : inputPerson: Person"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : differentFields: ArrayList\u003cString[]\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : MergePersonCommand(Person)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : execute(Model): CommandResult"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : updateOriginalPerson(Person)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : getNextMergePrompt(): String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : getDifferences(): String[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : removeFirstDifferentField()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : getNextMergeType(): String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : getInputPerson(): Person"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : getOriginalPerson(): Person"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : onlyOneMergeLeft(): boolean"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand : equals(Object)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "abstract class MergeConfirmedCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "class MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeConfirmedCommand \u003c|-- MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeConfirmedCommand : {abstract} execute(Model): CommandResult"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeConfirmedCommand : {abstract} isLastMerge(Model): boolean"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeConfirmedCommand : equals(Object): boolean"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand \u003c-- MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand : MergePersonConfirmedCommand(MergePersonCommand)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand : execute(Model): CommandResult"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand : isLastMerge(Model): boolean"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "abstract class MergeRejectedCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "class MergePersonRejectedCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeRejectedCommand \u003c|-- MergePersonRejectedCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeRejectedCommand : {abstract} execute(Model): CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeRejectedCommand : {abstract} isLastMerge(): boolean"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeRejectedCommand : equals(Object): boolean"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand \u003c-- MergePersonRejectedCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonRejectedCommand : MergePersonRejectedCommand(MergePersonCommand)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonRejectedCommand : execute(Model): CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonRejectedCommand : isLastMerge(Model): boolean"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonRejectedCommand : equals(Object): boolean"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "class DoNotMergePersonCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "DoNotMergePersonCommand : originalPerson: Person"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "DoNotMergePersonCommand : inputPerson: Person"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "DoNotMergePersonCommand : DoNotMergePersonCommand(Person)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "DoNotMergePersonCommand : execute(Model): CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "DoNotMergePersonCommand : equals(Object): boolean"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "class AddressBookParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "AddressBookParser : ...()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergeCommand \u003c-- AddressBookParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "AddressBookParser : isMerging: boolean"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "AddressBookParser : mergeType: String"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "AddressBookParser : parseMerge(String): Command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 69
    }
  },
  {
    "path": "docs/diagrams/MergeSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "participant \":MergePersonCommandParser\" as MergePersonCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "participant \":MergePersonCommand\" as MergePersonCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "participant \":MergePersonConfirmedCommand\" as MergePersonConfirmedCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "participant \":EditCommand\" as EditCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "[-\u003eLogicManager: execute(\"merge add...\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "LogicManager -\u003e AddressBookParser: parse(String)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "AddressBookParser -\u003e MergePersonCommandParser: parse(String)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "activate MergePersonCommandParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "create MergePersonCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommandParser -\u003e MergePersonCommand: new MergePersonCommand(Person, Person)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "activate MergePersonCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand --\u003e MergePersonCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "deactivate MergePersonCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "deactivate MergePersonCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "AddressBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "LogicManager -\u003e MergePersonCommand: execute(Model)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "activate MergePersonCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand -\u003e MergePersonCommand: getDifferences()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand -\u003e MergePersonCommand: getNextMergePrompt()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand --\u003e LogicManager: CommandResult(String)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "note left"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "Includes the prompt for the next merge"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "end note"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "deactivate MergePersonCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c-- LogicManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "[-\u003eLogicManager: execute(\"yes\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "LogicManager -\u003e AddressBookParser: parse(String)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "create MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "AddressBookParser -\u003e MergePersonConfirmedCommand: new MergePersonConfirmedCommand(MergePersonCommand)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "activate MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "deactivate MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "AddressBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "LogicManager -\u003e MergePersonConfirmedCommand: execute(Model)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "activate MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand -\u003e MergePersonCommand: getOriginalPerson()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand --\u003e MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand -\u003e MergePersonCommand: getInputPerson();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand --\u003e MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand -\u003e MergePersonCommand: getNextMergeFieldType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonCommand --\u003e MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "create EditCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand -\u003e EditCommand: new EditCommand()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "EditCommand --\u003e MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand -\u003e EditCommand: executeForMerge(Person, EditPersonDescriptor, Model)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand -\u003e MergePersonCommand: updateOriginalPerson(Person)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand --\u003e MergePersonCommand: removeFirstDifferentField()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "MergePersonConfirmedCommand --\u003e LogicManager: CommandResult(String)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "deactivate MergePersonConfirmedCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c-- LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 72
    }
  },
  {
    "path": "docs/team/ChaitanyaBaranwal.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d Chaitanya Baranwal - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 72
    }
  },
  {
    "path": "docs/team/ChenYuanBo.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d Chen Yuan Bo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 72
    }
  },
  {
    "path": "docs/team/ChowYiYin.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d Chow Yi Yin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 72
    }
  },
  {
    "path": "docs/team/LarryLaw.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d Larry Law - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 1,
      "-": 71
    }
  },
  {
    "path": "docs/team/OliverCheok.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d Oliver Cheok - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String MESSAGE_INVALID_POLICY_DISPLAYED_INDEX \u003d \"The policy index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public static final String MESSAGE_POLICIES_LISTED_OVERVIEW \u003d \"%1$d policies listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_MERGE_COMMAND \u003d \"Unknown command. %1$s. If you wish to stop merging\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \" this profile, please type stop.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 1,
      "chowyiyin": 2,
      "ybchen97": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/UserSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A Serializable class that contains the user settings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class UserSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final boolean suggestionsOn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public UserSettings() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        suggestionsOn \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public UserSettings(boolean suggestionsOn) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.suggestionsOn \u003d suggestionsOn;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isSuggestionsOn() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return suggestionsOn;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!(other instanceof UserSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        UserSettings o \u003d (UserSettings) other;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return suggestionsOn \u003d\u003d o.suggestionsOn;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Objects.hash(suggestionsOn);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return \"Suggestions on: \" + suggestionsOn + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/PersonBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S0000003J\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DEFAULT_DATE_OF_BIRTH \u003d \"3.3.1993\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"Female\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Set\u003cPolicy\u003e policies;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        dateOfBirth \u003d new DateOfBirth(DEFAULT_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        policies \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        nric \u003d personToCopy.getNric();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        dateOfBirth \u003d personToCopy.getDateOfBirth();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        policies \u003d new HashSet\u003c\u003e(personToCopy.getPolicies());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code policies and tags}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public PersonBuilder(Set\u003cPolicy\u003e policies, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        dateOfBirth \u003d new DateOfBirth(DEFAULT_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.policies \u003d new HashSet\u003c\u003e(policies);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Sets the {@code Nric} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public PersonBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Adds the {@code tags} to the {@code Person} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public PersonBuilder addTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Removes the {@code tags} from the {@code Person} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public PersonBuilder removeTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.tags.removeAll(tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Parses the {@code policies} into a {@code Set\u003cPolicy\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public PersonBuilder withPolicies(Policy ... policies) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.policies \u003d new HashSet\u003c\u003e(Arrays.asList(policies));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Parses the {@code policies} into a {@code Set\u003cTag\u003e} and adds it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public PersonBuilder addPolicies(Policy ... policies) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.policies.addAll(Arrays.asList(policies));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Parses the {@code policies} into a {@code Set\u003cPolicy\u003e} removes it from the policies of the {@code Person}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public PersonBuilder removePolicies(Policy ... policies) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.policies.removeAll(Arrays.asList(policies));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public PersonBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.dateOfBirth \u003d new DateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new Person(name, nric, phone, email, address, dateOfBirth, gender, policies, tags);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 17,
      "chowyiyin": 49,
      "larrylawl": 21,
      "chaitanyabaranwal": 16,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/PolicyBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getCriteriaSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * A utility class to help with building Policy objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class PolicyBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Senior Care\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Life insurance for elderly\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String DEFAULT_COVERAGE \u003d \"days/10 months/11 years/12\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"$5000\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String DEFAULT_START_AGE \u003d \"65\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String DEFAULT_END_AGE \u003d \"95\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final Set\u003cTag\u003e DEFAULT_CRITERIA \u003d getCriteriaSet(\"diabetic\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final Set\u003cTag\u003e DEFAULT_TAG \u003d getTagSet(\"diabetic\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private PolicyName name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private Coverage coverage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private StartAge startAge;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private EndAge endAge;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private Set\u003cTag\u003e criteria;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyBuilder() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        name \u003d new PolicyName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        coverage \u003d new Coverage(DEFAULT_COVERAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        startAge \u003d new StartAge(DEFAULT_START_AGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        endAge \u003d new EndAge(DEFAULT_END_AGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        criteria \u003d DEFAULT_CRITERIA;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        tags \u003d DEFAULT_TAG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Initializes the Policy with the data of {@code policyToCopy}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyBuilder(Policy policy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        name \u003d policy.getName();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        description \u003d policy.getDescription();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        coverage \u003d policy.getCoverage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        price \u003d policy.getPrice();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        startAge \u003d policy.getStartAge();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        endAge \u003d policy.getEndAge();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        criteria \u003d new HashSet\u003c\u003e(policy.getCriteria());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(policy.getTags());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Initializes the PolicyBuilder with the data of {@code policies and tags}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyBuilder(Set\u003cTag\u003e criteria, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        name \u003d new PolicyName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        coverage \u003d new Coverage(DEFAULT_COVERAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        startAge \u003d new StartAge(DEFAULT_START_AGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        endAge \u003d new EndAge(DEFAULT_END_AGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        criteria \u003d new HashSet\u003c\u003e(criteria);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Sets the {@code Name} of the {@code Policy} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyBuilder withName(String name) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.name \u003d new PolicyName(name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Sets the {@code Description} of the {@code Policy} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Sets the {@code Coverage} of the {@code Policy} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyBuilder withCoverage(String coverage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.coverage \u003d new Coverage(coverage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Sets the {@code Price} of the {@code Policy} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.price \u003d new Price(price);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Sets the {@code StartAge} of the {@code Policy} that we are building."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyBuilder withStartAge(String startAge) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.startAge \u003d new StartAge(startAge);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Sets the {@code EndAge} of the {@code Policy} that we are building."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyBuilder withEndAge(String endAge) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.endAge \u003d new EndAge(endAge);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Policy} that we are building."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.tags \u003d getTagSet(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Adds the {@code tags} to the {@code Policy} that we are building."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public PolicyBuilder addTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Removes the {@code tags} from the {@code Policy} that we are building."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public PolicyBuilder removeTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.tags.removeAll(tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Policy} that we are building."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyBuilder withCriteria(String... criteria) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.criteria \u003d getCriteriaSet(criteria);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public Policy build() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new Policy(name, description, coverage, price, startAge, endAge, criteria, tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 20,
      "larrylawl": 144,
      "chaitanyabaranwal": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/TimeUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * A container for time specific utility functions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class TimeUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String BELOW_TWENTY \u003d \"Below 20 Years\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String TWENTY_TO_SIXTYFOUR \u003d \"20 - 64 Years\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String ABOVE_SIXTYFIVE \u003d \"65 years \u0026 Over\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final HashSet\u003cString\u003e AGE_GROUP \u003d initializeAgeGroup();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Initialises age group hash set"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @return age group hash set"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static HashSet\u003cString\u003e initializeAgeGroup() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        HashSet\u003cString\u003e result \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(BELOW_TWENTY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(TWENTY_TO_SIXTYFOUR);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(ABOVE_SIXTYFIVE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static HashSet\u003cString\u003e getAgeGroup() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return AGE_GROUP;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Takes in date of birth and outputs the age group the year is in."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param yearOfBirth"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @return age group the input year is in."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static String parseAgeGroup(int yearOfBirth) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        int age \u003d getCurrentYear() - yearOfBirth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        if (age \u003c 20) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            return BELOW_TWENTY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        } else if (age \u003c 65) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            return TWENTY_TO_SIXTYFOUR;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            return ABOVE_SIXTYFIVE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static int getCurrentYear() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        int currentYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return currentYear;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Executes the command and returns the result. This method is used to differentiate between"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * an invalid merge command input by the user and a system called merge command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param commandText   The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param isSystemInput Whether the command was invoked by user or the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    CommandResult execute(String commandText, boolean isSystemInput) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of policies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    ObservableList\u003cPolicy\u003e getFilteredPolicyList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /** Returns an unmodifiable view of the previously entered commands */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    ObservableList\u003cPair\u003cString, String\u003e\u003e getHistoryList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns key-value mapping of policy type to number of people who bought that policy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getPolicyPopularityBreakdown();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns key-value mapping of age group to number of people in the group."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getAgeGroupBreakdown();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns key-value mapping of gender to number of people of that gender."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getGenderBreakdown();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the user prefs\u0027 settings."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    UserSettings getUserSettings();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Set the user prefs\u0027 settings specified through commands."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    void setUserSettings();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Set the user prefs\u0027 settings."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    void setUserSettings(UserSettings userSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 27,
      "larrylawl": 27,
      "chaitanyabaranwal": 4,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddPolicyCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddPolicyTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AssignPolicyCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.DeletePolicyCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.DeletePolicyTagCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.EditPolicyCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ExpandPersonCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ExpandPolicyCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.FindPolicyCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ListPeopleCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ListPolicyCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.SuggestionSwitchCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.UnassignPolicyCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.CommandHistory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        addressBookParser \u003d new AddressBookParser(model.getUserSettings().isSuggestionsOn());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        initialiseCommandsInParserUtil();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Initialises all the command words in ParserUtil. Needs to be updated every time a command is added."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    //todo : update command words"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void initialiseCommandsInParserUtil() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ParserUtil.addCommands(AddCommand.COMMAND_WORD, AddPolicyCommand.COMMAND_WORD, AddPolicyTagCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            AddTagCommand.COMMAND_WORD, AssignPolicyCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            DeleteCommand.COMMAND_WORD, DeletePolicyCommand.COMMAND_WORD, DeletePolicyTagCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            DeleteTagCommand.COMMAND_WORD, EditCommand.COMMAND_WORD, EditPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ExitCommand.COMMAND_WORD, ExpandPolicyCommand.COMMAND_WORD, ExpandPersonCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            FindCommand.COMMAND_WORD, FindPolicyCommand.COMMAND_WORD, HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            HistoryCommand.COMMAND_WORD, ListPeopleCommand.COMMAND_WORD, ListPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            SuggestionSwitchCommand.COMMAND_WORD, UnassignPolicyCommand.COMMAND_WORD, UndoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            DisplayCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Optional\u003cString\u003e commandWord \u003d addressBookParser.getCommandWord(commandText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (commandWord.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            commandHistory.addCommand(commandWord.get(), commandText);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(String commandText, boolean isSystemInput) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText, isSystemInput);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Optional\u003cString\u003e commandWord \u003d addressBookParser.getCommandWord(commandText);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (commandWord.isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            commandHistory.addCommand(commandWord.get(), commandText);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ObservableList\u003cPolicy\u003e getFilteredPolicyList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return model.getFilteredPolicyList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getPolicyPopularityBreakdown() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return model.getPolicyPopularityBreakdown();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getAgeGroupBreakdown() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return model.getAgeGroupBreakdown();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getGenderBreakdown() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return model.getGenderBreakdown();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public ObservableList\u003cPair\u003cString, String\u003e\u003e getHistoryList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return commandHistory.getHistory();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return model.getUserSettings();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public void setUserSettings(UserSettings userSettings) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        model.setUserSettings(userSettings);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public void setUserSettings() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        boolean suggestionOn \u003d addressBookParser.isSuggestionOn();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        UserSettings userSettings \u003d new UserSettings(suggestionOn);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        model.setUserSettings(userSettings);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 61,
      "larrylawl": 29,
      "chaitanyabaranwal": 19,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePersonWithMergeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePersonWithoutMergeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        + PREFIX_DATE_OF_BIRTH + \"DATE OF BIRTH\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        + PREFIX_GENDER + \"GENDER\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        + PREFIX_NRIC + \"S0000001J \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        + PREFIX_DATE_OF_BIRTH + \"12.12.1912 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        + PREFIX_GENDER + \"Male\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_INPUT_INFORMATION_HEADER \u003d \"Your input:\\n%1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DUPLICATE_PERSON_MERGE_PROMPT \u003d \"Do you wish to edit this person\u0027s profile?\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws DuplicatePersonWithoutMergeException,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        DuplicatePersonWithMergeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String exceptionMessage \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (toAdd.hasEqualEditableFields(model.getPerson(toAdd))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                exceptionMessage \u003d generateExceptionMessageWithoutMergePrompt(model.getPerson(toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                throw new DuplicatePersonWithoutMergeException(exceptionMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                exceptionMessage \u003d generateExceptionMessageWithMergePrompt(model.getPerson(toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                throw new DuplicatePersonWithMergeException(exceptionMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Generates an exception message with a merge prompt."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param original Original person in the addressbook."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return The exception message to be thrown."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String generateExceptionMessageWithMergePrompt(Person original) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder exceptionMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(original.toString() + NEW_LINE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(String.format(MESSAGE_INPUT_INFORMATION_HEADER, toAdd.toString()) + NEW_LINE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(DUPLICATE_PERSON_MERGE_PROMPT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return exceptionMessage.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Generates an exception message without a merge prompt. This method is used if the input person has all the same"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * compulsory data fields as the original person."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param original Original person in the addressbook."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return The exception message to be thrown."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String generateExceptionMessageWithoutMergePrompt(Person original) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder exceptionMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(original.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return exceptionMessage.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 42,
      "larrylawl": 8,
      "chaitanyabaranwal": 2,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddPolicyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COVERAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_AGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePolicyWithMergeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePolicyWithoutMergeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Adds a policy to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class AddPolicyCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addpolicy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a policy to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PREFIX_NAME + \"POLICY NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PREFIX_COVERAGE + \"TIME_PERIOD \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"[\" + PREFIX_START_AGE + \"START AGE]\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"[\" + PREFIX_END_AGE + \"END AGE]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PREFIX_NAME + \"Senior Care \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Insurance for elderly \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PREFIX_COVERAGE + \"months/10 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PREFIX_PRICE + \"$50000 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PREFIX_START_AGE + \"50 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PREFIX_END_AGE + \"75 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New policy added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_POLICY \u003d \"This policy already exists in the address book.\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_INPUT_INFORMATION_HEADER \u003d \"Your input:\\n%1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String DUPLICATE_POLICY_MERGE_PROMPT \u003d \"Do you wish to edit this policy\u0027s information?\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Policy toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public AddPolicyCommand(Policy policy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(policy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        toAdd \u003d policy;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (model.hasPolicy(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String exceptionMessage \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (toAdd.hasEqualEditableFields(model.getPolicy(toAdd))) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                exceptionMessage \u003d generateExceptionMessageWithoutMergePrompt(model.getPolicy(toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                throw new DuplicatePolicyWithoutMergeException(exceptionMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                exceptionMessage \u003d generateExceptionMessageWithMergePrompt(model.getPolicy(toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                throw new DuplicatePolicyWithMergeException(exceptionMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        model.addPolicy(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Generates an exception message with a merge prompt."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param original Original policy in the addressbook."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return The exception message to be thrown."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String generateExceptionMessageWithMergePrompt(Policy original) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder exceptionMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(MESSAGE_DUPLICATE_POLICY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(original.toString() + NEW_LINE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(String.format(MESSAGE_INPUT_INFORMATION_HEADER, toAdd.toString()) + NEW_LINE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(DUPLICATE_POLICY_MERGE_PROMPT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return exceptionMessage.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Generates an exception message without a merge prompt. This method is used if the input policy has all the same"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * compulsory data fields as the original policy."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param original Original person in the addressbook."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return The exception message to be thrown."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String generateExceptionMessageWithoutMergePrompt(Policy original) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder exceptionMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(MESSAGE_DUPLICATE_POLICY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(original.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return exceptionMessage.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof AddPolicyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPolicyCommand) other).toAdd));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 106,
      "chaitanyabaranwal": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddPolicyTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_POLICIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.util.PolicyBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " * Adds a tag to an existing policy in the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "public class AddPolicyTagCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addpolicytag\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds tag to the policy identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"by the index number used in the last policy listing. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"t/ TAG [MORE_TAGS]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"t/life t/accident\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private static final String MESSAGE_ADD_TAG_SUCCESS \u003d \"Added tag to Policy: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private final String[] tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public AddPolicyTagCommand(Index index, String... tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        requireAllNonNull(index, tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        List\u003cPolicy\u003e lastShownList \u003d model.getFilteredPolicyList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_POLICY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (tags.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Policy policyToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        for (String tag : tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            newTags.add(new Tag(tag));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Policy editedPolicy \u003d new PolicyBuilder(policyToEdit).addTags(newTags).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        model.setPolicy(policyToEdit, editedPolicy);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        model.updateFilteredPolicyList(PREDICATE_SHOW_ALL_POLICIES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        // Update persons with the edited policy"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        for (Person p : model.getAddressBook().getPersonList()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            if (p.hasPolicy(policyToEdit)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                Person policyRemoved \u003d new PersonBuilder(p).removePolicies(policyToEdit).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                Person editedPerson \u003d new PersonBuilder(policyRemoved).addPolicies(editedPolicy).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                model.setPerson(p, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPolicy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private String generateSuccessMessage(Policy policyToEdit) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return String.format(MESSAGE_ADD_TAG_SUCCESS, policyToEdit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (!(other instanceof AddPolicyTagCommand)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        AddPolicyTagCommand e \u003d (AddPolicyTagCommand) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 Arrays.equals(tags, e.tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 96,
      "chaitanyabaranwal": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " * Adds a tag to an existing person in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtag\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds tag to the person identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"t/ TAG [MORE_TAGS]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"t/smoker t/diabetic\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private static final String MESSAGE_ADD_TAG_SUCCESS \u003d \"Added tag to Person: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private final String[] tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public AddTagCommand(Index index, String... tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        requireAllNonNull(index, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (tags.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            MESSAGE_USAGE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        for (String tag : tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            newTags.add(new Tag(tag));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personToEdit)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                .addTags(newTags)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return String.format(MESSAGE_ADD_TAG_SUCCESS, personToEdit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (!(other instanceof AddTagCommand)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        AddTagCommand e \u003d (AddTagCommand) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 Arrays.equals(tags, e.tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 94,
      "chaitanyabaranwal": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignPolicyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PolicyBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Command to assign a new policy to a person."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class AssignPolicyCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assignpolicy\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns the policy to a person.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + PREFIX_POLICY + \"POLICY NAME\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + PREFIX_POLICY + \"health insurance\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_ASSIGN_POLICY_SUCCESS \u003d \"Assigned Policy: %1$s to Person: %2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_ALREADY_ASSIGNED \u003d \"Person: %1$s already has the Policy: %2$s.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_POLICY_NOT_FOUND \u003d \"Policy: %1$s not found in the list of policies.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private final PolicyName policyName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private final Index personIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @param personIndex Index of the person to be assigned"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @param policyName Name of the policy to assign"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public AssignPolicyCommand(Index personIndex, PolicyName policyName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(policyName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(personIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.personIndex \u003d personIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.policyName \u003d policyName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (personIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!model.hasPolicyWithName(policyName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_POLICY_NOT_FOUND, policyName));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Policy policy \u003d model.getPolicyWithName(policyName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person person \u003d lastShownPersonList.get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (person.hasPolicy(policy)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ALREADY_ASSIGNED, person.getName(), policy.getName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Policy copyPolicy \u003d new PolicyBuilder(policy).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person assignedPerson \u003d new PersonBuilder(person).addPolicies(copyPolicy).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.setPerson(person, assignedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_POLICY_SUCCESS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                policy.getName(), assignedPerson.getName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!(other instanceof AssignPolicyCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        AssignPolicyCommand e \u003d (AssignPolicyCommand) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return personIndex.equals(e.personIndex)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                \u0026\u0026 policyName.equals(e.policyName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayIndicator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Application should display list of policies"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private boolean listPolicy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Application should display list of people"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private boolean listPeople;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /** Application should expand the person on the right panel */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private boolean expandPerson;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /** Application should expand the policy on the right panel */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private boolean expandPolicy;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Person personToExpand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Policy policyToExpand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /** Application should display history of commands */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private boolean listHistory;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Application should display report"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private boolean report;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Application should display specified indicator"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private boolean display;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private DisplayIndicator displayIndicator;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private DisplayFormat displayFormat;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public CommandResult(String feedbackToUser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                         boolean showHelp,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                         boolean exit,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                         boolean listPolicy,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                         boolean listPeople,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                         boolean report,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                         boolean display,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                         boolean expandPerson,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                         boolean expandPolicy,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                         boolean listHistory) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.listPolicy \u003d listPolicy;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.listPeople \u003d listPeople;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.report \u003d report;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.display \u003d display;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.listHistory \u003d listHistory;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.expandPerson \u003d expandPerson;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.expandPolicy \u003d expandPolicy;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public CommandResult(String feedbackToUser, Person personToExpand) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, true, false, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.personToExpand \u003d personToExpand;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public CommandResult(String feedbackToUser, Policy policyToExpand) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, true, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.policyToExpand \u003d policyToExpand;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public CommandResult(String feedbackToUser, DisplayIndicator displayIndicator, DisplayFormat displayFormat) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            true, false, false, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.displayIndicator \u003d displayIndicator;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.displayFormat \u003d displayFormat;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public boolean isListPolicy() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return listPolicy;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public boolean isListPeople() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return listPeople;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public boolean isReport() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return report;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public boolean isDisplay() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return display;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public boolean isExpandPerson() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return expandPerson;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public boolean isExpandPolicy() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return expandPolicy;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public DisplayIndicator getDisplayIndicator() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return displayIndicator;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public DisplayFormat getDisplayFormat() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return displayFormat;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public Person getPersonToExpand() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return personToExpand;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public Policy getPolicyToExpand() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return policyToExpand;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean isListHistory() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return listHistory;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 listPolicy \u003d\u003d otherCommandResult.listPolicy"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 listPeople \u003d\u003d otherCommandResult.listPeople"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 report \u003d\u003d otherCommandResult.report"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 display \u003d\u003d otherCommandResult.display"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 expandPerson \u003d\u003d otherCommandResult.expandPerson"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 expandPolicy \u003d\u003d otherCommandResult.expandPolicy"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 listHistory \u003d\u003d otherCommandResult.listHistory;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, listPolicy, listPeople, report,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            display, expandPerson, expandPolicy, listHistory);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 10,
      "larrylawl": 124,
      "chaitanyabaranwal": 8,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 2,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeletePolicyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ybchen97"
        },
        "content": " * Deletes a policy identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ybchen97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "public class DeletePolicyCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletepolicy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \": Deletes the policy identified by the index number used in the displayed policy list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String MESSAGE_DELETE_POLICY_SUCCESS \u003d \"Deleted Policy: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public DeletePolicyCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        List\u003cPolicy\u003e lastShownList \u003d model.getFilteredPolicyList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_POLICY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        Policy policyToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        model.deletePolicy(policyToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        // Update persons with the edited policy"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        for (Person p : model.getAddressBook().getPersonList()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            if (p.hasPolicy(policyToDelete)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                Person editedPerson \u003d new PersonBuilder(p).removePolicies(policyToDelete).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                model.setPerson(p, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_POLICY_SUCCESS, policyToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                || (other instanceof DeletePolicyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePolicyCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 4,
      "ybchen97": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeletePolicyTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_POLICIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.util.PolicyBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " * Deletes a tag of an existing policy in the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "public class DeletePolicyTagCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletepolicytag\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes tag of the policy identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"by the index number used in the last policy listing. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"t/ TAG [MORE_TAGS]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"t/life t/accident\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted tag of Policy: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private static final String MESSAGE_TAG_NOT_FOUND \u003d \"No matching tags found of Policy: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private final String[] tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public DeletePolicyTagCommand(Index index, String... tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        requireAllNonNull(index, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        List\u003cPolicy\u003e lastShownList \u003d model.getFilteredPolicyList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_POLICY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (tags.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            MESSAGE_USAGE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Policy policyToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        List\u003cTag\u003e removeTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        for (String tag : tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            removeTags.add(new Tag(tag));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        boolean tagsRemoved \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        for (Tag removeTag : removeTags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            for (Tag tag : policyToEdit.getTags()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                if (removeTag \u003d\u003d tag) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    tagsRemoved \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            if (tagsRemoved) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Policy editedPolicy \u003d new PolicyBuilder(policyToEdit)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                .removeTags(removeTags)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        model.setPolicy(policyToEdit, editedPolicy);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        model.updateFilteredPolicyList(PREDICATE_SHOW_ALL_POLICIES);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        // Update persons with the edited policy"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        for (Person p : model.getAddressBook().getPersonList()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            if (p.hasPolicy(policyToEdit)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                Person policyRemoved \u003d new PersonBuilder(p).removePolicies(policyToEdit).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                Person editedPerson \u003d new PersonBuilder(policyRemoved).addPolicies(editedPolicy).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                model.setPerson(p, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPolicy, tagsRemoved));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Parses {@code personToEdit} and {@code tagsRemoved} and returns a {@code String}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private String generateSuccessMessage(Policy policyToEdit, boolean tagsRemoved) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (tagsRemoved) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return String.format(MESSAGE_DELETE_TAG_SUCCESS, policyToEdit);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return String.format(MESSAGE_TAG_NOT_FOUND, policyToEdit);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (!(other instanceof DeletePolicyTagCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        DeletePolicyTagCommand e \u003d (DeletePolicyTagCommand) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 Arrays.equals(tags, e.tags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 128,
      "chaitanyabaranwal": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " * Deletes a tag of an existing person in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "public class DeleteTagCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetag\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes tag of the person identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"t/ TAG [MORE_TAGS]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            + \"t/smoker t/diabetic\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted tag of Person: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private static final String MESSAGE_TAG_NOT_FOUND \u003d \"No matching tags found of Policy: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private final String[] tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public DeleteTagCommand(Index index, String... tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        requireAllNonNull(index, tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (tags.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            MESSAGE_USAGE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        List\u003cTag\u003e removeTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        for (String tag : tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            removeTags.add(new Tag(tag));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        boolean tagsRemoved \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        for (Tag removeTag : removeTags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            for (Tag tag : personToEdit.getTags()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                if (removeTag \u003d\u003d tag) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    tagsRemoved \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            if (tagsRemoved) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personToEdit)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                .removeTags(removeTags)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson, tagsRemoved));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Parses {@code personToEdit} and {@code tagsRemoved} and returns a {@code String}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit, boolean tagsRemoved) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (tagsRemoved) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return String.format(MESSAGE_DELETE_TAG_SUCCESS, personToEdit);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return String.format(MESSAGE_TAG_NOT_FOUND, personToEdit);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (!(other instanceof DeleteTagCommand)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        DeleteTagCommand e \u003d (DeleteTagCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 Arrays.equals(tags, e.tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 117,
      "chaitanyabaranwal": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DisplayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDICATOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayIndicator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Displays indicator according to specified format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class DisplayCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"display\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        COMMAND_WORD + \": Displays indicator according to specified format.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + PREFIX_INDICATOR + \"INDICATOR \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + PREFIX_FORMAT + \"FORMAT\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + PREFIX_INDICATOR + DisplayIndicator.POLICY_POPULARITY_BREAKDOWN + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + PREFIX_FORMAT + DisplayFormat.PIECHART + \" \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + DisplayIndicator.getMessageConstraints() + \" \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + DisplayFormat.getMessageConstraints();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private final DisplayIndicator displayIndicator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private final DisplayFormat displayFormat;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Creates a DisplayCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public DisplayCommand(DisplayIndicator displayIndicator, DisplayFormat displayFormat) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(displayIndicator);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.displayIndicator \u003d displayIndicator;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.displayFormat \u003d displayFormat;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        String messageSuccess \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \"Displayed \" + displayIndicator"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + \" with \" + displayFormat + \" successfully.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new CommandResult(messageSuccess, this.displayIndicator, this.displayFormat);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        + \"[\" + PREFIX_DATE_OF_BIRTH + \"DATE OF BIRTH] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public EditCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.editPersonDescriptor \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        DateOfBirth updatedDateOfBirth \u003d editPersonDescriptor.getDateOfBirth().orElse(personToEdit.getDateOfBirth());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Set\u003cPolicy\u003e updatedPolicies \u003d personToEdit.getPolicies();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new Person(updatedName, updatedNric, updatedPhone, updatedEmail, updatedAddress, updatedDateOfBirth,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            updatedGender, updatedPolicies, updatedTags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Performs an edit of one field of a {@code Person} in the addressbook. This method should only be called by a"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * {@code MergeConfirmedCommand}/"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param person               Person in the addressbook."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param editPersonDescriptor {@code EditPersonDescriptor} for person with updated field."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param model                Model that is used for the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return The updated {@code Person}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Person executeForMerge(Person person, EditPersonDescriptor editPersonDescriptor, Model model) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(person, editPersonDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        model.setPerson(person, editedPerson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return editedPerson;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Set\u003cPolicy\u003e policies;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            setPolicies(toCopy.policies);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, nric, phone, email, address, dateOfBirth);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void setDateOfBirth(DateOfBirth dateOfBirth) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * Returns an unmodifiable policy set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code policy} is null."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Optional\u003cSet\u003cPolicy\u003e\u003e getPolicies() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return (policies !\u003d null) ? Optional.of(Collections.unmodifiableSet(policies)) : Optional.empty();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "         * Sets {@code policies} to this object\u0027s {@code policies}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "         * A defensive copy of {@code policies} is used internally."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void setPolicies(Set\u003cPolicy\u003e policies) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            this.policies \u003d (policies !\u003d null) ? new HashSet\u003c\u003e(policies) : null;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 getNric().equals(e.getNric())"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                \u0026\u0026 getGender().equals(e.getGender());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 42,
      "larrylawl": 54,
      "chaitanyabaranwal": 2,
      "-": 215
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditPolicyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COVERAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_AGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_POLICIES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.policy.Price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ybchen97"
        },
        "content": " * Edits the details of an existing policy in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ybchen97"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "public class EditPolicyCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editpolicy\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the policy identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"by the index number used in the displayed policy list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"[\" + PREFIX_COVERAGE + \"COVERAGE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"[\" + PREFIX_START_AGE + \"START_AGE]\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"[\" + PREFIX_END_AGE + \"END_AGE]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            // Todo: check if price takes in a \"$\" sign"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Fire Insurance Policy. Covers all ages up to 10 years. \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + PREFIX_PRICE + \"$20000\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String MESSAGE_EDIT_POLICY_SUCCESS \u003d \"Edited Policy: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_POLICY \u003d \"This policy already exists in the address book.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    private final EditPolicyDescriptor editPolicyDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * @param index of the policy in the filtered policy list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * @param editPolicyDescriptor details to edit the policy with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public EditPolicyCommand(Index index, EditPolicyDescriptor editPolicyDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        requireNonNull(editPolicyDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        this.editPolicyDescriptor \u003d new EditPolicyDescriptor(editPolicyDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public EditPolicyCommand() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.editPolicyDescriptor \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        List\u003cPolicy\u003e lastShownList \u003d model.getFilteredPolicyList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_POLICY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        Policy policyToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        Policy editedPolicy \u003d createEditedPolicy(policyToEdit, editPolicyDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (!policyToEdit.isSamePolicy(editedPolicy) \u0026\u0026 model.hasPolicy(editedPolicy)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_POLICY);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        model.setPolicy(policyToEdit, editedPolicy);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        model.updateFilteredPolicyList(PREDICATE_SHOW_ALL_POLICIES);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        updatePersonsWithPolicy(policyToEdit, editedPolicy, model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_POLICY_SUCCESS, editedPolicy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * Creates and returns a {@code Policy} with the details of {@code policy}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * edited with {@code editPolicyDescriptor}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    private static Policy createEditedPolicy(Policy policyToEdit, EditPolicyDescriptor editPolicyDescriptor) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        assert policyToEdit !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        PolicyName updatedName \u003d editPolicyDescriptor.getName().orElse(policyToEdit.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        Description updatedDescription \u003d editPolicyDescriptor.getDescription().orElse(policyToEdit.getDescription());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        Coverage updatedCoverage \u003d editPolicyDescriptor.getCoverage().orElse(policyToEdit.getCoverage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        Price updatedPrice \u003d editPolicyDescriptor.getPrice().orElse(policyToEdit.getPrice());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        StartAge updatedStartAge \u003d editPolicyDescriptor.getStartAge().orElse(policyToEdit.getStartAge());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        EndAge updatedEndAge \u003d editPolicyDescriptor.getEndAge().orElse(policyToEdit.getEndAge());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        Set\u003cTag\u003e updatedCriteria \u003d policyToEdit.getCriteria();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d policyToEdit.getTags();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return new Policy(updatedName, updatedDescription, updatedCoverage, updatedPrice, updatedStartAge,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                updatedEndAge, updatedCriteria, updatedTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Performs an edit of one field of a {@code Policy} in the addressbook. This method should only be called by a"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * {@code MergePolicyConfirmedCommand}/"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param policy Policy in the addressbook."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param editPolicyDescriptor {@code EditPolicyDescriptor} for policy with updated field."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param model Model that is used for the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return The updated {@code Person}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Policy executeForMerge(Policy policy, EditPolicyDescriptor editPolicyDescriptor, Model model) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy editedPolicy \u003d createEditedPolicy(policy, editPolicyDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        model.setPolicy(policy, editedPolicy);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        updatePersonsWithPolicy(policy, editedPolicy, model);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return editedPolicy;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Updates persons with an edited policy."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param oldPolicy Previous policy."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param newPolicy Edited policy."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param model Addressbook model."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void updatePersonsWithPolicy(Policy oldPolicy, Policy newPolicy, Model model) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (Person p : model.getAddressBook().getPersonList()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (p.hasPolicy(oldPolicy)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Person policyRemoved \u003d new PersonBuilder(p).removePolicies(oldPolicy).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Person editedPerson \u003d new PersonBuilder(policyRemoved).addPolicies(newPolicy).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                model.setPerson(p, editedPerson);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (!(other instanceof EditPolicyCommand)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        EditPolicyCommand e \u003d (EditPolicyCommand) other;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                \u0026\u0026 editPolicyDescriptor.equals(e.editPolicyDescriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * Stores the details to edit the policy with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * corresponding field value of the policy."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static class EditPolicyDescriptor {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        private PolicyName name;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        private Coverage coverage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        private StartAge startAge;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        private EndAge endAge;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        private Set\u003cTag\u003e criteria;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public EditPolicyDescriptor() {}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public EditPolicyDescriptor(EditPolicyDescriptor toCopy) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            setCoverage(toCopy.coverage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            setStartAge(toCopy.startAge);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            setEndAge(toCopy.endAge);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            setCriteria(toCopy.criteria);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, coverage, price, startAge, endAge);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public void setName(PolicyName name) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public Optional\u003cPolicyName\u003e getName() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public void setCoverage(Coverage coverage) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            this.coverage \u003d coverage;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public Optional\u003cCoverage\u003e getCoverage() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return Optional.ofNullable(coverage);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public void setStartAge(StartAge startAge) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            this.startAge \u003d startAge;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public Optional\u003cStartAge\u003e getStartAge() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return Optional.ofNullable(startAge);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public void setEndAge(EndAge endAge) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            this.endAge \u003d endAge;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public Optional\u003cEndAge\u003e getEndAge() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return Optional.ofNullable(endAge);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * Sets {@code criteria} to this object\u0027s {@code criteria}."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * A defensive copy of {@code criteria} is used internally."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public void setCriteria(Set\u003cTag\u003e criteria) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            this.criteria \u003d (criteria !\u003d null) ? new HashSet\u003c\u003e(criteria) : null;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * Returns an unmodifiable criteria set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code criteria} is null."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getCriteria() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return (criteria !\u003d null) ? Optional.of(Collections.unmodifiableSet(criteria)) : Optional.empty();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            if (!(other instanceof EditPolicyDescriptor)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            EditPolicyDescriptor e \u003d (EditPolicyDescriptor) other;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                    \u0026\u0026 getCoverage().equals(e.getCoverage())"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice())"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                    \u0026\u0026 getStartAge().equals(e.getStartAge())"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                    \u0026\u0026 getEndAge().equals(e.getEndAge());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 37,
      "chaitanyabaranwal": 3,
      "ybchen97": 279
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 1,
      "larrylawl": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExpandPersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Expands the selected person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class ExpandPersonCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"expandperson\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expanded: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        + \"by the index number used in the displayed person list. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ExpandPersonCommand(Index index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Person personToExpand \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, personToExpand), personToExpand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExpandPolicyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Expands the selected policy."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class ExpandPolicyCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"expandpolicy\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expanded: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        + \"by the index number used in the displayed person list. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ExpandPolicyCommand(Index index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        List\u003cPolicy\u003e lastShownList \u003d model.getFilteredPolicyList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_POLICY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Policy policyToExpand \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, policyToExpand), policyToExpand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            true,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 5,
      "larrylawl": 6,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindPolicyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.policy.PolicyNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " * Finds and lists all policies in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "public class FindPolicyCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findpolicy\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all policies whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" life accident\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private final PolicyNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public FindPolicyCommand(PolicyNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        model.updateFilteredPolicyList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            String.format(Messages.MESSAGE_POLICIES_LISTED_OVERVIEW, model.getFilteredPolicyList().size()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            true,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            || (other instanceof FindPolicyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindPolicyCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 46,
      "larrylawl": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Lists the available policies in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of all previously entered commands.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all previously entered commands (from most recent).\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false, false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 2,
      "chaitanyabaranwal": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListPeopleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class ListPeopleCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listpeople\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            true, false, false, false, false, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 2,
      "larrylawl": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListPolicyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_POLICIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Lists the available policies in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class ListPolicyCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listpolicy\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of all current policies.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all policies\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        model.updateFilteredPolicyList(PREDICATE_SHOW_ALL_POLICIES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 25,
      "chaitanyabaranwal": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Redos the state of the address book to a previously undone state."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"A redo has been performed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String REDO_NOT_POSSIBLE \u003d \"Nothing to redo!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new CommandException(REDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Lists the available policies in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class ReportCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Generates report of Key Performance Indicators (KPI).\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Report generated\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, false,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, true, false, false, false, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SuggestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandWordException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Gives suggestions for incorrect user input commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class SuggestionCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE \u003d \"%1$s is not recognised.\\nDid you mean: \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String originalCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String suggestedCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public SuggestionCommand(String originalCommand, String suggestedCommand, String arguments) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.originalCommand \u003d originalCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.suggestedCommand \u003d suggestedCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandWordException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String message \u003d generateMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String suggestedCommand \u003d generateSuggestedCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        throw new CommandWordException(message, suggestedCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String generateMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        message.append(String.format(MESSAGE, originalCommand) + generateSuggestedCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String generateSuggestedCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        message.append(suggestedCommand + \" \" + arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SuggestionSwitchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFF;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandWordException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class SuggestionSwitchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"suggestion\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches command suggestions on and off. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"[\" + PREFIX_ON + \"] \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"[\" + PREFIX_OFF + \"]\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PREFIX_ON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Suggestions have been switched %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String SWITCH_ON \u003d \"on\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String SWITCH_OFF \u003d \"off\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private boolean on;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public SuggestionSwitchCommand(boolean on) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.on \u003d on;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandWordException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (on) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, SWITCH_ON));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, SWITCH_OFF));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isOn() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return on;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnassignPolicyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Command to assign a new policy to a person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class UnassignPolicyCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unassignpolicy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes an assigned policy from a person.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + PREFIX_POLICY + \"POLICY NAME\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            + PREFIX_POLICY + \"health insurance\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_UNASSIGN_POLICY_SUCCESS \u003d \"Unassigned Policy: %1$s from Person: %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_ALREADY_UNASSIGNED \u003d \"Person: %1$s does not have the Policy: %2$s.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_POLICY_NOT_FOUND \u003d \"Policy: %1$s not found in list of policies.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private final Index personIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private final PolicyName policyName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @param personIndex Index of the person to be unassigned"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @param policyName Name of the policy to be assigned"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public UnassignPolicyCommand(Index personIndex, PolicyName policyName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(personIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(policyName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.personIndex \u003d personIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.policyName \u003d policyName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (personIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!model.hasPolicyWithName(policyName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_POLICY_NOT_FOUND, policyName));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Policy policy \u003d model.getPolicyWithName(policyName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person person \u003d lastShownPersonList.get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!person.hasPolicy(policy)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ALREADY_UNASSIGNED,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                    person.getName(), policy.getName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person assignedPerson \u003d new PersonBuilder(person).removePolicies(policy).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.setPerson(person, assignedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // to maintain the model\u0027s state for undo/redo"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.saveAddressBookState();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNASSIGN_POLICY_SUCCESS, policy.getName(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                assignedPerson.getName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!(other instanceof UnassignPolicyCommand)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UnassignPolicyCommand e \u003d (UnassignPolicyCommand) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return personIndex.equals(e.personIndex)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                \u0026\u0026 policyName.equals(e.policyName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Undoes the state of the address book to a previous state."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"An undo has been performed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String UNDO_NOT_POSSIBLE \u003d \"Nothing to undo!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new CommandException(UNDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandWordException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents an error which occurs during execution of a {@link SuggestionCommand}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class CommandWordException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String suggestion;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandWordException(String message, String suggestion) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.suggestion \u003d suggestion;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandWordException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getCommandSuggestion() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return this.suggestion;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/DuplicatePersonWithMergeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a duplicate error which occurs during execution of a {@link AddCommand}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DuplicatePersonWithMergeException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DuplicatePersonWithMergeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DuplicatePersonWithMergeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/DuplicatePersonWithoutMergeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a duplicate error which occurs during execution of a {@link AddCommand}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DuplicatePersonWithoutMergeException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DuplicatePersonWithoutMergeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DuplicatePersonWithoutMergeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/DuplicatePolicyException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a duplicate error which occurs during execution of a {@link AddPolicyCommand}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DuplicatePolicyException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DuplicatePolicyException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DuplicatePolicyException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/DuplicatePolicyWithMergeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a duplicate error which occurs during execution of a {@link AddPolicyCommand}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DuplicatePolicyWithMergeException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DuplicatePolicyWithMergeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DuplicatePolicyWithMergeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/DuplicatePolicyWithoutMergeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a duplicate error which occurs during execution of a {@link AddPolicyCommand}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DuplicatePolicyWithoutMergeException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DuplicatePolicyWithoutMergeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DuplicatePolicyWithoutMergeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/DoNotMergePersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePersonWithMergeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Rejects merging a duplicate profile."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DoNotMergePersonCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"nmerge\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"This profile was not updated : %1$s.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Person inputPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Person originalPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an DoNotMergePersonCommand to skip the merging of a field in a merging process."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DoNotMergePersonCommand(Person inputPerson) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(inputPerson);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.inputPerson \u003d inputPerson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws DuplicatePersonWithMergeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.originalPerson \u003d model.getPerson(inputPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, originalPerson));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof DoNotMergePersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 inputPerson.equals(((DoNotMergePersonCommand) other).inputPerson));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/DoNotMergePolicyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePolicyWithMergeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Rejects merging a duplicate policy."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DoNotMergePolicyCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"npmerge\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"This profile was not updated : %1$s.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Policy inputPolicy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Policy originalPolicy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private ArrayList\u003cString[]\u003e differentFields \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an DoNoMergePolicy to skip the merging of a field in a merging process."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DoNotMergePolicyCommand(Policy inputPolicy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(inputPolicy);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.inputPolicy \u003d inputPolicy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws DuplicatePolicyWithMergeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.originalPolicy \u003d model.getPolicy(inputPolicy);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, originalPolicy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof DoNotMergePolicyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 inputPolicy.equals(((DoNotMergePolicyCommand) other).inputPolicy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/MergeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Merges a user input and the duplicate object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public abstract class MergeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an {@code MergeCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergeCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public abstract String[] getDifferences();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public abstract void removeFirstDifferentField();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public abstract String getNextMergeFieldType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public abstract boolean onlyOneMergeLeft();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof MergeCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/MergeConfirmedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Updates a data field of a duplicate entity in the Addressbook."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public abstract class MergeConfirmedCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"yes\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DEFAULT_COMMAND_WORD \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an {@code MergeConfirmedCommand} to update the original object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergeConfirmedCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public abstract boolean isLastMerge();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof MergeConfirmedCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/MergePersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePersonWithMergeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Merges the user input and the duplicate {@code Person}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePersonCommand extends MergeCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"merge\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Profile was successfully updated:\\n%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MERGE_COMMAND_PROMPT \u003d \"Do you wish to edit this person\u0027s %1$s?\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String ORIGINAL_HEADER \u003d \"Original: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String INPUT_HEADER \u003d \"Input: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Person inputPerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Person originalPerson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private ArrayList\u003cString[]\u003e differentFields \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an {@code MergePersonCommand} to update the original {@code Person} to the new {@code Person}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergePersonCommand(Person inputPerson) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(inputPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.inputPerson \u003d inputPerson;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws DuplicatePersonWithMergeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.originalPerson \u003d model.getPerson(inputPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        getDifferences();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new CommandResult(getNextMergePrompt());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void updateOriginalPerson(Person editedPerson) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.originalPerson \u003d editedPerson;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getNextMergePrompt() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] fieldThatIsDifferent \u003d differentFields.get(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String fieldType \u003d fieldThatIsDifferent[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String original \u003d fieldThatIsDifferent[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String input \u003d fieldThatIsDifferent[2];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder mergePrompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        mergePrompt.append(String.format(MERGE_COMMAND_PROMPT, fieldType) + \"\\n\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(ORIGINAL_HEADER + original + \"\\n\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(INPUT_HEADER + input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return mergePrompt.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns an array of the first different field type, original field info and the input field info."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String[] getDifferences() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasDifferentPhone \u003d !originalPerson.getPhone().equals(inputPerson.getPhone());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasDifferentPhone) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            differentFields.add(new String[]{"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Phone.DATA_TYPE, originalPerson.getPhone().value, inputPerson.getPhone().value});"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasDifferentAddress \u003d !originalPerson.getAddress().equals(inputPerson.getAddress());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasDifferentAddress) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            differentFields.add(new String[]{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Address.DATA_TYPE, originalPerson.getAddress().value, inputPerson.getAddress().value});"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasDifferentEmail \u003d !originalPerson.getEmail().equals(inputPerson.getEmail());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasDifferentEmail) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            differentFields.add(new String[]{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Email.DATA_TYPE, originalPerson.getEmail().value, inputPerson.getEmail().value});"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasDifferentDateOfBirth \u003d !originalPerson.getDateOfBirth().equals(inputPerson.getDateOfBirth());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasDifferentDateOfBirth) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            differentFields.add(new String[]{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                DateOfBirth.DATA_TYPE, originalPerson.getDateOfBirth().value, inputPerson.getDateOfBirth().value});"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void removeFirstDifferentField() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        differentFields.remove(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getNextMergeFieldType() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return differentFields.get(0)[0];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Person getInputPerson() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return this.inputPerson;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Person getOriginalPerson() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return this.originalPerson;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean onlyOneMergeLeft() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return differentFields.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof MergePersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 inputPerson.equals(((MergePersonCommand) other).inputPerson));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/MergePersonConfirmedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePersonWithMergeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Updates a data field of a duplicate {@code Person} in the Addressbook."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePersonConfirmedCommand extends MergeConfirmedCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_MERGE_FIELD_SUCCESS \u003d \"Successfully updated %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private MergePersonCommand previousMergeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an {@code MergePersonConfirmedCommand} to update the original {@code Person}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergePersonConfirmedCommand(MergePersonCommand previousMergeCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(previousMergeCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.previousMergeCommand \u003d previousMergeCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws DuplicatePersonWithMergeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person originalPerson \u003d previousMergeCommand.getOriginalPerson();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person inputPerson \u003d previousMergeCommand.getInputPerson();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String fieldType \u003d previousMergeCommand.getNextMergeFieldType();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        switch(fieldType) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case Phone.DATA_TYPE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            editPersonDescriptor.setPhone(inputPerson.getPhone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case Address.DATA_TYPE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            editPersonDescriptor.setAddress(inputPerson.getAddress());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case Email.DATA_TYPE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            editPersonDescriptor.setEmail(inputPerson.getEmail());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case DateOfBirth.DATA_TYPE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            editPersonDescriptor.setDateOfBirth(inputPerson.getDateOfBirth());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        EditCommand edit \u003d new EditCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person editedPerson \u003d edit.executeForMerge(originalPerson, editPersonDescriptor, model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        previousMergeCommand.updateOriginalPerson(editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isLastMerge()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MERGE_FIELD_SUCCESS, fieldType)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \"\\n\" + String.format(previousMergeCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    previousMergeCommand.getOriginalPerson()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            previousMergeCommand.removeFirstDifferentField();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String nextMerge \u003d previousMergeCommand.getNextMergePrompt();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MERGE_FIELD_SUCCESS, fieldType)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \"\\n\" + nextMerge);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isLastMerge() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return previousMergeCommand.onlyOneMergeLeft();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof MergePersonConfirmedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 previousMergeCommand.equals(((MergePersonConfirmedCommand) other).previousMergeCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/MergePersonRejectedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePersonWithMergeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Rejects an update of a data field of a duplicate {@code Person} in the Addressbook."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePersonRejectedCommand extends MergeRejectedCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_MERGE_FIELD_NOT_EXECUTED \u003d \"%1$s not updated.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private MergePersonCommand previousMergeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an {@code MergePersonRejectedCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergePersonRejectedCommand(MergePersonCommand previousMergeCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(previousMergeCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.previousMergeCommand \u003d previousMergeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws DuplicatePersonWithMergeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String fieldType \u003d previousMergeCommand.getNextMergeFieldType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isLastMerge()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MERGE_FIELD_NOT_EXECUTED, fieldType)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \"\\n\" + String.format(previousMergeCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    previousMergeCommand.getOriginalPerson()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            previousMergeCommand.removeFirstDifferentField();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String nextMerge \u003d previousMergeCommand.getNextMergePrompt();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MERGE_FIELD_NOT_EXECUTED, fieldType)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \"\\n\" + nextMerge);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isLastMerge() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return previousMergeCommand.onlyOneMergeLeft();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof MergePersonRejectedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 previousMergeCommand.equals(((MergePersonRejectedCommand) other).previousMergeCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/MergePolicyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePolicyWithMergeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Merges the user input and the duplicate {@code Policy}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePolicyCommand extends MergeCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mergepolicy\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Policy was successfully updated:\\n%1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MERGE_COMMAND_PROMPT \u003d \"Do you wish to edit this policy\u0027s %1$s?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String ORIGINAL_HEADER \u003d \"Original: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String INPUT_HEADER \u003d \"Input: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Policy inputPolicy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Policy originalPolicy;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private ArrayList\u003cString[]\u003e differentFields \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an {@code MergePolicyCommand} to update the original {@code Policy} to the new {@code Policy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergePolicyCommand(Policy inputPolicy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(inputPolicy);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.inputPolicy \u003d inputPolicy;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws DuplicatePolicyWithMergeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.originalPolicy \u003d model.getPolicy(inputPolicy);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        getDifferences();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new CommandResult(getNextMergePrompt());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void updateOriginalPolicy(Policy editedPolicy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.originalPolicy \u003d editedPolicy;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getNextMergePrompt() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] fieldThatIsDifferent \u003d differentFields.get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String fieldType \u003d fieldThatIsDifferent[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String original \u003d fieldThatIsDifferent[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String input \u003d fieldThatIsDifferent[2];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder mergePrompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        mergePrompt.append(String.format(MERGE_COMMAND_PROMPT, fieldType) + \"\\n\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(ORIGINAL_HEADER + original + \"\\n\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(INPUT_HEADER + input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return mergePrompt.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns an array of the first different field type, original field info and the input field info."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String[] getDifferences() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasDifferentDescription \u003d !originalPolicy.getDescription().equals(inputPolicy.getDescription());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasDifferentDescription) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            differentFields.add(new String[]{"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Description.DATA_TYPE, originalPolicy.getDescription().description,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    inputPolicy.getDescription().description});"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasDifferentCoverage \u003d !originalPolicy.getCoverage().equals(inputPolicy.getCoverage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasDifferentCoverage) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            differentFields.add(new String[]{"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Coverage.DATA_TYPE, originalPolicy.getCoverage().coverage, inputPolicy.getCoverage().coverage});"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasDifferentPrice \u003d !originalPolicy.getPrice().equals(inputPolicy.getPrice());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasDifferentPrice) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            differentFields.add(new String[]{"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                Price.DATA_TYPE, originalPolicy.getPrice().price, inputPolicy.getPrice().price});"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasDifferentStartAge \u003d !originalPolicy.getStartAge().equals(inputPolicy.getStartAge());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasDifferentStartAge) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            differentFields.add(new String[]{"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                StartAge.DATA_TYPE, originalPolicy.getStartAge().age, inputPolicy.getStartAge().age});"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasDifferentEndAge \u003d !originalPolicy.getEndAge().equals(inputPolicy.getEndAge());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasDifferentEndAge) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            differentFields.add(new String[]{"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                EndAge.DATA_TYPE, originalPolicy.getEndAge().age, inputPolicy.getEndAge().age});"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void removeFirstDifferentField() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        differentFields.remove(0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String getNextMergeFieldType() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return differentFields.get(0)[0];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Policy getInputPolicy() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return this.inputPolicy;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Policy getOriginalPolicy() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return this.originalPolicy;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if this is the last merge in the merge process."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean onlyOneMergeLeft() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return differentFields.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof MergePolicyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 inputPolicy.equals(((MergePolicyCommand) other).inputPolicy));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/MergePolicyConfirmedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.EditPolicyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePersonWithMergeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Updates a data field of a duplicate {@code Policy} in the Addressbook."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePolicyConfirmedCommand extends MergeConfirmedCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_MERGE_FIELD_SUCCESS \u003d \"Successfully updated %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private MergePolicyCommand previousMergeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an {@code MergePolicyConfirmedCommand} to update the original {@code Policy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergePolicyConfirmedCommand(MergePolicyCommand previousMergeCommand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(previousMergeCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.previousMergeCommand \u003d previousMergeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws DuplicatePersonWithMergeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy originalPolicy \u003d previousMergeCommand.getOriginalPolicy();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy inputPolicy \u003d previousMergeCommand.getInputPolicy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String fieldType \u003d previousMergeCommand.getNextMergeFieldType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        EditPolicyCommand.EditPolicyDescriptor editPolicyDescriptor \u003d new EditPolicyCommand.EditPolicyDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        switch(fieldType) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case Description.DATA_TYPE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            editPolicyDescriptor.setDescription(inputPolicy.getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case Coverage.DATA_TYPE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            editPolicyDescriptor.setCoverage(inputPolicy.getCoverage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case Price.DATA_TYPE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            editPolicyDescriptor.setPrice(inputPolicy.getPrice());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case StartAge.DATA_TYPE:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            editPolicyDescriptor.setStartAge(inputPolicy.getStartAge());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case EndAge.DATA_TYPE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            editPolicyDescriptor.setEndAge(inputPolicy.getEndAge());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        EditPolicyCommand edit \u003d new EditPolicyCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy editedPolicy \u003d edit.executeForMerge(originalPolicy, editPolicyDescriptor, model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        previousMergeCommand.updateOriginalPolicy(editedPolicy);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isLastMerge()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MERGE_FIELD_SUCCESS, fieldType)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \"\\n\" + String.format(previousMergeCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    previousMergeCommand.getOriginalPolicy()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            previousMergeCommand.removeFirstDifferentField();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String nextMerge \u003d previousMergeCommand.getNextMergePrompt();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MERGE_FIELD_SUCCESS, fieldType)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \"\\n\" + nextMerge);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isLastMerge() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return previousMergeCommand.onlyOneMergeLeft();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof MergePolicyConfirmedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 previousMergeCommand.equals(((MergePolicyConfirmedCommand) other).previousMergeCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/MergePolicyRejectedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePolicyWithMergeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Rejects an update of a data field of a duplicate {@code Policy} in the Addressbook."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePolicyRejectedCommand extends MergeRejectedCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_MERGE_FIELD_NOT_EXECUTED \u003d \"%1$s not updated.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private MergePolicyCommand previousMergeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an {@code MergePolicyRejectedCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergePolicyRejectedCommand(MergePolicyCommand previousMergeCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(previousMergeCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.previousMergeCommand \u003d previousMergeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws DuplicatePolicyWithMergeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String fieldType \u003d previousMergeCommand.getNextMergeFieldType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isLastMerge()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MERGE_FIELD_NOT_EXECUTED, fieldType)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \"\\n\" + String.format(previousMergeCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    previousMergeCommand.getOriginalPolicy()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            previousMergeCommand.removeFirstDifferentField();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String nextMerge \u003d previousMergeCommand.getNextMergePrompt();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MERGE_FIELD_NOT_EXECUTED, fieldType)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \"\\n\" + nextMerge);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isLastMerge() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return previousMergeCommand.onlyOneMergeLeft();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof MergePolicyRejectedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 previousMergeCommand.equals(((MergePolicyRejectedCommand) other).previousMergeCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/MergeRejectedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Rejects an update of a data field of a duplicate entity in the Addressbook."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public abstract class MergeRejectedCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"no\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an {@code MergeRejectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergeRejectedCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public abstract boolean isLastMerge();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof MergeRejectedCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/merge/MergeStopCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands.merge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePersonWithMergeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Stops a merging process in the Addressbook."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergeStopCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stop\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_MERGE_STOPPED \u003d \"Merging has been stopped.\\n%1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private MergeCommand previousMergeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String mergeType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates an MergeStopCommand to stop a merging process"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergeStopCommand(MergeCommand previousMergeCommand, String mergeType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(previousMergeCommand, mergeType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.previousMergeCommand \u003d previousMergeCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.mergeType \u003d mergeType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public CommandResult execute(Model model) throws DuplicatePersonWithMergeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (mergeType.equals(AddressBookParser.MERGE_PERSON)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Person currentPerson \u003d ((MergePersonCommand) previousMergeCommand).getOriginalPerson();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MERGE_STOPPED, currentPerson));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Policy currentPolicy \u003d ((MergePolicyCommand) previousMergeCommand).getOriginalPolicy();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MERGE_STOPPED, currentPolicy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof MergeStopCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 previousMergeCommand.equals(((MergeStopCommand) other).previousMergeCommand)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 mergeType.equals(((MergeStopCommand) other).mergeType));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                        PREFIX_DATE_OF_BIRTH, PREFIX_GENDER, PREFIX_POLICY, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                PREFIX_DATE_OF_BIRTH, PREFIX_GENDER) || areAnyPrefixesPresent(argMultimap, PREFIX_POLICY, PREFIX_TAG)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isInvalidNric \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isInvalidPhone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isInvalidEmail \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Nric nric \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            isInvalidNric \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Phone phone \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            isInvalidPhone \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Email email \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            isInvalidEmail \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isInvalidNric) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ParseExceptionHandler.handleNricException(name, phone, email);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isInvalidPhone) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ParseExceptionHandler.handlePhoneException(name, email);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isInvalidEmail) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ParseExceptionHandler.handleEmailException(name, phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        DateOfBirth dateOfBirth \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE_OF_BIRTH).get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Set\u003cPolicy\u003e policyList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Person person \u003d new Person(name, nric, phone, email, address, dateOfBirth, gender, policyList, tagList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 45,
      "larrylawl": 8,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddPolicyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COVERAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CRITERIA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_AGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_AGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddPolicyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Parses input arguments and creates a new AddPolicyCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class AddPolicyCommandParser implements Parser\u003cAddPolicyCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPolicyCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * and returns an AddPolicyCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public AddPolicyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_COVERAGE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                        PREFIX_PRICE, PREFIX_START_AGE, PREFIX_END_AGE, PREFIX_CRITERIA, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_COVERAGE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                PREFIX_PRICE) || areAnyPrefixesPresent(argMultimap, PREFIX_CRITERIA, PREFIX_TAG)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPolicyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        PolicyName name \u003d ParserUtil.parsePolicyName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Coverage coverage \u003d ParserUtil.parseCoverage(argMultimap.getValue(PREFIX_COVERAGE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StartAge startAge \u003d argMultimap.getValue(PREFIX_START_AGE).isPresent()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ? ParserUtil.parseStartAge(argMultimap.getValue(PREFIX_START_AGE).get()) : ParserUtil.parseStartAge(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        EndAge endAge \u003d argMultimap.getValue(PREFIX_END_AGE).isPresent()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ? ParserUtil.parseEndAge(argMultimap.getValue(PREFIX_END_AGE).get()) : ParserUtil.parseEndAge(\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Set\u003cTag\u003e criteriaList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy policy \u003d new Policy(name, description, coverage, price, startAge, endAge, criteriaList, tagList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new AddPolicyCommand(policy);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddPolicyTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.AddPolicyTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " * Parses input arguments and creates a new AddPolicyTagCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "public class AddPolicyTagCommandParser implements Parser\u003cAddPolicyTagCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPolicyTagCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * and returns a AddPolicyTagCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public AddPolicyTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            AddPolicyTagCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    ive);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Object[] tagValues \u003d argMultimap.getAllValues(PREFIX_TAG).toArray();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        String[] tags \u003d Arrays.copyOf(tagValues, tagValues.length, String[].class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return new AddPolicyTagCommand(index, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " * Parses input arguments and creates a new AddTagCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTagCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * and returns a AddTagCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            AddTagCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    ive);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Object[] tagValues \u003d argMultimap.getAllValues(PREFIX_TAG).toArray();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        String[] tags \u003d Arrays.copyOf(tagValues, tagValues.length, String[].class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return new AddTagCommand(index, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_MERGE_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ARGUMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.AddPolicyCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.AddPolicyTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.AssignPolicyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.DeletePolicyCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.DeletePolicyTagCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.EditPolicyCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.commands.ExpandPersonCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.commands.ExpandPolicyCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.FindPolicyCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.ListPeopleCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.ListPolicyCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.SuggestionSwitchCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.UnassignPolicyCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.DoNotMergePersonCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.DoNotMergePolicyCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergeCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergeConfirmedCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePersonCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePersonConfirmedCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePersonRejectedCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePolicyCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePolicyConfirmedCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePolicyRejectedCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergeRejectedCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergeStopCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.MergeParseException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MERGE_POLICY \u003d \"policy\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MERGE_PERSON \u003d \"person\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private boolean isMerging \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private MergeCommand currentMergeCommand;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String mergeType;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private boolean suggestionOn \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public AddressBookParser(boolean suggestionOn) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.suggestionOn \u003d suggestionOn;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public AddressBookParser() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Parses user input and obtains the command word which determines the command being executed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @return the command work based on the user input"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public Optional\u003cString\u003e getCommandWord(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (isMerging) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return Optional.of(commandWord);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses user input into command for execution. Calls the parseCommand(String, boolean) where the boolean\u0027s"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * default is false."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return parseCommand(userInput, false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param userInput     full user input string"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param isSystemInput whether the command was invoked by the user or the system"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Command parseCommand(String userInput, boolean isSystemInput) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isMerging) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return parseMerge(userInput);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case AddPolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new AddPolicyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case EditPolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new EditPolicyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case DeletePolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new DeletePolicyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case AssignPolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new AssignPolicyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case UnassignPolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new UnassignPolicyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case AddPolicyTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new AddPolicyTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case DeleteTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new DeleteTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case DeletePolicyTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new DeletePolicyTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case FindPolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new FindPolicyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case ListPeopleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new ListPeopleCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            case ListPolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                return new ListPolicyCommand();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                return new RedoCommand();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                return new HistoryCommand();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case MergePersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (isSystemInput) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    isMerging \u003d true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    MergePersonCommand command \u003d new MergePersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    currentMergeCommand \u003d command;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    mergeType \u003d MERGE_PERSON;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    return command;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case DoNotMergePersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new DoNotMergePersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case MergePolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (isSystemInput) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    isMerging \u003d true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    MergePolicyCommand command \u003d new MergePolicyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    currentMergeCommand \u003d command;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    mergeType \u003d MERGE_POLICY;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    return command;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case DoNotMergePolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return new DoNotMergePolicyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                return new ReportCommand();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            case DisplayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                return new DisplayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            case ExpandPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                return new ExpandPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            case ExpandPolicyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                return new ExpandPolicyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            case SuggestionSwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                SuggestionSwitchCommand command \u003d new SuggestionSwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (command.isOn()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    this.suggestionOn \u003d true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    this.suggestionOn \u003d false;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (suggestionOn) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    String argumentToParse \u003d \" \" + PREFIX_COMMAND_WORD + commandWord + \" \" + PREFIX_ARGUMENTS"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                        + arguments.trim();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    return new SuggestionCommandParser().parse(argumentToParse);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the merge commands into commands for execution."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Command parseMerge(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String commandWord \u003d userInput.trim();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case (MergeConfirmedCommand.COMMAND_WORD):"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case (MergeConfirmedCommand.DEFAULT_COMMAND_WORD):"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (mergeType.equals(MERGE_PERSON)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                MergePersonConfirmedCommand confirmCommand \u003d new MergePersonConfirmedCommand("
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    (MergePersonCommand) currentMergeCommand);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (confirmCommand.isLastMerge()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    isMerging \u003d false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return confirmCommand;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                MergePolicyConfirmedCommand confirmCommand \u003d new MergePolicyConfirmedCommand("
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    (MergePolicyCommand) currentMergeCommand);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (confirmCommand.isLastMerge()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    isMerging \u003d false;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return confirmCommand;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case MergeRejectedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (mergeType.equals(MERGE_PERSON)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                MergePersonRejectedCommand rejectCommand \u003d new MergePersonRejectedCommand("
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    (MergePersonCommand) currentMergeCommand);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (rejectCommand.isLastMerge()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    isMerging \u003d false;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return rejectCommand;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                MergePolicyRejectedCommand rejectCommand \u003d new MergePolicyRejectedCommand("
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    (MergePolicyCommand) currentMergeCommand);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (rejectCommand.isLastMerge()) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    isMerging \u003d false;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return rejectCommand;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case MergeStopCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            isMerging \u003d false;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new MergeStopCommand(currentMergeCommand, mergeType);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (mergeType.equals(MERGE_PERSON)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                throw new MergeParseException(String.format(MESSAGE_UNKNOWN_MERGE_COMMAND, ("
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    (MergePersonCommand) currentMergeCommand).getNextMergePrompt()));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                throw new MergeParseException(String.format(MESSAGE_UNKNOWN_MERGE_COMMAND, ("
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    (MergePolicyCommand) currentMergeCommand).getNextMergePrompt()));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the suggestion settings of the parser."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isSuggestionOn() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return suggestionOn;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 14,
      "chowyiyin": 179,
      "larrylawl": 22,
      "chaitanyabaranwal": 23,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignPolicyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.AssignPolicyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Parses input arguments and creates a new AssignPolicyCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class AssignPolicyCommandParser implements Parser\u003cAssignPolicyCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignPolicyCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * and returns an AssignPolicyCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public AssignPolicyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_POLICY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_POLICY)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignPolicyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Index personIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            personIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                    AssignPolicyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        PolicyName policyName \u003d ParserUtil.parsePolicyName(argMultimap.getValue(PREFIX_POLICY).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return new AssignPolicyCommand(personIndex, policyName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddPolicyCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddPolicyTagCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AssignPolicyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.DeletePolicyTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.EditPolicyCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.SuggestionSwitchCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.UnassignPolicyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    // Person prefix"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\", AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            AddPolicyCommand.COMMAND_WORD, EditCommand.COMMAND_WORD, EditPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\", AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\", AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\", AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\", AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_DATE_OF_BIRTH \u003d new Prefix(\"dob/\", AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\", AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_POLICY \u003d new Prefix(\"pol/\", AssignPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            UnassignPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\", AddTagCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            AddPolicyTagCommand.COMMAND_WORD, DeleteTagCommand.COMMAND_WORD, DeletePolicyTagCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    // Policy prefix"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\", AddPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_COVERAGE \u003d new Prefix(\"c/\", AddPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_DAYS \u003d new Prefix(\"days/\", AddPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_MONTHS \u003d new Prefix(\"months/\", AddPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_YEARS \u003d new Prefix(\"years/\", AddPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix (\"p/\", AddPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_START_AGE \u003d new Prefix (\"sa/\", AddPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_END_AGE \u003d new Prefix(\"ea/\", AddPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_CRITERIA \u003d new Prefix(\"cr/\", AddPolicyCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            EditPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    // To be used internally for suggestion command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_COMMAND_WORD \u003d new Prefix(\"command/\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_ARGUMENTS \u003d new Prefix(\"arguments/\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    // To be used by user to switch suggestions on and off"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_ON \u003d new Prefix(\"ON/\", SuggestionSwitchCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix PREFIX_OFF \u003d new Prefix(\"OFF/\", SuggestionSwitchCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    // TODO: Add in alternative commands"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    // Visual Representation prefix"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final Prefix PREFIX_INDICATOR \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final Prefix PREFIX_FORMAT \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Prefix[] USER_PREFIXES \u003d new Prefix[]{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_DATE_OF_BIRTH, PREFIX_POLICY,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        PREFIX_TAG, PREFIX_DESCRIPTION, PREFIX_COVERAGE, PREFIX_DAYS, PREFIX_MONTHS, PREFIX_YEARS, PREFIX_PRICE,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        PREFIX_START_AGE, PREFIX_END_AGE, PREFIX_CRITERIA, PREFIX_ON, PREFIX_OFF, PREFIX_INDICATOR, PREFIX_FORMAT"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 62,
      "larrylawl": 9,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeletePolicyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.logic.commands.DeletePolicyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ybchen97"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ybchen97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "public class DeletePolicyCommandParser implements Parser\u003cDeletePolicyCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePolicyCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * and returns a DeletePolicyCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public DeletePolicyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return new DeletePolicyCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePolicyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ybchen97": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeletePolicyTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.DeletePolicyTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " * Parses input arguments and creates a new DeletePolicyTagCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "public class DeletePolicyTagCommandParser implements Parser\u003cDeletePolicyTagCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePolicyTagCommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * and returns a DeletePolicyTagCommandParser object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public DeletePolicyTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            DeletePolicyTagCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    ive);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Object[] tagValues \u003d argMultimap.getAllValues(PREFIX_TAG).toArray();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        String[] tags \u003d Arrays.copyOf(tagValues, tagValues.length, String[].class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return new DeletePolicyTagCommand(index, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " * Parses input arguments and creates a new DeleteTagCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTagCommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * and returns a DeleteTagCommandParser object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public DeleteTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                            DeleteTagCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    ive);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        Object[] tagValues \u003d argMultimap.getAllValues(PREFIX_TAG).toArray();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        String[] tags \u003d Arrays.copyOf(tagValues, tagValues.length, String[].class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return new DeleteTagCommand(index, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DisplayCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDICATOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayIndicator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class DisplayCommandParser implements Parser\u003cDisplayCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DisplayCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * and returns a DisplayCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public DisplayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_INDICATOR, PREFIX_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDICATOR, PREFIX_FORMAT) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        DisplayIndicator displayIndicator \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        displayIndicator \u003d ParserUtil.parseDisplayIndicator(argMultimap.getValue(PREFIX_INDICATOR).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        DisplayFormat displayFormat \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        displayFormat \u003d ParserUtil.parseDisplayFormat(argMultimap.getValue(PREFIX_FORMAT).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new DisplayCommand(displayIndicator, displayFormat);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoNotMergePersonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.DoNotMergePersonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DoNotMergePersonCommandParser implements Parser\u003cDoNotMergePersonCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoNotMergePersonCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * and returns a DoNotMergePersonCommand object for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws seedu.address.logic.parser.exceptions.ParseException if the user input does not"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *                                                              conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DoNotMergePersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String trimmedArgs \u003d removeAddCommandWord(args);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ArgumentTokenizer.tokenize(trimmedArgs, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_DATE_OF_BIRTH, PREFIX_GENDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            PREFIX_DATE_OF_BIRTH, PREFIX_GENDER) || arePrefixesPresent(argMultimap, PREFIX_POLICY, PREFIX_TAG)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        DateOfBirth dateOfBirth \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE_OF_BIRTH).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Set\u003cPolicy\u003e policyList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Person person \u003d new Person(name, nric, phone, email, address, dateOfBirth, gender, policyList, tagList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new DoNotMergePersonCommand(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String removeAddCommandWord(String args) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String withoutAddCommandWord \u003d args.replaceFirst(AddCommand.COMMAND_WORD, \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return withoutAddCommandWord;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 68,
      "larrylawl": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoNotMergePolicyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COVERAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CRITERIA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_AGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_AGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddPolicyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.DoNotMergePolicyCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Parses input arguments and creates a new DoNotMergePolicyCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DoNotMergePolicyCommandParser implements Parser\u003cDoNotMergePolicyCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoNotMergePolicyCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * and returns a DoNotMergePolicyCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws seedu.address.logic.parser.exceptions.ParseException if the user input does not"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DoNotMergePolicyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String trimmedArgs \u003d removeAddPolicyCommandWord(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ArgumentTokenizer.tokenize(trimmedArgs, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_COVERAGE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                        PREFIX_PRICE, PREFIX_START_AGE, PREFIX_END_AGE, PREFIX_CRITERIA, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_COVERAGE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                PREFIX_PRICE) || areAnyPrefixesPresent(argMultimap, PREFIX_CRITERIA, PREFIX_TAG)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPolicyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        PolicyName name \u003d ParserUtil.parsePolicyName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Coverage coverage \u003d ParserUtil.parseCoverage(argMultimap.getValue(PREFIX_COVERAGE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StartAge startAge \u003d argMultimap.getValue(PREFIX_START_AGE).isPresent()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ? ParserUtil.parseStartAge(argMultimap.getValue(PREFIX_START_AGE).get()) : ParserUtil.parseStartAge(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        EndAge endAge \u003d argMultimap.getValue(PREFIX_END_AGE).isPresent()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ? ParserUtil.parseEndAge(argMultimap.getValue(PREFIX_END_AGE).get()) : ParserUtil.parseEndAge(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Set\u003cTag\u003e criteriaList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy policy \u003d new Policy(name, description, coverage, price, startAge, endAge, criteriaList, tagList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new DoNotMergePolicyCommand(policy);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String removeAddPolicyCommandWord(String args) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String withoutAddPolicyCommandWord \u003d args.replaceFirst(AddPolicyCommand.COMMAND_WORD, \"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return withoutAddPolicyCommandWord;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                        PREFIX_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            editPersonDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_OF_BIRTH).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            editPersonDescriptor.setDateOfBirth(ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE_OF_BIRTH)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    // Todo: NOTE: DO WE STILL NEED THIS?"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 11,
      "ybchen97": 1,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditPolicyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COVERAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_AGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_AGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.logic.commands.EditPolicyCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.logic.commands.EditPolicyCommand.EditPolicyDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ybchen97"
        },
        "content": " * Parses input arguments and creates a new EditPolicyCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ybchen97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "public class EditPolicyCommandParser implements Parser\u003cEditPolicyCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPolicyCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * and returns an EditPolicyCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public EditPolicyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_COVERAGE, PREFIX_PRICE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                        PREFIX_START_AGE, PREFIX_END_AGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPolicyCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        EditPolicyDescriptor editPolicyDescriptor \u003d new EditPolicyDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            editPolicyDescriptor.setName(ParserUtil.parsePolicyName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            editPolicyDescriptor.setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COVERAGE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            editPolicyDescriptor.setCoverage(ParserUtil.parseCoverage(argMultimap.getValue(PREFIX_COVERAGE).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            editPolicyDescriptor.setPrice(ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_AGE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            editPolicyDescriptor.setStartAge(ParserUtil.parseStartAge(argMultimap.getValue(PREFIX_START_AGE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_AGE).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            editPolicyDescriptor.setEndAge(ParserUtil.parseEndAge(argMultimap.getValue(PREFIX_END_AGE).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (!editPolicyDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            throw new ParseException(EditPolicyCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return new EditPolicyCommand(index, editPolicyDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    // Todo: NOTE: DO WE STILL NEED THIS?"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ybchen97": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExpandPersonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ExpandPersonCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Parses input arguments and creates a new ExpandPersonCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class ExpandPersonCommandParser implements Parser\u003cExpandPersonCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpandPersonCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * and returns an ExpandPersonCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws seedu.address.logic.parser.exceptions.ParseException if the user input does not conform the expected"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public ExpandPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    ExpandPersonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new ExpandPersonCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExpandPolicyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ExpandPolicyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Parses input arguments and creates a new ExpandPolicyCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class ExpandPolicyCommandParser implements Parser\u003cExpandPolicyCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpandPersonCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * and returns an ExpandPersonCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws seedu.address.logic.parser.exceptions.ParseException if the user input does not conform the expected"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public ExpandPolicyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    ExpandPolicyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new ExpandPolicyCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindPolicyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.commands.FindPolicyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import seedu.address.model.policy.PolicyNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " * Parses input arguments and creates a new FindPolicyCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "public class FindPolicyCommandParser implements Parser\u003cFindPolicyCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPolicyCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * and returns a FindPolicyCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    public FindPolicyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPolicyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        return new FindPolicyCommand(new PolicyNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MergePersonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePersonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePersonCommandParser implements Parser\u003cMergePersonCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * and returns a MergePersonCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws seedu.address.logic.parser.exceptions.ParseException if the user input does"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergePersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String trimmedArgs \u003d removeAddCommandWord(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ArgumentTokenizer.tokenize(trimmedArgs, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_DATE_OF_BIRTH, PREFIX_GENDER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                PREFIX_DATE_OF_BIRTH, PREFIX_GENDER) || arePrefixesPresent(argMultimap, PREFIX_POLICY, PREFIX_TAG)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        DateOfBirth dateOfBirth \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE_OF_BIRTH).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Set\u003cPolicy\u003e policyList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Person person \u003d new Person(name, nric, phone, email, address, dateOfBirth, gender, policyList, tagList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new MergePersonCommand(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String removeAddCommandWord(String args) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String withoutAddCommandWord \u003d args.replaceFirst(AddCommand.COMMAND_WORD, \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return withoutAddCommandWord;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 76,
      "larrylawl": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MergePolicyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COVERAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_AGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.AddPolicyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePolicyCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePolicyCommandParser implements Parser\u003cMergePolicyCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPolicyCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * and returns a MergePolicy object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws seedu.address.logic.parser.exceptions.ParseException if the user input does"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergePolicyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String trimmedArgs \u003d removeAddPolicyCommandWord(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ArgumentTokenizer.tokenize(trimmedArgs, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_COVERAGE, PREFIX_PRICE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                        PREFIX_START_AGE, PREFIX_END_AGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_COVERAGE, PREFIX_PRICE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_POLICY, PREFIX_TAG)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPolicyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        PolicyName name \u003d ParserUtil.parsePolicyName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Coverage coverage \u003d ParserUtil.parseCoverage(argMultimap.getValue(PREFIX_COVERAGE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StartAge startAge \u003d argMultimap.getValue(PREFIX_START_AGE).isPresent()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ? ParserUtil.parseStartAge(argMultimap.getValue(PREFIX_START_AGE).get()) : ParserUtil.parseStartAge(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        EndAge endAge \u003d argMultimap.getValue(PREFIX_END_AGE).isPresent()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ? ParserUtil.parseEndAge(argMultimap.getValue(PREFIX_END_AGE).get()) : ParserUtil.parseEndAge(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Set\u003cTag\u003e criteriaList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy policy \u003d new Policy(name, description, coverage, price, startAge, endAge, criteriaList, tagList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new MergePolicyCommand(policy);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String removeAddPolicyCommandWord(String args) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String withoutAddPolicyCommandWord \u003d args.replaceFirst(AddPolicyCommand.COMMAND_WORD, \"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return withoutAddPolicyCommandWord;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParseExceptionHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class ParseExceptionHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String CONTACT_SUGGESTION_HEADER \u003d \"You may want to contact \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns an error message to inform the user of an invalid NRIC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * The contact number and/or email address is returned if present."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param name name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param phone phone"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param email email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static void handleNricException(Name name, Phone phone, Email email) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder exceptionMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder suggestionMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isValidPhone \u003d phone !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isValidEmail \u003d email !\u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isValidPhone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            suggestionMessage.append(\"Phone Number: \" + phone.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isValidEmail) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (isValidPhone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                suggestionMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            suggestionMessage.append(\"Email: \" + email.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasNoValidContact \u003d suggestionMessage.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasNoValidContact) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(exceptionMessage.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String personName \u003d name.fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(exceptionMessage.toString() + CONTACT_SUGGESTION_HEADER + personName + \"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + suggestionMessage.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns an error message to inform the user of an invalid contact number."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * The email address is returned if present."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param name name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param email email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @throws ParseException parse exception"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static void handlePhoneException(Name name, Email email) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder exceptionMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder suggestionMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isValidEmail \u003d email !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isValidEmail) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            suggestionMessage.append(\"Email: \" + email.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasNoValidContact \u003d suggestionMessage.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasNoValidContact) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(exceptionMessage.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String personName \u003d name.fullName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(exceptionMessage.toString() + CONTACT_SUGGESTION_HEADER + personName + \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + suggestionMessage.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns an error message to inform the user of an invalid email address. The phone number is returned if present."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param name name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param phone phone"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @throws ParseException parse exception"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static void handleEmailException(Name name, Phone phone) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder exceptionMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder suggestionMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        exceptionMessage.append(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean isValidPhone \u003d phone !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isValidPhone) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            suggestionMessage.append(\"Phone: \" + phone.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasNoValidContact \u003d suggestionMessage.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasNoValidContact) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(exceptionMessage.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String personName \u003d name.fullName;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(exceptionMessage.toString() + CONTACT_SUGGESTION_HEADER + personName + \"\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + suggestionMessage.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 77,
      "larrylawl": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.USER_PREFIXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ListPeopleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ListPolicyCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Price;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayFormat;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayIndicator;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static HashSet\u003cString\u003e commands \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static int lengthLongerThanAllCommandWords \u003d 100;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses a {@code String NRIC} into a {@code Nric}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException if the given {@code nric} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String trimmedNric \u003d nric.trim().toUpperCase();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses a {@code String dateOfBirth} into an {@code DateOfBirth}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException if the given {@code dateOfBirth} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static DateOfBirth parseDateOfBirth(String dateOfBirth) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String trimmedDateOfBirth \u003d dateOfBirth.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(trimmedDateOfBirth)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return new DateOfBirth(trimmedDateOfBirth);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Parses a {@code String gender} into an {@code gender}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        String trimmedGender \u003d ParserUtil.capitalizeFirstLetter(gender.trim());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new ParseException(Gender.getMessageConstraints());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e criteria} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static Set\u003cTag\u003e parseCriteria(Collection\u003cString\u003e criteria) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(criteria);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final Set\u003cTag\u003e criteriaSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (String criteriaName : criteria) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            criteriaSet.add(parseTag(criteriaName));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return criteriaSet;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses a {@code String name} into a {@code PolicyName}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static PolicyName parsePolicyName(String name) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!PolicyName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(PolicyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new PolicyName(trimmedName);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses a {@code String coverage} into a {@code Coverage}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static Coverage parseCoverage(String coverage) throws ParseException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(coverage);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String trimmedCoverage \u003d coverage.trim();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!Coverage.isValidCoverage(trimmedCoverage)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(Coverage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new Coverage(trimmedCoverage);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses a {@code String price} into a {@code Price}."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses a {@code String startAge} into a {@code StartAge}."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException if the given {@code startAge} is invalid."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static StartAge parseStartAge(String startAge) throws ParseException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(startAge);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        String trimmedStartAge \u003d startAge.trim();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (trimmedStartAge.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new StartAge();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (!StartAge.isValidAge(trimmedStartAge)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            throw new ParseException(StartAge.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return new StartAge(trimmedStartAge);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses a {@code String endAge} into a {@code EndAge}."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException if the given {@code startAge} is invalid."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static EndAge parseEndAge(String endAge) throws ParseException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(endAge);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        String trimmedEndAge \u003d endAge.trim();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (trimmedEndAge.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new EndAge();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        if (!EndAge.isValidAge(trimmedEndAge)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            throw new ParseException(EndAge.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return new EndAge(trimmedEndAge);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Parses a {@code String display indicator} into a {@code display indicator}."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @throws ParseException if the given {@code displayIndicator} is invalid."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static DisplayIndicator parseDisplayIndicator(String displayIndicator) throws ParseException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(displayIndicator);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        String trimmedDisplayIndicator \u003d displayIndicator.trim();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        if (!DisplayIndicator.isValidDisplayIndicator(trimmedDisplayIndicator)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new ParseException(DisplayIndicator.getMessageConstraints());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new DisplayIndicator(trimmedDisplayIndicator);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Parses a {@code String display format} into a {@code display format}."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @throws ParseException if the given {@code displayFormat} is invalid."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static DisplayFormat parseDisplayFormat(String displayFormat) throws ParseException {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(displayFormat);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        String trimmedDisplayFormat \u003d displayFormat.trim();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        if (!DisplayFormat.isValidDisplayFormat(trimmedDisplayFormat)) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new ParseException(DisplayFormat.getMessageConstraints());"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new DisplayFormat(trimmedDisplayFormat);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses a {@String invalidInputCommandWord} into a {@String suggestedCommandWord}."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param inputCommand Invalid input command word by user."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param arguments    Arguments of command input by user."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Suggested command word."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static String parseCommand(String inputCommand, String arguments) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return similarPrefixesAndShortestDistance(inputCommand, arguments);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Shortlists commands based on prefixes present and calls the method to find the shortest distance between"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * the input command and the shortlisted command words."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param command   Input command."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param arguments Arguments of the input command."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return The command word closest to the input command word."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    //todo update commands"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static String similarPrefixesAndShortestDistance(String command, String arguments) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        HashSet\u003cString\u003e shortListedCommands \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean hasNoArguments \u003d arguments.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (hasNoArguments) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            shortListedCommands.addAll(getNoArgumentCommands());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return getShortestDistanceString(command, shortListedCommands);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(arguments, CliSyntax.USER_PREFIXES);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c USER_PREFIXES.length; i++) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Prefix prefix \u003d USER_PREFIXES[i];"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (argMultimap.getValue(prefix).isPresent()) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ArrayList\u003cString\u003e commandWords \u003d prefix.getCommands();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                for (int j \u003d 0; j \u003c commandWords.size(); j++) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    shortListedCommands.add(commandWords.get(j));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (shortListedCommands.size() !\u003d 0) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return getShortestDistanceString(command, shortListedCommands);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return getShortestDistanceString(command);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static ArrayList\u003cString\u003e getNoArgumentCommands() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cString\u003e commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        commandList.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        commandList.add(ListPeopleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        commandList.add(ListPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        commandList.add(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        commandList.add(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        commandList.add(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        commandList.add(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return commandList;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static String getShortestDistanceString(String input) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return getShortestDistanceString(input, commands);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static String getShortestDistanceString(String input, HashSet\u003cString\u003e commands) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cString\u003e commandsThatHaveShortestDistanceAway \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Iterator\u003cString\u003e iterator \u003d commands.iterator();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int distance \u003d lengthLongerThanAllCommandWords;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c commands.size(); i++) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String originalCommand \u003d iterator.next();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            int thisDistance \u003d getDistance(input, originalCommand);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (thisDistance \u003c distance) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                commandsThatHaveShortestDistanceAway.clear();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                commandsThatHaveShortestDistanceAway.add(originalCommand);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                distance \u003d thisDistance;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                commandsThatHaveShortestDistanceAway.add(originalCommand);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (commandsThatHaveShortestDistanceAway.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return commandsThatHaveShortestDistanceAway.get(0);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String suggestion \u003d getNearestSubstring(input, commandsThatHaveShortestDistanceAway);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return suggestion;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static String getNearestSubstring(String input, ArrayList\u003cString\u003e possibleSuggestions) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int longest \u003d 0;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String command \u003d \"\";"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c possibleSuggestions.size(); i++) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String thisCommand \u003d possibleSuggestions.get(i);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            int lengthOfSubstring \u003d getLongestSubstring(input, thisCommand);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (lengthOfSubstring \u003e longest) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                longest \u003d lengthOfSubstring;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                command \u003d thisCommand;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static int getLongestSubstring(String s1, String s2) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return getLongestSubstring(s1, s2, 0, 0, 0);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static int getLongestSubstring(String s1, String s2, int s1Index, int s2Index, int counter) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (s1Index \u003e\u003d s1.length() || s2Index \u003e\u003d s2.length()) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return counter;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (s1.charAt(s1Index) \u003d\u003d s2.charAt(s2Index)) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return getLongestSubstring(s1, s2, s1Index + 1, s2Index + 1, counter + 1);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return Math.max(counter,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    Math.max(getLongestSubstring(s1, s2, s1Index + 1, s2Index, 0),"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                        getLongestSubstring(s1, s2, s1Index, s2Index + 1, 0)));"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static int getDistance(String input, String originalCommand) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int[][] distanceArray \u003d new int[input.length()][originalCommand.length()];"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int cols \u003d originalCommand.length();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int rows \u003d input.length();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c cols; i++) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            distanceArray[0][i] \u003d i;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int j \u003d 1; j \u003c rows; j++) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            distanceArray[j][0] \u003d j;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            for (int k \u003d 1; k \u003c cols; k++) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                int insert \u003d distanceArray[j][k - 1] + 1;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                int delete \u003d distanceArray[j - 1][k] + 1;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                int replace;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (input.charAt(j) \u003d\u003d originalCommand.charAt(k)) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    replace \u003d distanceArray[j - 1][k - 1];"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    replace \u003d distanceArray[j - 1][k - 1] + 2;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                distanceArray[j][k] \u003d Math.min(Math.min(insert, delete), replace);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return distanceArray[rows - 1][cols - 1];"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Adds the command word to the list of command words."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param string Valid command words."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static void addCommands(String... string) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cString\u003e addedCommands \u003d (ArrayList\u003cString\u003e) Arrays.stream(string).collect(Collectors.toList());"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        commands.addAll(addedCommands);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Removes the command word from the lsit of command words."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param string Valid command words."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static void removeCommands(String... string) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cString\u003e commandsToDelete \u003d (ArrayList\u003cString\u003e) Arrays.stream(string).collect(Collectors.toList());"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c commandsToDelete.size(); i++) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            commands.remove(commandsToDelete.get(i));"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Capitalises first letter in string."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param str string"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @return string with first letter capitalised"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static String capitalizeFirstLetter(String str) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        if (str \u003d\u003d null) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            return str;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return str.substring(0, 1).toUpperCase() + str.substring(1);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 306,
      "larrylawl": 69,
      "ybchen97": 14,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private ArrayList\u003cString\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Prefix(String prefix, String... commands) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.commands.addAll(Arrays.stream(commands).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public ArrayList\u003cString\u003e getCommands() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return commands;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 12,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SuggestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ARGUMENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.SuggestionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Parses input arguments and creates a new SuggestionCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class SuggestionCommandParser implements Parser\u003cSuggestionCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SuggestionCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * and returns an SuggestionCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws seedu.address.logic.parser.exceptions.ParseException if the user input does not conform the expected"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public SuggestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COMMAND_WORD, PREFIX_ARGUMENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String originalCommand \u003d argMultimap.getValue(PREFIX_COMMAND_WORD).get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String arguments \u003d argMultimap.getValue(PREFIX_ARGUMENTS).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String suggestedCommand \u003d ParserUtil.parseCommand(originalCommand, \" \" + arguments);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new SuggestionCommand(originalCommand, suggestedCommand, arguments);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SuggestionSwitchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFF;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.SuggestionSwitchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class SuggestionSwitchCommandParser implements Parser\u003cSuggestionSwitchCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SuggestionSwitchCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * and returns an SuggestionSwitchCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws seedu.address.logic.parser.exceptions.ParseException if the user input does not conform the expected"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public SuggestionSwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ON, PREFIX_OFF);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!areAnyPrefixesPresent(argMultimap, PREFIX_ON, PREFIX_OFF)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || arePrefixesPresent(argMultimap, PREFIX_ON, PREFIX_OFF)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    SuggestionSwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ON).isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new SuggestionSwitchCommand(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new SuggestionSwitchCommand(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnassignPolicyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.UnassignPolicyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Parses input arguments and creates a new UnassignPolicyCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class UnassignPolicyCommandParser implements Parser\u003cUnassignPolicyCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnassignPolicyCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * and returns an UnassignPolicyCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public UnassignPolicyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_POLICY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_POLICY)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                    UnassignPolicyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Index personIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            personIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                    UnassignPolicyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        PolicyName policyName \u003d ParserUtil.parsePolicyName(argMultimap.getValue(PREFIX_POLICY).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return new UnassignPolicyCommand(personIndex, policyName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/MergeParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergeParseException extends ParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergeParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public MergeParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.UniquePolicyList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final UniquePolicyList policies;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        policies \u003d new UniquePolicyList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Creates an AddressBook using the Persons and Policies in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * Replaces the contents of the policies list with {@code policies}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * {@code policies} must not contain duplicate policies."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public void setPolicies(List\u003cPolicy\u003e policies) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        this.policies.setPolicies(policies);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        setPolicies(newData.getPolicyList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return persons.getPerson(person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    //// policy-level operations"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if a policy with the same identity as {@code policy} exists in the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(policy);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return policies.contains(policy);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns true if a policy with the same policy name as {@code policyName} exists in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean hasPolicyWithName(PolicyName policyName) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(policyName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return policies.containsByName(policyName);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Policy getPolicy(Policy policy) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(policy);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return policies.getPolicy(policy);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public Policy getPolicyWithName(PolicyName policyName) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return policies.getPolicyWithName(policyName);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Adds a policy to the address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * The policy must not already exist in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void addPolicy(Policy p) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        policies.add(p);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * Replaces the given policy {@code target} in the list with {@code editedPolicy}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * The policy identity of {@code editedPolicy} must not be the same as another existing policy in the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public void setPolicy(Policy target, Policy editedPolicy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        requireNonNull(editedPolicy);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        policies.setPolicy(target, editedPolicy);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /* Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public void removePolicy(Policy key) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        policies.remove(key);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + policies.asUnmodifiableObservableList().size() + \" policies\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public ObservableList\u003cPolicy\u003e getPolicyList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return policies.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                \u0026\u0026 policies.equals(((AddressBook) other).policies));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return Objects.hash(persons, policies);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 29,
      "larrylawl": 17,
      "chaitanyabaranwal": 13,
      "ybchen97": 24,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Used to store a list of previously entered commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Used in the command history listing, and also used to determine which stateful list to undo/redo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * in the address book with state list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private final ObservableList\u003cPair\u003cString, String\u003e\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Adds a triplet of {@code objectType, @code CommandWord, @code userInput}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * in the command history."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void addCommand(String commandWord, String userInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(commandWord);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        userInputHistory.add(new Pair\u003c\u003e(commandWord, userInput));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Gets the history of previously entered commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public ObservableList\u003cPair\u003cString, String\u003e\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        ObservableList\u003cPair\u003cString, String\u003e\u003e reversedList \u003d FXCollections.observableList(userInputHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        FXCollections.reverse(reversedList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return FXCollections.unmodifiableObservableList(reversedList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // if different kind of objects"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    Predicate\u003cPolicy\u003e PREDICATE_SHOW_ALL_POLICIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the user prefs\u0027 settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    UserSettings getUserSettings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Sets the user prefs\u0027 settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    void setUserSettings(UserSettings userSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the matching person in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    Person getPerson(Person person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns key-value mapping of type of policy to number of policies sold."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getPolicyPopularityBreakdown();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns key-value mapping of age group to number of people in the group."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getAgeGroupBreakdown();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns key-value mapping of gender to number of people of that gender."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    ObservableMap\u003cString, Integer\u003e getGenderBreakdown();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Adds the given policy."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * {@code policy} must not already exist in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    void addPolicy(Policy policy);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * Deletes the given policy."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * The policy must exist in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    void deletePolicy(Policy target);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if a policy with the same identity as {@code policy} exists in the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    boolean hasPolicy(Policy policy);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns true if a policy with the same name as {@code policyName} exists in the address book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    boolean hasPolicyWithName(PolicyName policyName);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns the matching policy in the address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    Policy getPolicy(Policy policy);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns the matching policy with the same {@code policyName} in the address book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    Policy getPolicyWithName(PolicyName policyName);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * Replaces the given policy {@code target} with {@code editedPolicy}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * The policy identity of {@code editedPolicy} must not be the same as another existing policy in the address book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    void setPolicy(Policy target, Policy editedPolicy);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns an unmodifiable view of the filtered policy list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    ObservableList\u003cPolicy\u003e getFilteredPolicyList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Updates the filter of the filtered policy list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    void updateFilteredPolicyList(Predicate\u003cPolicy\u003e predicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Checks whether an undo is possible in the address book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Checks whether a redo is possible in the address book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Undo to a previous state of the address book."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Redo to a previous undone state of the address book."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Add the previous state of address book to list of states."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    void saveAddressBookState();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 33,
      "larrylawl": 39,
      "chaitanyabaranwal": 38,
      "ybchen97": 20,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.util.TimeUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private final StatefulAddressBook statefulAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    private final FilteredList\u003cPolicy\u003e filteredPolicies;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.statefulAddressBook \u003d new StatefulAddressBook(addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.statefulAddressBook.getPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        filteredPolicies \u003d new FilteredList\u003c\u003e(this.statefulAddressBook.getPolicyList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return userPrefs.getUserSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void setUserSettings(UserSettings userSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(userSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        userPrefs.setUserSettings(userSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return statefulAddressBook;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        statefulAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return statefulAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return statefulAddressBook.getPerson(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        statefulAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        statefulAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        statefulAddressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        requireNonNull(policy);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return statefulAddressBook.hasPolicy(policy);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean hasPolicyWithName(PolicyName policyName) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return statefulAddressBook.hasPolicyWithName(policyName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public Policy getPolicy(Policy policy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        requireNonNull(policy);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return statefulAddressBook.getPolicy(policy);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public Policy getPolicyWithName(PolicyName policyName) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(policyName);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return statefulAddressBook.getPolicyWithName(policyName);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public void deletePolicy(Policy target) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        statefulAddressBook.removePolicy(target);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        statefulAddressBook.addPolicy(policy);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        updateFilteredPolicyList(PREDICATE_SHOW_ALL_POLICIES);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public void setPolicy(Policy target, Policy editedPolicy) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        requireAllNonNull(target, editedPolicy);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        statefulAddressBook.setPolicy(target, editedPolicy);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Functions related to undo/redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return statefulAddressBook.canUndo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return statefulAddressBook.canRedo();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        statefulAddressBook.undo();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        statefulAddressBook.redo();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void saveAddressBookState() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        statefulAddressBook.saveAddressBookState();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getPolicyPopularityBreakdown() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // Set up map"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e result \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        statefulAddressBook.getPolicyList().forEach(policy -\u003e result.put(policy.getName().toString(), 0));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // Add popularity"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        statefulAddressBook.getPersonList().forEach(person -\u003e {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            Set\u003cPolicy\u003e policies \u003d person.getPolicies();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            policies.forEach(policy -\u003e {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                String policyName \u003d policy.getName().toString();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                result.put(policyName, result.get(policyName) + 1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            });"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getAgeGroupBreakdown() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // Set up age group"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e result \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        TimeUtil.getAgeGroup().forEach(ageGroup -\u003e result.put(ageGroup, 0));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // Add numbers"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        statefulAddressBook.getPersonList().forEach(person -\u003e {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            int yearOfBirth \u003d person.getDateOfBirth().dateOfBirth.getYear();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            String ageGroup \u003d TimeUtil.parseAgeGroup(yearOfBirth);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            result.put(ageGroup, result.get(ageGroup) + 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ObservableMap\u003cString, Integer\u003e getGenderBreakdown() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // Set up gender"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e result \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Gender.getValidGender().forEach(gender -\u003e result.put(gender, 0));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // Add numbers"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        statefulAddressBook.getPersonList().forEach(person -\u003e {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            String gender \u003d person.getGender().toString();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            result.put(gender, result.get(gender) + 1);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    // TODO: delete"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns a list of unfiltered person."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @returnlist of unfiltered person."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return statefulAddressBook.getPersonList();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Policy} backed by the internal list of"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public ObservableList\u003cPolicy\u003e getFilteredPolicyList() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        return filteredPolicies;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public void updateFilteredPolicyList(Predicate\u003cPolicy\u003e predicate) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        filteredPolicies.setPredicate(predicate);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return statefulAddressBook.equals(other.statefulAddressBook)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 filteredPolicies.equals(other.filteredPolicies);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 22,
      "larrylawl": 75,
      "chaitanyabaranwal": 53,
      "ybchen97": 36,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns an unmodifiable view of the policies list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * This list will not contain any duplicate policies."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    ObservableList\u003cPolicy\u003e getPolicyList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    UserSettings getUserSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/StatefulAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * An {@code AddressBook} which maintains a stateful list of address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Useful for undo/redo functions."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Code for StatefulAddressBook is adapted from addressbook-level4, which can be found at"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * {@link https://github.com/se-edu/addressbook-level4}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class StatefulAddressBook extends AddressBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private final List\u003cReadOnlyAddressBook\u003e statefulAddressBookList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @param addressBook Address book to initialise the stateful address book with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public StatefulAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        super(addressBook);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.statefulAddressBookList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.statefulAddressBookList.add(new AddressBook(addressBook));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Saves a copy of the current person list at the end of {@code statefulPersonList}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void saveAddressBookState() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        clearStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        statefulAddressBookList.add(new AddressBook(this));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * All the states after the current state pointer are cleared, because performing any data change"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * while on a previous state essentially means all undo and redos should relate to the state changes from the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * undone point."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private void clearStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        statefulAddressBookList.subList(currentStatePointer + 1, statefulAddressBookList.size()).clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Restores our address book to a previous state, depending on whether a person or a policy was modified."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void undo() throws CannotUndoException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new CannotUndoException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        resetData(statefulAddressBookList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Restores our address book to its previously undone state, depending on whether a person or policy was undone."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void redo() throws CannotRedoException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            throw new CannotRedoException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        resetData(statefulAddressBookList.get(currentStatePointer));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Checks whether an undo is possible in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Checks whether a redo is possible in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return currentStatePointer \u003c statefulAddressBookList.size() - 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // if the same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // if different kinds of objects"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!(obj instanceof StatefulAddressBook)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        StatefulAddressBook other \u003d (StatefulAddressBook) obj;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                \u0026\u0026 statefulAddressBookList.equals(other.statefulAddressBookList)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d other.currentStatePointer;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Exception when {@code undo()} is not possible but is still called."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private static class CannotUndoException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        private CannotUndoException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            super(\"Undo is not possible in stateful address book yet undo() function called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Exception when {@code redo()} is not possible but is still called."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private static class CannotRedoException extends RuntimeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        private CannotRedoException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            super(\"Redo is not possible in stateful address book yet redo() function called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private UserSettings userSettings \u003d new UserSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        setUserSettings(newUserPrefs.getUserSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return this.userSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void setUserSettings(UserSettings userSettings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(userSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.userSettings \u003d userSettings;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        sb.append(\"User Settings : \" + userSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 13,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"ADDRESS\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DateOfBirth.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a Person\u0027s date of birth in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateOfBirth(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DateOfBirth {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \"Date of births should only contain numbers and \\\".\\\", and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final SimpleDateFormat DATE_FORMAT \u003d new SimpleDateFormat(\"dd.MM.yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d LLLL Y\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"DATE OF BIRTH\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public final LocalDate dateOfBirth;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param dateOfBirth A valid date of birth."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        checkArgument(isValidDateOfBirth(dateOfBirth), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.value \u003d dateOfBirth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.dateOfBirth \u003d createLocalDate(dateOfBirth);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if a given string is a valid date of birth."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static boolean isValidDateOfBirth(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            DATE_FORMAT.parse(test);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return isValidDate(test);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if the input date is valid and matches the validation regex."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param test Input date of birth."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether the date of birth is valid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int day \u003d extractDay(test);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int month \u003d extractMonth(test);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int year \u003d extractYear(test);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!isValidMonth(month)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (isValidDay(day, month, year)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates a new {@code LocalDate} to keep track of the date of birth with respect to the system clock."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param test Input date of birth."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return A new {@code LocalDate}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static LocalDate createLocalDate(String test) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int day \u003d extractDay(test);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int month \u003d extractMonth(test);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int year \u003d extractYear(test);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if the input day in the date of birth is valid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param day Input day."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param month Input month."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param year Input year."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether the input day is valid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean isValidDay(int day, int month, int year) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 12:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 31) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 11:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 30) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            if (isLeapYear(year) \u0026\u0026 day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 29) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else if (day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 28) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if the input month in the date of birth is valid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param month Input month."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether the input month is valid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean isValidMonth(int month) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return month \u003e\u003d 1 \u0026\u0026 month \u003c\u003d 12;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the input date of birth and returns the input day as an int."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param test Input date of birth."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Day in date of birth."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static int extractDay(String test) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Integer.parseInt(test.split(\"\\\\.\")[0]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the input date of birth and returns the input month as an int."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param test Input date of birth."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Month in date of birth."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static int extractMonth(String test) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Integer.parseInt(test.split(\"\\\\.\")[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Parses the input date of birth and returns the input year as an int."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param test Input date of birth."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Year in date of birth."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static int extractYear(String test) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Integer.parseInt(test.split(\"\\\\.\")[2]);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Checks if the input year in the date of birth is a leap year."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param year Input year of birth."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @return Whether the year is a leap year."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (year % 400 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (year % 100 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (year % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return dateOfBirth.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof DateOfBirth // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 value.equals(((DateOfBirth) other).value)); // state check"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return dateOfBirth.hashCode();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"EMAIL\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Represents a Person\u0027s gender in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String DATA_TYPE \u003d \"Gender\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String MALE \u003d \"Male\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String FEMALE \u003d \"Female\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final Set\u003cString\u003e VALID_GENDER \u003d initializeValidGender();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d initializeMessageConstraints();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public final String gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Initializes valid gender types."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @return a set of valid gender types."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static Set\u003cString\u003e initializeValidGender() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        HashSet\u003cString\u003e result \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(MALE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(FEMALE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Initialises message constraints based on valid gender types."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @return String."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static String initializeMessageConstraints() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        String message \u003d \"Only the following genders are allowed: \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        StringJoiner result \u003d new StringJoiner(\", \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        VALID_GENDER.forEach(gender -\u003e result.add(gender));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return VALID_GENDER.contains(test);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static Set\u003cString\u003e getValidGender() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return VALID_GENDER;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static String getMessageConstraints() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 gender.equals(((Gender) other).gender)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return gender.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"NAME\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        fullName \u003d formatName(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * TODO: Better documentation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Formats name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param name name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String formatName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String[] nameSplitBySpace \u003d name.toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StringBuilder formattedName \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c nameSplitBySpace.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String firstLetter \u003d nameSplitBySpace[i].substring(0, 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String remainingLetters \u003d nameSplitBySpace[i].substring(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            formattedName.append(firstLetter.toUpperCase() + remainingLetters);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            formattedName.append(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return formattedName.toString().trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 14,
      "larrylawl": 6,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Nric.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a Person\u0027s NRIC in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \"This is not a valid Singapore Identification number.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                    + \"NRICs should only contain alphanumeric characters. It should start with S, T, F or G\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    + \" followed by 7 numerical numbers and a checksum letter. It should not be blank.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"NRIC\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[STFG]\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public final String nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a {@code Nric}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param nric A valid nric."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Nric(String nric) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if a given string is a valid NRIC."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 nric.equals(((Nric) other).nric)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return nric.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 60,
      "larrylawl": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Set\u003cPolicy\u003e policies \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public Person(Name name,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                  Nric nric,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                  Phone phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                  Email email,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                  Address address,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                  DateOfBirth dateOfBirth,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                  Gender gender,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                  Set\u003cPolicy\u003e policies,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                  Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireAllNonNull(name, nric, phone, email, address, dateOfBirth, policies, tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.policies.addAll(policies);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DateOfBirth getDateOfBirth() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns an immutable policy set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Set\u003cPolicy\u003e getPolicies() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Collections.unmodifiableSet(policies);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if both persons of the same name and nric."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u0026\u0026 otherPerson.getName().equals(getName()) \u0026\u0026 otherPerson.getNric().equals(getNric());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns true if the person has the policy in the policies list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Used as a check during the Assign Policy Command."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return this.policies.contains((Policy) policy);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if both persons of the same editable fields."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean hasEqualEditableFields(Person otherPerson) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u0026\u0026 otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 otherPerson.getDateOfBirth().equals(getDateOfBirth())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 otherPerson.getGender().equals(getGender());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u0026\u0026 otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u0026\u0026 otherPerson.getDateOfBirth().equals(getDateOfBirth())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 otherPerson.getGender().equals(getGender())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u0026\u0026 otherPerson.getPolicies().equals(getPolicies())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return Objects.hash(name, nric, phone, email, address, dateOfBirth, gender, tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .append(\" NRIC: \")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .append(getNric())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .append(\" Date of birth: \")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            .append(getDateOfBirth())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            .append(\" Gender: \")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            .append(getGender());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (getPolicies().size() !\u003d 0) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            builder.append(\" Policies: \");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            getPolicies().forEach(policy -\u003e builder.append(policy.getName().policyName));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (getTags().size() !\u003d 0) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 53,
      "larrylawl": 22,
      "chaitanyabaranwal": 9,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \"Only Singapore phone numbers are allowed. (e.g.: 88887541 +65 98753573 +6565241234)\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[689]\\\\d{7}|\\\\+65[689]\\\\d{7}|\\\\+65\\\\s[689]\\\\d{7}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"PHONE\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 3,
      "larrylawl": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return internalList.stream().filter(person::isSamePerson).findAny().get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 5,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/Coverage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAYS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTHS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEARS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a Policy\u0027s coverage in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCoverage(String)}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Coverage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \"Coverage should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"COVERAGE\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{N}]+\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final int dayIndex \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final int monthIndex \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final int yearIndex \u003d 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public final Period period;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public final String coverage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a {@code Coverage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param coverage A valid coverage declaration."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Coverage(String coverage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(coverage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        checkArgument(isValidCoverage(coverage), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cString\u003e coverageBreakDown \u003d getCoverageBreakDown(coverage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String days \u003d coverageBreakDown.get(dayIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String months \u003d coverageBreakDown.get(monthIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String years \u003d coverageBreakDown.get(yearIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.period \u003d getPeriod(days, months, years);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.coverage \u003d coverage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Period getPeriod(String days, String months, String years) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int numberOfDays \u003d Integer.parseInt(days);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int numberOfMonths \u003d Integer.parseInt(months);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int numberOfYears \u003d Integer.parseInt(years);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Period.of(numberOfYears, numberOfMonths, numberOfDays);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if a given string is a valid coverage declaration."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static boolean isValidCoverage(String coverage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cString\u003e coverageBreakDown \u003d getCoverageBreakDown(coverage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String days \u003d coverageBreakDown.get(dayIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String months \u003d coverageBreakDown.get(monthIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String years \u003d coverageBreakDown.get(yearIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        boolean emptyOrMissingAllPrefixes \u003d days.equals(\"0\") \u0026\u0026 months.equals(\"0\") \u0026\u0026 years.equals(\"0\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return !emptyOrMissingAllPrefixes"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 days.matches(VALIDATION_REGEX) \u0026\u0026 months.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 years.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static ArrayList\u003cString\u003e getCoverageBreakDown(String coverage) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArrayList\u003cString\u003e coverageBreakDown \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ArgumentTokenizer.tokenize(\" \" + coverage, PREFIX_DAYS, PREFIX_MONTHS, PREFIX_YEARS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String days \u003d (argMultimap.getValue(PREFIX_DAYS).isPresent() ? argMultimap.getValue(PREFIX_DAYS).get() : \"0\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String months \u003d (argMultimap.getValue(PREFIX_MONTHS).isPresent()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ? argMultimap.getValue(PREFIX_MONTHS).get() : \"0\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String years \u003d (argMultimap.getValue(PREFIX_YEARS).isPresent()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                ? argMultimap.getValue(PREFIX_YEARS).get() : \"0\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        coverageBreakDown.add(days);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        coverageBreakDown.add(months);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        coverageBreakDown.add(years);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return coverageBreakDown;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return coverage;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof Coverage // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 coverage.equals(((Coverage) other).coverage)); // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return coverage.hashCode();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 106,
      "ybchen97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a Policy\u0027s description in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description should only contain alphanumeric characters and \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            + \"spaces, and should not be blank! The first character should be a alphanumeric character.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"DESCRIPTION\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * The first character of the description must not be a whitespace to prevent \" \" (a blank string) from becoming"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "     * a valid input. Punctuations are allowed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\p{Punct}\\\\s]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 55,
      "ybchen97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/EndAge.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a Policy\u0027s start age elibility in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class EndAge {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            \"Ages should only contain numbers, and cannot be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"END AGE\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{N}]+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String AGE_INFINITY \u003d \"300\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public final String age;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a {@code EndAge}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param age A valid age."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public EndAge(String age) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a {@code EndAge} starting from 0."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public EndAge() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.age \u003d AGE_INFINITY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if a given string is a valid coverage declaration."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof EndAge // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 age.equals(((EndAge) other).age)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return age.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 65,
      "ybchen97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/Policy.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a Policy in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Policy {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \"This policy is not available.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"POLICY\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final PolicyName name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Coverage coverage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final StartAge startAge;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final EndAge endAge;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Set\u003cTag\u003e criteria \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Policy(PolicyName name, Description description, Coverage coverage, Price price, StartAge startAge,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                  EndAge endAge, Set\u003cTag\u003e criteria, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireAllNonNull(name, description, coverage, price, startAge, endAge, criteria, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.coverage \u003d coverage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.startAge \u003d startAge;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.endAge \u003d endAge;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.criteria.addAll(criteria);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public PolicyName getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Coverage getCoverage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return coverage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public StartAge getStartAge() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return startAge;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public EndAge getEndAge() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return endAge;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns an immutable criteria set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Set\u003cTag\u003e getCriteria() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Collections.unmodifiableSet(criteria);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns true if both policies of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * This defines a weaker notion of equality between two policies."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean isSamePolicy(Policy otherPolicy) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (otherPolicy \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return otherPolicy !\u003d null"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getName().equals(getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if both policies of the same editable fields."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * This defines a weaker notion of equality between two policies."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean hasEqualEditableFields(Policy otherPolicy) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (otherPolicy \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return otherPolicy !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getName().equals(getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getCoverage().equals(getCoverage())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getStartAge().equals(getStartAge())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getEndAge().equals(getEndAge());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns true if both policies have the same identity and data fields."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * This defines a stronger notion of equality between two policies."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!(other instanceof Policy)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy otherPolicy \u003d (Policy) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return otherPolicy.getName().equals(getName())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getCoverage().equals(getCoverage())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getStartAge().equals(getStartAge())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getEndAge().equals(getEndAge())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getCriteria().equals(getCriteria())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 otherPolicy.getTags().equals(getTags());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(\" Coverage: \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(getCoverage())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(getPrice());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!startAge.age.equals(StartAge.AGE_ZERO)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            builder.append(\" Start Age: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    .append(getStartAge());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!endAge.age.equals(EndAge.AGE_INFINITY)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            builder.append(\" End Age: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    .append(getEndAge());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (getCriteria().size() !\u003d 0) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            builder.append(\" Criteria: \");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            getCriteria().forEach(builder::append);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (getTags().size() !\u003d 0) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 175,
      "chaitanyabaranwal": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/PolicyName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a Policy\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class PolicyName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"NAME\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public final String policyName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a {@code PolicyName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param name A valid policy name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public PolicyName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        policyName \u003d formatName(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Formats the policy name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @param name name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private String formatName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        String[] nameSplitBySpace \u003d name.toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        StringBuilder formattedName \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        for (int i \u003d 0; i \u003c nameSplitBySpace.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            String firstLetter \u003d nameSplitBySpace[i].substring(0, 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            String remainingLetters \u003d nameSplitBySpace[i].substring(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            formattedName.append(firstLetter.toUpperCase() + remainingLetters);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            formattedName.append(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return formattedName.toString().trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return policyName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof PolicyName // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 policyName.equals(((PolicyName) other).policyName)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return policyName.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 59,
      "chaitanyabaranwal": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/PolicyNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Tests that a {@code Policy}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class PolicyNameContainsKeywordsPredicate implements Predicate\u003cPolicy\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public boolean test(Policy policy) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(policy.getName().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                || (other instanceof PolicyNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                \u0026\u0026 keywords.equals(((PolicyNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/Price.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a Policy\u0027s price in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            \"Price should start off with \\\"$\\\" and contain only numbers. It should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"PRICE\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[$][\\\\p{N}]+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public final String price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 price.equals(((Price) other).price)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return price.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 58,
      "ybchen97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/StartAge.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Represents a Policy\u0027s start age elibility in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class StartAge {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            \"Ages should only contain numbers, and cannot be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"START AGE\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{N}]+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String AGE_ZERO \u003d \"0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public final String age;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a {@code StartAge}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param age A valid age."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public StartAge(String age) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a {@code StartAge} starting from 0."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public StartAge() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.age \u003d AGE_ZERO;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if a given string is a valid coverage declaration."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof StartAge // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 age.equals(((StartAge) other).age)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return age.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 65,
      "ybchen97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/UniquePolicyList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.policy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.exceptions.DuplicatePolicyException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.exceptions.PolicyNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A list of policies that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * A policy is considered unique by comparing using {@code Person#isSamePolicy(Policy)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * policies uses Policy#isSamePolicy(Policy) for equality so as to ensure that the policy being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * unique in terms of identity in the UniquePolicyList. However, the removal of a policy uses Policy#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * as to ensure that the policy with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * @see seedu.address.model.policy.Policy#isSamePolicy(seedu.address.model.policy.Policy)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class UniquePolicyList implements Iterable\u003cPolicy\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final ObservableList\u003cPolicy\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final ObservableList\u003cPolicy\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns true if the list contains an equivalent policy as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean contains(Policy toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePolicy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Returns true if the list contains an policy with the same name as {@code policyName}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean containsByName(PolicyName policyName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(policyName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return internalList.stream().anyMatch(policy -\u003e policy.getName().equals(policyName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Policy getPolicy(Policy policy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(policy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return internalList.stream().filter(policy::isSamePolicy).findAny().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Gets the policy in the address book with the same name as {@code policyName}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public Policy getPolicyWithName(PolicyName policyName) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        requireNonNull(policyName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return internalList.stream().filter(policy -\u003e policy.getName().equals(policyName)).findFirst().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Adds a policy to the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * The policy must not already exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void add(Policy toAdd) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new DuplicatePolicyException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Replaces the policy {@code target} in the list with {@code editedPolicy}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * The policy identity of {@code editedPolicy} must not be the same as another existing policy in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void setPolicy(Policy target, Policy editedPolicy) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireAllNonNull(target, editedPolicy);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new PolicyNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!target.isSamePolicy(editedPolicy) \u0026\u0026 contains(editedPolicy)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new DuplicatePolicyException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        internalList.set(index, editedPolicy);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Removes the equivalent policy from the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * The policy must exist in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void remove(Policy toRemove) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new PolicyNotFoundException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void setPolicies(UniquePolicyList replacement) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Replaces the contents of this list with {@code policies}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * {@code policies} must not contain duplicate policies."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void setPolicies(List\u003cPolicy\u003e policies) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        requireAllNonNull(policies);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!policiesAreUnique(policies)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new DuplicatePolicyException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        internalList.setAll(policies);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public ObservableList\u003cPolicy\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public Iterator\u003cPolicy\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                || (other instanceof UniquePolicyList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePolicyList) other).internalList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Returns true if {@code policies} contains only unique policies."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private boolean policiesAreUnique(List\u003cPolicy\u003e policies) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (int i \u003d 0; i \u003c policies.size() - 1; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            for (int j \u003d i + 1; j \u003c policies.size(); j++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                if (policies.get(i).isSamePolicy(policies.get(j))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 140,
      "chaitanyabaranwal": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/exceptions/DuplicatePolicyException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.policy.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Signals that the operation will result in duplicate Policies (Policies are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * duplicates if they have the same name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class DuplicatePolicyException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public DuplicatePolicyException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(\"Operation would result in duplicate policies\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/policy/exceptions/PolicyNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.model.policy.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * Signals that the operation is unable to find the specified policy."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class PolicyNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-z\\\\d\\\\-_\\\\s]+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATA_TYPE \u003d \"TAG\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 2,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Nric(\"S0000001A\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                new DateOfBirth(\"12.12.1998\"), new Gender(\"Male\"), getPolicySet(\"teenage\"), getTagSet(\"diabetic\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Nric(\"S0000001B\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                new DateOfBirth(\"11.11.1991\"), new Gender(\"Female\"), getPolicySet(\"young adult\", \"midlife\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                getTagSet(\"medium priority\", \"low risk\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Nric(\"S0000001C\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                new DateOfBirth(\"10.9.2000\"), new Gender(\"Female\"), getPolicySet(\"health\"), getTagSet(\"low priority\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new Person(new Name(\"David Li\"), new Nric(\"S0000001D\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                new DateOfBirth(\"4.6.1969\"), new Gender(\"Male\"), getPolicySet(\"midlife\", \"retirement\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                getTagSet(\"high priority\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Nric(\"S0000001F\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                new DateOfBirth(\"09.04.2010\"), new Gender(\"Male\"), getPolicySet(\"school\"), getTagSet(\"smoker\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Nric(\"S0000001G\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                new DateOfBirth(\"23.8.1999\"), new Gender(\"Male\"), getPolicySet(\"car insurance\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                getTagSet(\"low health risk\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static Set\u003cPolicy\u003e getSamplePolicies() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return getPolicySet(\"teenage\", \"young adult\", \"midlife\", \"health\", \"midlife\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            \"retirement\", \"school\", \"car insurance\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        for (Policy samplePolicy : getSamplePolicies()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            sampleAb.addPolicy(samplePolicy);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static Set\u003cTag\u003e getCriteriaSet(String... strings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return getTagSet(strings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static Set\u003cPolicy\u003e getPolicySet(String... strings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .map(string -\u003e new Policy(new PolicyName(string), new Description(string),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                new Coverage(\" days/10 months/11 years/12\"), new Price(\"$500\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                new StartAge(\"50\"), new EndAge(\"75\"), getCriteriaSet(\"diabetic\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                getTagSet(\"sample\")))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 29,
      "larrylawl": 7,
      "chaitanyabaranwal": 14,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visual/DisplayFormat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.model.visual;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Represents an indicator for the display command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDisplayFormat(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class DisplayFormat {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String DATA_TYPE \u003d \"Indicator\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String PIECHART \u003d \"piechart\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String BARCHART \u003d \"barchart\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final Set\u003cString\u003e VALID_DISPLAY_FORMAT \u003d initializeValidDisplayFormat();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d initializeMessageConstraints();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Constructs an {@code display format}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param displayFormat A valid display format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public DisplayFormat(String displayFormat) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(displayFormat);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.value \u003d displayFormat;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Initializes valid display format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @return a set of valid display format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static Set\u003cString\u003e initializeValidDisplayFormat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        HashSet\u003cString\u003e result \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(PIECHART);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(BARCHART);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Initialises message constraints based on valid display format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @return String."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static String initializeMessageConstraints() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        String result \u003d \"Only the following format are allowed: \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        StringJoiner examples \u003d new StringJoiner(\", \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        VALID_DISPLAY_FORMAT.forEach(displayFormat -\u003e examples.add(displayFormat));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result + examples.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns true if a given string is a valid indicator."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static boolean isValidDisplayFormat(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return VALID_DISPLAY_FORMAT.contains(test);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static Set\u003cString\u003e getValidDisplayFormat() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return VALID_DISPLAY_FORMAT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static String getMessageConstraints() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            || (other instanceof DisplayFormat // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 value.equals(((DisplayFormat) other).value)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "larrylawl": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/visual/DisplayIndicator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.model.visual;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Represents an indicator for the display command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDisplayIndicator(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class DisplayIndicator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String DATA_TYPE \u003d \"Indicator\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String CONTACT_LIST_GROWTH_RATE \u003d \"contact-list-growth-rate\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String POLICY_POPULARITY_BREAKDOWN \u003d \"policy-popularity-breakdown\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String AGE_GROUP_BREAKDOWN \u003d \"age-group-breakdown\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String GENDER_BREAKDOWN \u003d \"gender-breakdown\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final Set\u003cString\u003e VALID_DISPLAY_INDICATORS \u003d initializeValidDisplayIndicators();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d initializeMessageConstraints();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Constructs an {@code display indicator}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param displayIndicator A valid display indicator."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public DisplayIndicator(String displayIndicator) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        requireNonNull(displayIndicator);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.value \u003d displayIndicator;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Initializes valid display indicators."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @return a set of valid display indicators"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static Set\u003cString\u003e initializeValidDisplayIndicators() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        HashSet\u003cString\u003e result \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(POLICY_POPULARITY_BREAKDOWN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(CONTACT_LIST_GROWTH_RATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(AGE_GROUP_BREAKDOWN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.add(GENDER_BREAKDOWN);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Initialises message constraints based on valid display indicators."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @return String."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static String initializeMessageConstraints() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        String result \u003d \"Only the following indicators are allowed: \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        StringJoiner examples \u003d new StringJoiner(\", \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        VALID_DISPLAY_INDICATORS.forEach(displayIndicator -\u003e examples.add(displayIndicator));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result + examples.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns true if a given string is a valid indicator."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static boolean isValidDisplayIndicator(String test) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return VALID_DISPLAY_INDICATORS.contains(test);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static Set\u003cString\u003e getValidDisplayIndicators() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return VALID_DISPLAY_INDICATORS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static String getMessageConstraints() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return String.join(\" \", value.split(\"-\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            || (other instanceof DisplayIndicator // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u0026\u0026 value.equals(((DisplayIndicator) other).value)); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "larrylawl": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final String nric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final String dateOfBirth;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final List\u003cJsonAdaptedPolicy\u003e policies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"nric\") String nric,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                             @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                             @JsonProperty(\"address\") String address, @JsonProperty(\"date of birth\") String dateOfBirth,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                             @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                             @JsonProperty(\"policies\") List\u003cJsonAdaptedPolicy\u003e policies,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (policies !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.policies.addAll(policies);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        nric \u003d source.getNric().nric;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        dateOfBirth \u003d source.getDateOfBirth().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        gender \u003d source.getGender().gender;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        policies.addAll(source.getPolicies().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .map(JsonAdaptedPolicy::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final List\u003cPolicy\u003e policyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (JsonAdaptedPolicy policy : policies) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            policyList.add(policy.toModelType());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (dateOfBirth \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                DateOfBirth.class.getSimpleName()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(dateOfBirth)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final DateOfBirth modelDateOfBirth \u003d new DateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new IllegalValueException(Gender.getMessageConstraints());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final Set\u003cPolicy\u003e modelPolicies \u003d new HashSet\u003c\u003e(policyList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new Person(modelName, modelNric, modelPhone, modelEmail, modelAddress, modelDateOfBirth, modelGender,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            modelPolicies, modelTags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 45,
      "larrylawl": 16,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPolicy.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.policy.Policy}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "class JsonAdaptedPolicy {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    private static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Policy\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final String coverage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final String startAge;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final String endAge;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e criteria \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Constructs a {@code JsonAdaptedPolicy} with the given policy details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public JsonAdaptedPolicy(@JsonProperty(\"name\") String name, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                             @JsonProperty(\"coverage\") String coverage, @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                             @JsonProperty(\"start age\") String startAge, @JsonProperty(\"end age\") String endAge,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                             @JsonProperty(\"criteria\") List\u003cJsonAdaptedTag\u003e criteria,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.coverage \u003d coverage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.startAge \u003d startAge;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.endAge \u003d endAge;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (criteria !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.criteria.addAll(criteria);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Converts a given {@code Policy} into this class for Jackson use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public JsonAdaptedPolicy(Policy source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        name \u003d source.getName().policyName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        coverage \u003d source.getCoverage().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        price \u003d source.getPrice().price;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        startAge \u003d source.getStartAge().age;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        endAge \u003d source.getEndAge().age;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        criteria.addAll(source.getCriteria().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Converts this Jackson-friendly adapted policy object into the model\u0027s {@code Policy} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws seedu.address.commons.exceptions.IllegalValueException if there were"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * any data constraints violated in the adapted policy."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "    Policy toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final List\u003cTag\u003e policyTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final List\u003cTag\u003e criteriaTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            policyTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        for (JsonAdaptedTag criteria : criteria) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            criteriaTags.add(criteria.toModelType());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    PolicyName.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!PolicyName.isValidName(name)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(PolicyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final PolicyName modelName \u003d new PolicyName(name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (coverage \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    Coverage.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!Coverage.isValidCoverage(coverage)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(Coverage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final Coverage modelCoverage \u003d new Coverage(coverage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (startAge \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                    StartAge.class.getSimpleName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!StartAge.isValidAge(startAge)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(StartAge.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final StartAge modelStartAge \u003d new StartAge(startAge);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (endAge \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, EndAge.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!EndAge.isValidAge(endAge)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new IllegalValueException(EndAge.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final EndAge modelEndAge \u003d new EndAge(endAge);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final Set\u003cTag\u003e modelCriteria \u003d new HashSet\u003c\u003e(criteriaTags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(policyTags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return new Policy(modelName, modelDescription, modelCoverage, modelPrice, modelStartAge, modelEndAge,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                modelCriteria, modelTags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 5,
      "chowyiyin": 148,
      "chaitanyabaranwal": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_POLICY \u003d \"Policies list contains duplicate policies.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private final List\u003cJsonAdaptedPolicy\u003e policies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                                       @JsonProperty(\"policies\") List\u003cJsonAdaptedPolicy\u003e policies) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.policies.addAll(policies);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        policies.addAll(source.getPolicyList().stream().map(JsonAdaptedPolicy::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        for (JsonAdaptedPolicy jsonAdaptedPolicy : policies) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            Policy policy \u003d jsonAdaptedPolicy.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            if (addressBook.hasPolicy(policy)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_POLICY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            addressBook.addPolicy(policy);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 14,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BarChartVisual.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayIndicator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "// TODO: Use images to style chart haha"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * An UI component that displays the policy popularity breakdown in the display panel."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class BarChartVisual extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String FXML \u003d \"BarChartVisual.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String POLICY_POPULARITY_XAXIS \u003d \"Policy Type\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String POLICY_POPULARITY_YAXIS \u003d \"Number of policies sold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String GENDER_BREAKDOWN_XAXIS \u003d \"Gender\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String GENDER_BREAKDOWN_YAXIS \u003d \"Population Size\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String AGE_GROUP_XAXIS \u003d \"Age Group\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String AGE_GROUP_YAXIS \u003d \"Population Size\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private String xAxisLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private String yAxisLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private XYChart.Series\u003cString, Integer\u003e series;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private BarChart\u003cString, Integer\u003e barchart;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public BarChartVisual(Logic logic, DisplayIndicator displayIndicator) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        setData(logic, displayIndicator);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private void setData(Logic logic, DisplayIndicator displayIndicator) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        title \u003d displayIndicator.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        switch (displayIndicator.value) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        case DisplayIndicator.POLICY_POPULARITY_BREAKDOWN:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            xAxisLabel \u003d POLICY_POPULARITY_XAXIS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            yAxisLabel \u003d POLICY_POPULARITY_YAXIS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            series \u003d getData(logic.getPolicyPopularityBreakdown());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        case DisplayIndicator.AGE_GROUP_BREAKDOWN:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            xAxisLabel \u003d AGE_GROUP_XAXIS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            yAxisLabel \u003d AGE_GROUP_YAXIS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            series \u003d getData(logic.getAgeGroupBreakdown());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        case DisplayIndicator.GENDER_BREAKDOWN:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            xAxisLabel \u003d GENDER_BREAKDOWN_XAXIS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            yAxisLabel \u003d GENDER_BREAKDOWN_YAXIS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            series \u003d getData(logic.getGenderBreakdown());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            // TODO: display report as default instead"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new ParseException(DisplayIndicator.getMessageConstraints());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        barchart.setTitle(title);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        xAxis.setLabel(xAxisLabel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        yAxis.setLabel(yAxisLabel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        barchart.getData().add(series);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private XYChart.Series\u003cString, Integer\u003e getData(ObservableMap\u003cString, Integer\u003e map) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        map.forEach((key, value) -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            series.getData().add(new XYChart.Data\u003c\u003e(key, value))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return series;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandWordException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePersonWithMergeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePersonWithoutMergeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePolicyWithMergeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.DuplicatePolicyWithoutMergeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.DoNotMergePersonCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.DoNotMergePolicyCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePersonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePolicyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String MERGE_PERSON \u003d \"person\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String MERGE_POLICY \u003d \"policy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String mergeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String doNotMergeCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private boolean isOnMergeStandby \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String mergeType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void handleCommandEntered() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String command \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (isOnMergeStandby) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            handleInitialisingMergeCommand(command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                commandExecutor.execute(command + \" \", false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } catch (CommandWordException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                String commandSuggestion \u003d e.getCommandSuggestion();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                commandTextField.setText(commandSuggestion);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                commandTextField.positionCaret(commandSuggestion.length());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } catch (DuplicatePersonWithMergeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                standByForMerge(command, MERGE_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } catch (DuplicatePolicyWithMergeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                standByForMerge(command, MERGE_POLICY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } catch (DuplicatePersonWithoutMergeException | DuplicatePolicyWithoutMergeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Creates a new merge command and do not merge command and puts command box on standby to accept a merge command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param command Input command by user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws CommandException Should not be thrown."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException Should not be thrown."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void standByForMerge(String command, String mergeType) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (mergeType.equals(MERGE_PERSON)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.mergeCommand \u003d MergePersonCommand.COMMAND_WORD + \" \" + command;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.doNotMergeCommand \u003d DoNotMergePersonCommand.COMMAND_WORD + \" \" + command;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.isOnMergeStandby \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.mergeType \u003d MERGE_PERSON;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.mergeCommand \u003d MergePolicyCommand.COMMAND_WORD + \" \" + command;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.doNotMergeCommand \u003d DoNotMergePolicyCommand.COMMAND_WORD + \" \" + command;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.isOnMergeStandby \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.mergeType \u003d MERGE_POLICY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Calls {@code commandExecutor} to execute a merge if user inputs a \"yes\" and calls {@code commandExecutor} to"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * execute a do not merge command if user inputs \"no\". This method then performs a clean up to remove the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * \"on-standby\" boolean flag."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @param command Add command input by the user that throws a duplicate person error."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws CommandException Should not be thrown."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @throws ParseException Should not be thrown."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private void handleInitialisingMergeCommand(String command) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (command.equals(\"no\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            commandExecutor.execute(doNotMergeCommand, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else if (command.equals(\"yes\") || command.equals(\"\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            commandExecutor.execute(mergeCommand, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                commandExecutor.execute(command, false);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.mergeCommand \u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.isOnMergeStandby \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult execute(String commandText, boolean isSystemInput) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 83,
      "larrylawl": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayIndicator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "// TODO: Remove policy pop from displaypanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Displays information selected by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class DisplayPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String FXML \u003d \"DisplayPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public final String policyHeader \u003d \"Policies\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DisplayPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private Policy policy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private DisplayIndicator displayIndicator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private boolean isPerson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private boolean isPolicy;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private boolean isDisplayIndicator;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private VBox informationHolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public DisplayPanel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public DisplayPanel(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.isPerson \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.isPolicy \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.isDisplayIndicator \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        setInfo();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public DisplayPanel(Policy policy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.policy \u003d policy;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        isPerson \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        isPolicy \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        isDisplayIndicator \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        setInfo();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public DisplayPanel(DisplayIndicator displayIndicator) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        this.displayIndicator \u003d displayIndicator;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        isPerson \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        isPolicy \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        isDisplayIndicator \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        setInfo();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private void setInfo() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        if (isPerson) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            informationHolder.getChildren().add(new PersonInformationHolder(person).getRoot());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            if (person.getPolicies().size() !\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                person.getPolicies().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                    .sorted(Comparator.comparing(policy -\u003e policy.getName().policyName))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                    .forEach(policy -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                        PolicyInformationHolder policyInfo \u003d new PolicyInformationHolder(policy);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                        informationHolder.getChildren().add(policyInfo.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        } else if (isPolicy) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            informationHolder.getChildren().add(new PolicyInformationHolder(policy).getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            // todo: add eligible persons"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HistoryCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * An UI component that displays information of a {@code Pair\u003cString, String\u003e}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class HistoryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private static final String FXML \u003d \"HistoryListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public final Pair\u003cString, String\u003e command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private Label userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public HistoryCard(Pair\u003cString, String\u003e command) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        userInput.setText(command.getValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        tags.getChildren().add(new Label(command.getKey()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        if (!(other instanceof HistoryCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        HistoryCard card \u003d (HistoryCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        return userInput.equals(card.userInput)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                \u0026\u0026 tags.equals(card.tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HistoryListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Panel containing the list of commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class HistoryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private static final String FXML \u003d \"HistoryListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(HistoryListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private ListView\u003cPair\u003cString, String\u003e\u003e historyListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public HistoryListPanel(ObservableList\u003cPair\u003cString, String\u003e\u003e historyList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        historyListView.setItems(historyList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        historyListView.setCellFactory(listView -\u003e new HistoryListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Pair\u003cString, String\u003e} using a {@code HistoryCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    class HistoryListViewCell extends ListCell\u003cPair\u003cString, String\u003e\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        protected void updateItem(Pair\u003cString, String\u003e command, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            super.updateItem(command, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            if (empty || command \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                setGraphic(new HistoryCard(command).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayFormat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayIndicator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private PolicyListPanel policyListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private DisplayPanel displayPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private HistoryListPanel historyListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private ReportPanel reportPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private StackPane displayPlaceHolder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private GridPane resultHolder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        resultHolder.prefHeightProperty().bind(((VBox) resultHolder.getParent()).heightProperty());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        logic.setUserSettings();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String, boolean)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private CommandResult executeCommand(String commandText, boolean isSystemInput) throws"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandException, ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText, isSystemInput);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            if (commandResult.isListPolicy()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                policyListPanel \u003d new PolicyListPanel(logic.getFilteredPolicyList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                listPanelPlaceholder.getChildren().add(policyListPanel.getRoot());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            if (commandResult.isListPeople()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            if (commandResult.isListHistory()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                historyListPanel \u003d new HistoryListPanel(logic.getHistoryList());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                displayPlaceHolder.getChildren().removeAll();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                displayPlaceHolder.getChildren().add(historyListPanel.getRoot());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            if (commandResult.isReport()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                reportPanel \u003d new ReportPanel();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                listPanelPlaceholder.getChildren().add(reportPanel.getRoot());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            if (commandResult.isDisplay()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                DisplayIndicator displayIndicator \u003d commandResult.getDisplayIndicator();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                DisplayFormat displayFormat \u003d commandResult.getDisplayFormat();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                displayPlaceHolder.getChildren().clear();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                switch (displayFormat.value) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                case DisplayFormat.PIECHART:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                    displayPlaceHolder.getChildren().add(new PieChartVisual(logic, displayIndicator).getRoot());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                case DisplayFormat.BARCHART:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                    displayPlaceHolder.getChildren().add(new BarChartVisual(logic, displayIndicator).getRoot());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                    throw new ParseException(DisplayFormat.getMessageConstraints());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            if (commandResult.isExpandPerson()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                displayPanel \u003d new DisplayPanel(commandResult.getPersonToExpand());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                displayPlaceHolder.getChildren().removeAll();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                displayPlaceHolder.getChildren().add(displayPanel.getRoot());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            if (commandResult.isExpandPolicy()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                displayPanel \u003d new DisplayPanel(commandResult.getPolicyToExpand());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                displayPlaceHolder.getChildren().removeAll();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                displayPlaceHolder.getChildren().add(displayPanel.getRoot());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 5,
      "larrylawl": 60,
      "chaitanyabaranwal": 11,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label dateOfBirth;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private FlowPane policies;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        nric.setText(person.getNric().nric);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        dateOfBirth.setText(person.getDateOfBirth().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        gender.setText(person.getGender().gender);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        person.getPolicies().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .sorted(Comparator.comparing(policy -\u003e policy.getName().policyName))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .forEach(policy -\u003e policies.getChildren().add(new Label(policy.getName().policyName)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 11,
      "larrylawl": 3,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonInformationHolder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An UI component that displays information of a {@code Person} in the display panel."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class PersonInformationHolder extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String FXML \u003d \"PersonInformationHolder.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label dateOfBirth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private VBox informationHolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String nameHeader \u003d \"Name: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String nricHeader \u003d \"NRIC: \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String phoneHeader \u003d \"Phone: \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String addressHeader \u003d \"Address: \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String emailHeader \u003d \"Email: \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String dateOfBirthHeader \u003d \"Date of birth: \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public PersonInformationHolder(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        name.setText(nameHeader + person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        nric.setText(nricHeader + person.getNric().nric);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        phone.setText(phoneHeader + person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        address.setText(addressHeader + person.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        email.setText(emailHeader + person.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        dateOfBirth.setText(dateOfBirthHeader + person.getDateOfBirth().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!(other instanceof PersonInformationHolder)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        PersonInformationHolder card \u003d (PersonInformationHolder) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return person.equals(card.person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PieChartVisual.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayIndicator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * An UI component that displays the policy popularity breakdown in the display panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class PieChartVisual extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String FXML \u003d \"PieChartVisual.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e pieChartData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private PieChart piechart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PieChartVisual(Logic logic, DisplayIndicator displayIndicator) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        setData(logic, displayIndicator);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private void setData(Logic logic, DisplayIndicator displayIndicator) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        title \u003d displayIndicator.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        switch (displayIndicator.value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        case DisplayIndicator.POLICY_POPULARITY_BREAKDOWN:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            pieChartData \u003d getData(logic.getPolicyPopularityBreakdown());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        case DisplayIndicator.AGE_GROUP_BREAKDOWN:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            pieChartData \u003d getData(logic.getAgeGroupBreakdown());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        case DisplayIndicator.GENDER_BREAKDOWN:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            pieChartData \u003d getData(logic.getGenderBreakdown());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new ParseException(DisplayIndicator.getMessageConstraints());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        piechart.setData(pieChartData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        piechart.setTitle(title);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e getData(ObservableMap\u003cString, Integer\u003e map) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e data \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        map.forEach((key, value) -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            data.add(new PieChart.Data(key, value))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PolicyCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An UI component that displays information of a {@code Policy}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class PolicyCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String FXML \u003d \"PolicyListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public final Policy policy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label coverage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label startAge;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label endAge;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private FlowPane criteria;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    // todo: remove end age and start age if criteria was not set."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public PolicyCard(Policy policy, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.policy \u003d policy;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        name.setText(policy.getName().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        description.setText(policy.getDescription().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        coverage.setText(policy.getCoverage().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        price.setText(policy.getPrice().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!policy.getStartAge().age.equals(\"0\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            startAge.setText(policy.getStartAge().age);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            startAge.setText(StartAge.AGE_ZERO);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!policy.getEndAge().age.equals(EndAge.AGE_INFINITY)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            endAge.setText(policy.getEndAge().age);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            endAge.setText(EndAge.AGE_INFINITY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        policy.getCriteria().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        policy.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!(other instanceof PolicyCard)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        PolicyCard card \u003d (PolicyCard) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u0026\u0026 policy.equals(card.policy);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 93,
      "larrylawl": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PolicyInformationHolder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " * An UI component that displays information of a {@code policy} in the display panel."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class PolicyInformationHolder extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String FXML \u003d \"PolicyInformationHolder.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private final Policy policy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String nameHeader \u003d \"Name: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String descriptionHeader \u003d \"Description: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String coverageHeader \u003d \"Coverage: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String priceHeader \u003d \"Price: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String startAgeHeader \u003d \"Start Age: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private String endAgeHeader \u003d \"End Age: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label coverage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private VBox informationHolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public PolicyInformationHolder(Policy policy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        this.policy \u003d policy;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        name.setText(nameHeader + policy.getName().policyName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        description.setText(descriptionHeader + policy.getDescription().description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        coverage.setText(coverageHeader + policy.getCoverage().coverage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        price.setText(priceHeader + policy.getPrice().price);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!policy.getStartAge().age.equals(StartAge.AGE_ZERO)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            informationHolder.getChildren().add(new Label(startAgeHeader + policy.getStartAge().age));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!policy.getEndAge().age.equals(EndAge.AGE_INFINITY)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            informationHolder.getChildren().add(new Label(endAgeHeader + policy.getEndAge().age));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        policy.getCriteria().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        policy.getTags().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        if (!(other instanceof PolicyInformationHolder)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        PolicyInformationHolder card \u003d (PolicyInformationHolder) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return policy.equals(card.policy);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PolicyListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Panel containing the list of policies."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class PolicyListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String FXML \u003d \"PolicyListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PolicyListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private ListView\u003cPolicy\u003e policyListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public PolicyListPanel(ObservableList\u003cPolicy\u003e policyList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        policyListView.setItems(policyList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        policyListView.setCellFactory(listView -\u003e new PolicyListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Policy} using a {@code PolicyCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    class PolicyListViewCell extends ListCell\u003cPolicy\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        protected void updateItem(Policy policy, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            super.updateItem(policy, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            if (empty || policy \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                setGraphic(new PolicyCard(policy, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 45,
      "chaitanyabaranwal": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReportPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "// TODO: Consider using barchart series"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "// https://docs.oracle.com/javafx/2/charts/bar-chart.htm"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Displays report with key KPIs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class ReportPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String FXML \u003d \"ReportPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReportPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private LineChart\u003cNumber, Number\u003e lineChart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public ReportPanel() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        final NumberAxis xAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        lineChart \u003d new LineChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 29
    }
  },
  {
    "path": "src/main/resources/view/BarChartVisual.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003cBarChart fx:id\u003d\"barchart\" legendVisible\u003d\"false\" styleClass\u003d\"visual\" stylesheets\u003d\"@Visual.css\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    \u003cxAxis\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003cCategoryAxis fx:id\u003d\"xAxis\" side\u003d\"BOTTOM\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    \u003cyAxis\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c/BarChart\u003e"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 14
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ".scrollpane {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-background: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "#policies {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "#policies .label {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-background-color: #edaf3b;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "#criteria.label {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-background-color: #edaf3b;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "#informationHolder .label {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 37,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/DisplayPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003cScrollPane styleClass\u003d\"scrollpane\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "  \u003ccontent\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    \u003cAnchorPane style\u003d\"-fx-background-color: black;\" styleClass\u003d\"background\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u003cVBox fx:id\u003d\"informationHolder\" styleClass\u003d\"background\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "  \u003c/content\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 14
    }
  },
  {
    "path": "src/main/resources/view/HistoryListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"70\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                \u003cLabel fx:id\u003d\"userInput\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$userInput\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 36
    }
  },
  {
    "path": "src/main/resources/view/HistoryListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    \u003cListView fx:id\u003d\"historyListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003cGridPane fx:id\u003d\"resultHolder\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "          \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "          \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "              \u003cVBox fx:id\u003d\"resultList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                  \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "              \u003cStackPane fx:id\u003d\"displayPlaceHolder\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "           \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 1,
      "larrylawl": 22,
      "chaitanyabaranwal": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/PersonInformationHolder.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003cVBox fx:id\u003d\"informationHolder\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dob\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 21
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"policies\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dob\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 11,
      "larrylawl": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/PieChartVisual.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003cPieChart styleClass\u003d\"visual\" id\u003d\"piechart\" fx:id\u003d\"piechart\" stylesheets\u003d\"@Visual.css\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 6
    }
  },
  {
    "path": "src/main/resources/view/PolicyInformationHolder.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003cVBox fx:id\u003d\"informationHolder\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"criteria\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"coverage\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$coverage\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "      \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 20
    }
  },
  {
    "path": "src/main/resources/view/PolicyListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"criteria\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cLabel fx:id\u003d\"coverage\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$coverage\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cLabel fx:id\u003d\"startAge\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startAge\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cLabel fx:id\u003d\"endAge\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endAge\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 1,
      "larrylawl": 42
    }
  },
  {
    "path": "src/main/resources/view/PolicyListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    \u003cListView fx:id\u003d\"policyListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 8
    }
  },
  {
    "path": "src/main/resources/view/ReportPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003cLineChart fx:id\u003d\"ReportPanel\" title\u003d\"Report\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    \u003cxAxis\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    \u003cyAxis\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "\u003c/LineChart\u003e"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 14
    }
  },
  {
    "path": "src/main/resources/view/Visual.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    -fx-font-size: 2em;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ".visual {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/TimeUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "class TimeUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public void parseAgeGroup_yearOfBirth_returnTrue() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        int currentYear \u003d TimeUtil.getCurrentYear();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertEquals(TimeUtil.BELOW_TWENTY, TimeUtil.parseAgeGroup(currentYear));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertEquals(TimeUtil.TWENTY_TO_SIXTYFOUR, TimeUtil.parseAgeGroup(currentYear - 20));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertEquals(TimeUtil.TWENTY_TO_SIXTYFOUR, TimeUtil.parseAgeGroup(currentYear - 64));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertEquals(TimeUtil.ABOVE_SIXTYFIVE, TimeUtil.parseAgeGroup(currentYear - 100));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ListPeopleCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        model.setUserSettings(new UserSettings(false));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String listPeopleCommand \u003d ListPeopleCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertCommandSuccess(listPeopleCommand, ListPeopleCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + ADDRESS_DESC_AMY + DATE_OF_BIRTH_DESC_AMY + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withPolicies().withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand, false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand, false));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 11,
      "larrylawl": 7,
      "chaitanyabaranwal": 2,
      "-": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(personInList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            addCommand.generateExceptionMessageWithoutMergePrompt(personInList));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 2,
      "larrylawl": 2,
      "chaitanyabaranwal": 2,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.testutil.TestUtil.ModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_duplicatePersonWithSameFields_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(CommandException.class, addCommand.generateExceptionMessageWithoutMergePrompt(validPerson), ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_duplicatePersonWithDifferentFields_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person duplicatePersonWithDifferentPhone \u003d new PersonBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(duplicatePersonWithDifferentPhone);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            addCommand.generateExceptionMessageWithMergePrompt(validPerson), ()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.person;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final ArrayList\u003cPolicy\u003e policiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            policiesAdded.add(policy);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void saveAddressBookState() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 28,
      "larrylawl": 4,
      "chaitanyabaranwal": 3,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddPolicyCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PolicyBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.testutil.TestUtil.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class AddPolicyCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void constructor_nullPolicy_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPolicyCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_policyAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubAcceptingPolicyAdded modelStub \u003d new ModelStubAcceptingPolicyAdded();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy validPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new AddPolicyCommand(validPolicy).execute(modelStub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(AddPolicyCommand.MESSAGE_SUCCESS, validPolicy), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(Arrays.asList(validPolicy), modelStub.policiesAdded);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_duplicatePolicyWithSameFields_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy validPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        AddPolicyCommand addPolicyCommand \u003d new AddPolicyCommand(validPolicy);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPolicy(validPolicy);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(CommandException.class, addPolicyCommand.generateExceptionMessageWithoutMergePrompt(validPolicy), ("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ) -\u003e addPolicyCommand.execute(modelStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_duplicatePolicyWithDifferentFields_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy validPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy duplicatePolicyWithDifferentDescription \u003d new PolicyBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_FIRE_INSURANCE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        AddPolicyCommand addPolicyCommand \u003d new AddPolicyCommand(duplicatePolicyWithDifferentDescription);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPolicy(validPolicy);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            addPolicyCommand.generateExceptionMessageWithMergePrompt(validPolicy), ()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                -\u003e addPolicyCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy health \u003d new PolicyBuilder().withName(\"Health\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy fitness \u003d new PolicyBuilder().withName(\"Fitness\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        AddPolicyCommand addHealthCommand \u003d new AddPolicyCommand(health);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        AddPolicyCommand addFitnessCommand \u003d new AddPolicyCommand(fitness);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(addHealthCommand.equals(addHealthCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        AddPolicyCommand addHealthCommandCopy \u003d new AddPolicyCommand(health);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(addHealthCommand.equals(addHealthCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(addHealthCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(addHealthCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(addHealthCommand.equals(addFitnessCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that contains a single policy."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubWithPolicy extends ModelStub {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private final Policy policy;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPolicy(Policy policy) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.policy \u003d policy;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.policy.isSamePolicy(policy);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getPolicy(Policy policy) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.policy;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubAcceptingPolicyAdded extends ModelStub {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final ArrayList\u003cPolicy\u003e policiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return policiesAdded.stream().anyMatch(policy::isSamePolicy);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            policiesAdded.add(policy);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void saveAddressBookState() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 132,
      "larrylawl": 3,
      "chaitanyabaranwal": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AssignPolicyCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HEALTH_INSURANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LIFE_INSURANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPolicyAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_POLICY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_POLICY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "class AssignPolicyCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_unfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person personToAssign \u003d model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Policy policyToAssign \u003d model.getAddressBook().getPolicyList().get(INDEX_SECOND_POLICY.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person assignedPerson \u003d new PersonBuilder(personToAssign).addPolicies(policyToAssign).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        AssignPolicyCommand assignPolicyCommand \u003d new AssignPolicyCommand(INDEX_FIRST_PERSON, policyToAssign.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        String expectedMessage \u003d String.format(AssignPolicyCommand.MESSAGE_ASSIGN_POLICY_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            policyToAssign.getName(), personToAssign.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.setPerson(model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            assignedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(assignPolicyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPolicyAtIndex(model, INDEX_SECOND_POLICY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Policy policyInFilteredList \u003d model.getFilteredPolicyList().get(INDEX_FIRST_POLICY.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person assignedPerson \u003d new PersonBuilder(personInFilteredList).addPolicies(policyInFilteredList).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        AssignPolicyCommand assignPolicyCommand \u003d new AssignPolicyCommand(INDEX_FIRST_POLICY,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            policyInFilteredList.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        String expectedMessage \u003d String.format(AssignPolicyCommand.MESSAGE_ASSIGN_POLICY_SUCCESS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            model.getFilteredPolicyList().get(INDEX_FIRST_POLICY.getZeroBased()).getName(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()).getName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPolicyAtIndex(expectedModel, INDEX_SECOND_POLICY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), assignedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(assignPolicyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_alreadyAssignedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        final PolicyName policyName \u003d new PolicyName(VALID_NAME_LIFE_INSURANCE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        AssignPolicyCommand assignPolicyCommand \u003d new AssignPolicyCommand(INDEX_SECOND_PERSON, policyName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(assignPolicyCommand, model, String.format(AssignPolicyCommand.MESSAGE_ALREADY_ASSIGNED,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased()).getName(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            policyName));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_alreadyAssignedFilteredList_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        final PolicyName policyName \u003d new PolicyName(VALID_NAME_LIFE_INSURANCE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        AssignPolicyCommand assignPolicyCommand \u003d new AssignPolicyCommand(INDEX_FIRST_PERSON, policyName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(assignPolicyCommand, model, String.format(AssignPolicyCommand.MESSAGE_ALREADY_ASSIGNED,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()).getName(), policyName));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        AssignPolicyCommand assignPolicyCommand \u003d new AssignPolicyCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new PolicyName(VALID_NAME_HEALTH_INSURANCE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(assignPolicyCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    void execute_policyNotInAddressBook_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        final PolicyName policyName \u003d new PolicyName(\"TESTING INVALID POLICY\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        AssignPolicyCommand assignPolicyCommand \u003d new AssignPolicyCommand(INDEX_FIRST_PERSON, policyName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(assignPolicyCommand, model, String.format(AssignPolicyCommand.MESSAGE_POLICY_NOT_FOUND,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            policyName));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // check if given out of bounds index is still within range for entire list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        AssignPolicyCommand assignPolicyCommand \u003d new AssignPolicyCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new PolicyName(VALID_NAME_HEALTH_INSURANCE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(assignPolicyCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        final PolicyName policyName \u003d new PolicyName(VALID_NAME_HEALTH_INSURANCE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        final AssignPolicyCommand standardCommand \u003d new AssignPolicyCommand(INDEX_FIRST_PERSON, policyName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        AssignPolicyCommand newCommand \u003d new AssignPolicyCommand(INDEX_FIRST_PERSON, policyName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertTrue(standardCommand.equals(newCommand));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        newCommand \u003d new AssignPolicyCommand(INDEX_SECOND_PERSON, policyName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertFalse(standardCommand.equals(newCommand));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // different objects -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            false, false, false, false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, false, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, false, false)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different list policy value -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            true, false, false, false, false, false, false)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different list people value -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, true, false, false, false, false, false)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different report value -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, true, false, false, false, false)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different display value -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, true, false, false, false)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different expand person value -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, true, false, false)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different expand policy value -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, true, false)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different list history value -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                false, false, false, false, false, false, true)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different listPolicy value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            true, false, false, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different listPeople value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, true, false, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different report value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, true, false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different display value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, true, false, true, false, false, false).hashCode());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different expand person value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, true, false, false).hashCode());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different expand policy value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, false, true, false).hashCode());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // different histHistory value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, false, false, true).hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 66,
      "chaitanyabaranwal": 1,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.PolicyNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"S0019283A\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"S0102939B\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"91111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"82222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALID_DATE_OF_BIRTH_AMY \u003d \"1.1.1991\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALID_DATE_OF_BIRTH_BOB \u003d \"2.2.1992\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"Female\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"Male\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String VALID_POLICY_HEALTH \u003d \"Health Insurance\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String VALID_POLICY_LIFE \u003d \"Life Insurance\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALID_TAG_DIABETIC \u003d \"diabetic\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALID_TAG_SMOKER \u003d \"smoker\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATE_OF_BIRTH_DESC_AMY \u003d \" \" + PREFIX_DATE_OF_BIRTH + VALID_DATE_OF_BIRTH_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String DATE_OF_BIRTH_DESC_BOB \u003d \" \" + PREFIX_DATE_OF_BIRTH + VALID_DATE_OF_BIRTH_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String POLICY_DESC_HEALTH \u003d \" \" + PREFIX_POLICY + VALID_POLICY_HEALTH;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final String POLICY_DESC_LIFE \u003d \" \" + PREFIX_POLICY + VALID_POLICY_LIFE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String TAG_DESC_DIABETIC \u003d \" \" + PREFIX_TAG + VALID_TAG_DIABETIC;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String TAG_DESC_SMOKER \u003d \" \" + PREFIX_TAG + VALID_TAG_SMOKER;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"A000001J\"; // A not allowed at the start of Nric"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String INVALID_DATE_OF_BIRTH_DESC \u003d \" \" + PREFIX_DATE_OF_BIRTH + \"12/12/2019\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"not sure\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    // slashes not allowed for date of birth"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String INVALID_POLICY_DESC \u003d \" \" + PREFIX_POLICY + \"health*\"; // \u0027*\u0027 not allowed in policy names"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    // Policies"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_NAME_HEALTH_INSURANCE \u003d \"Health Insurance\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_NAME_LIFE_INSURANCE \u003d \"Life Insurance\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_NAME_FIRE_INSURANCE \u003d \"Fire Insurance\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_DESCRIPTION_HEALTH_INSURANCE \u003d \"Insurance for healthcare\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_DESCRIPTION_LIFE_INSURANCE \u003d \"Insurance for life\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_DESCRIPTION_FIRE_INSURANCE \u003d \"Insurance for fire\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_COVERAGE_HEALTH_INSURANCE \u003d \"days/10 months/11 years/12\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_COVERAGE_LIFE_INSURANCE \u003d \"years/50\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_COVERAGE_FIRE_INSURANCE \u003d \"days/30 months/12\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_START_AGE_HEALTH_INSURANCE \u003d \"30\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_START_AGE_LIFE_INSURANCE \u003d \"21\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_START_AGE_FIRE_INSURANCE \u003d \"0\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_END_AGE_HEALTH_INSURANCE \u003d \"75\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_END_AGE_LIFE_INSURANCE \u003d \"80\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_END_AGE_FIRE_INSURANCE \u003d \"5\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_PRICE_HEALTH_INSURANCE \u003d \"$50000\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_PRICE_LIFE_INSURANCE \u003d \"$1000000\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_PRICE_FIRE_INSURANCE \u003d \"$7500\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_CRITERIA_HEALTH_INSURANCE \u003d \"diabetic\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_CRITERIA_LIFE_INSURANCE \u003d \"high blood pressure\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_CRITERIA_FIRE_INSURANCE \u003d \"public housing\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_TAG_HEALTH_INSURANCE \u003d \"health insurance\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_TAG_LIFE_INSURANCE \u003d \"term insurance\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final String VALID_TAG_FIRE_INSURANCE \u003d \"home insurance\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALID_SUGGESTION_OFF_COMMAND \u003d \"suggestion OFF/\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final String VALID_SUGGESTION_ON_COMMAND \u003d \"suggestion ON/\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withDateOfBirth(VALID_DATE_OF_BIRTH_AMY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withDateOfBirth(VALID_DATE_OF_BIRTH_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static void assertListPeopleCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                                                      Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false, false, true,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static void assertListPolicyCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                                                      Model expectedModel) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false, true, false,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static void assertHistoryCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "                                                   Model expectedModel) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            false, false, false, false, false, false, true);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the policy at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * @param targetIndex"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static void showPolicyAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPolicyList().size());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        Policy policy \u003d model.getFilteredPolicyList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        final String[] splitName \u003d policy.getName().policyName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        model.updateFilteredPolicyList(new PolicyNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertEquals(1, model.getFilteredPolicyList().size());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 28,
      "larrylawl": 80,
      "chaitanyabaranwal": 15,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 1,
      "chaitanyabaranwal": 2,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(0).getPolicies(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            model.getFilteredPersonList().get(0).getTags()).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // policies and tags should not change."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        descriptor.setPolicies(model.getFilteredPersonList().get(0).getPolicies());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        descriptor.setTags(model.getFilteredPersonList().get(0).getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 7,
      "larrylawl": 1,
      "chaitanyabaranwal": 5,
      "-": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 2,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            new CommandResult("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                true,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                false,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 12,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertListPeopleCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        assertListPeopleCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "olivercheok20"
        },
        "content": "        assertListPeopleCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "olivercheok20": 3,
      "larrylawl": 1,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                false, false, false, false, false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 1,
      "larrylawl": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertHistoryCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPolicyAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_POLICY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertHistoryCommandSuccess(new HistoryCommand(), model, HistoryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPolicyAtIndex(model, INDEX_FIRST_POLICY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPolicyAtIndex(expectedModel, INDEX_FIRST_POLICY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertHistoryCommandSuccess(new HistoryCommand(), model, HistoryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertHistoryCommandSuccess(new HistoryCommand(), model, HistoryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListPeopleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertListPeopleCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class ListPeopleCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertListPeopleCommandSuccess(new ListPeopleCommand(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            ListPeopleCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertListPeopleCommandSuccess(new ListPeopleCommand(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            ListPeopleCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertListPeopleCommandSuccess("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            new ListPeopleCommand(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            ListPeopleCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 14,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListPolicyCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertListPolicyCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPolicyAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListPolicyCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class ListPolicyCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertListPolicyCommandSuccess(new ListPolicyCommand(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            ListPolicyCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        showPolicyAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertListPolicyCommandSuccess(new ListPolicyCommand(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            ListPolicyCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 13,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MergePersonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePersonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.testutil.TestUtil.ModelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePersonCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MergePersonCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeConfirmedWithOneDifference_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person inputPerson \u003d new PersonBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPerson modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePersonCommand(inputPerson).execute(modelStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePersonCommand.MERGE_COMMAND_PROMPT, Phone.DATA_TYPE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"\\n\" + MergePersonCommand.ORIGINAL_HEADER + validPerson.getPhone().value + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + MergePersonCommand.INPUT_HEADER + VALID_PHONE_AMY, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeConfirmedWithMoreThanOneDifference_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person inputPerson \u003d new PersonBuilder().withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPerson modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePersonCommand(inputPerson).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePersonCommand.MERGE_COMMAND_PROMPT, Phone.DATA_TYPE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"\\n\" + MergePersonCommand.ORIGINAL_HEADER + validPerson.getPhone().value + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + MergePersonCommand.INPUT_HEADER + VALID_PHONE_BOB, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonCommand commandWithAlice \u003d new MergePersonCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonCommand commandWithBob \u003d new MergePersonCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(commandWithAlice.equals(commandWithAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonCommand commandWithAliceCopy \u003d new MergePersonCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(commandWithAlice.equals(commandWithAliceCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(commandWithAlice.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(commandWithAlice.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(commandWithAlice.equals(commandWithBob));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Person person;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getPerson(Person input) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.person;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.person \u003d editedPerson;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final ArrayList\u003cPolicy\u003e policiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            policiesAdded.add(policy);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 134,
      "larrylawl": 1,
      "chaitanyabaranwal": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MergePersonConfirmedCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePersonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePersonConfirmedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.testutil.TestUtil.ModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePersonConfirmedCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void constructor_nullCommand_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MergePersonConfirmedCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeConfirmedWithOneMergeLeft_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person inputPerson \u003d new PersonBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonCommandStub mergeCommandStub \u003d new MergePersonCommandStub(inputPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPerson modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePersonConfirmedCommand(mergeCommandStub).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePersonConfirmedCommand.MESSAGE_MERGE_FIELD_SUCCESS, Phone.DATA_TYPE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"\\n\" + String.format(mergeCommandStub.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            inputPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(modelStub.getPerson(), inputPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeConfirmedWithMoreThanOneMergeLeft_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person inputPerson \u003d new PersonBuilder().withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonCommandStubWithMultipleMerges mergeCommandStub \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            new MergePersonCommandStubWithMultipleMerges(inputPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPerson modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePersonConfirmedCommand(mergeCommandStub).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePersonConfirmedCommand.MESSAGE_MERGE_FIELD_SUCCESS, Phone.DATA_TYPE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"\\n\" + mergeCommandStub.getNextMergePrompt(), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(modelStub.getPerson(), new PersonBuilder().withPhone(VALID_PHONE_BOB).build());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonCommandStub commandWithAlice \u003d new MergePersonCommandStub(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonCommandStub commandWithBob \u003d new MergePersonCommandStub(bob);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonConfirmedCommand mergeAliceCommand \u003d new MergePersonConfirmedCommand(commandWithAlice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonConfirmedCommand mergeBobCommand \u003d new MergePersonConfirmedCommand(commandWithBob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(mergeAliceCommand.equals(mergeAliceCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonConfirmedCommand mergeAliceCommandCopy \u003d new MergePersonConfirmedCommand(commandWithAlice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(mergeAliceCommand.equals(mergeAliceCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeAliceCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeAliceCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeAliceCommand.equals(mergeBobCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class MergePersonCommandStub extends MergePersonCommand {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * Creates an Merge Command to update the original {@code Person} to the new {@code Person}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * @param inputPerson"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Person originalPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public MergePersonCommandStub(Person inputPerson) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            super(inputPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void updateOriginalPerson(Person editedPerson) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.originalPerson \u003d editedPerson;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergePrompt() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            StringBuilder mergePrompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            mergePrompt.append(String.format(MERGE_COMMAND_PROMPT, Phone.DATA_TYPE) + \"\\n\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(ORIGINAL_HEADER + originalPerson.getPhone().value + \"\\n\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(INPUT_HEADER + super.getInputPerson().getPhone().value);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return mergePrompt.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void removeFirstDifferentField() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergeFieldType() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return Phone.DATA_TYPE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getInputPerson() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return super.getInputPerson();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getOriginalPerson() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.originalPerson;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean onlyOneMergeLeft() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class MergePersonCommandStubWithMultipleMerges extends MergePersonCommand {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * Creates an Merge Command to update the original {@code Person} to the new {@code Person}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * @param inputPerson"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Person originalPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private ArrayList\u003cString\u003e dataTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public MergePersonCommandStubWithMultipleMerges(Person inputPerson) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            super(inputPerson);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.add(Phone.DATA_TYPE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.add(Address.DATA_TYPE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void updateOriginalPerson(Person editedPerson) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.originalPerson \u003d editedPerson;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergePrompt() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            StringBuilder mergePrompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            mergePrompt.append(String.format(MERGE_COMMAND_PROMPT, Address.DATA_TYPE) + \"\\n\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(ORIGINAL_HEADER + originalPerson.getAddress().value + \"\\n\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(INPUT_HEADER + super.getInputPerson().getAddress().value);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return mergePrompt.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void removeFirstDifferentField() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.remove(0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergeFieldType() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return dataTypes.get(0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getInputPerson() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return super.getInputPerson();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getOriginalPerson() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.originalPerson;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public ArrayList\u003cString\u003e getDataTypes() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.dataTypes;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean onlyOneMergeLeft() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Person person;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getPerson() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.person;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.person \u003d editedPerson;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final ArrayList\u003cPolicy\u003e policiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            policiesAdded.add(policy);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 238,
      "larrylawl": 1,
      "chaitanyabaranwal": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MergePersonRejectedCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePersonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePersonRejectedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.testutil.TestUtil.ModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePersonRejectedCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void constructor_nullCommand_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MergePersonRejectedCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeRejectedWithOneMergeLeft_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person inputPerson \u003d new PersonBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonCommandStub mergeCommandStub \u003d new MergePersonCommandStub(inputPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPerson modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePersonRejectedCommand(mergeCommandStub).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePersonRejectedCommand.MESSAGE_MERGE_FIELD_NOT_EXECUTED, Phone.DATA_TYPE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"\\n\" + String.format(mergeCommandStub.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            mergeCommandStub.getOriginalPerson()), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(modelStub.getPerson(), new PersonBuilder().build());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeConfirmedWithMoreThanOneMergeLeft_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person inputPerson \u003d new PersonBuilder().withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonCommandStubWithMultipleMerges mergeCommandStub \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            new MergePersonCommandStubWithMultipleMerges(inputPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPerson modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePersonRejectedCommand(mergeCommandStub).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePersonRejectedCommand.MESSAGE_MERGE_FIELD_NOT_EXECUTED, Phone.DATA_TYPE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"\\n\" + mergeCommandStub.getNextMergePrompt(), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(modelStub.getPerson(), new PersonBuilder().build());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonCommandStub commandWithAlice \u003d new MergePersonCommandStub(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonCommandStub commandWithBob \u003d new MergePersonCommandStub(bob);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonRejectedCommand mergeAliceCommand \u003d new MergePersonRejectedCommand(commandWithAlice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonRejectedCommand mergeBobCommand \u003d new MergePersonRejectedCommand(commandWithBob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(mergeAliceCommand.equals(mergeAliceCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePersonRejectedCommand mergeAliceCommandCopy \u003d new MergePersonRejectedCommand(commandWithAlice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(mergeAliceCommand.equals(mergeAliceCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeAliceCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeAliceCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeAliceCommand.equals(mergeBobCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class MergePersonCommandStub extends MergePersonCommand {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * Creates an Merge Command to update the original {@code Person} to the new {@code Person}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * @param inputPerson"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Person originalPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public MergePersonCommandStub(Person inputPerson) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            super(inputPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void updateOriginalPerson(Person editedPerson) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.originalPerson \u003d editedPerson;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergePrompt() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            StringBuilder mergePrompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            mergePrompt.append(String.format(MERGE_COMMAND_PROMPT, Phone.DATA_TYPE) + \"\\n\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(ORIGINAL_HEADER + originalPerson.getPhone().value + \"\\n\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(INPUT_HEADER + super.getInputPerson().getPhone().value);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return mergePrompt.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void removeFirstDifferentField() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergeFieldType() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return Phone.DATA_TYPE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getInputPerson() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return super.getInputPerson();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getOriginalPerson() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.originalPerson;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean onlyOneMergeLeft() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class MergePersonCommandStubWithMultipleMerges extends MergePersonCommand {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * Creates an Merge Command to update the original {@code Person} to the new {@code Person}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * @param inputPerson"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Person originalPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private ArrayList\u003cString\u003e dataTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public MergePersonCommandStubWithMultipleMerges(Person inputPerson) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            super(inputPerson);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.add(Phone.DATA_TYPE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.add(Address.DATA_TYPE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void updateOriginalPerson(Person editedPerson) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.originalPerson \u003d editedPerson;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergePrompt() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            StringBuilder mergePrompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            mergePrompt.append(String.format(MERGE_COMMAND_PROMPT, Address.DATA_TYPE) + \"\\n\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(ORIGINAL_HEADER + originalPerson.getAddress().value + \"\\n\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(INPUT_HEADER + super.getInputPerson().getAddress().value);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return mergePrompt.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void removeFirstDifferentField() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.remove(0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergeFieldType() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return dataTypes.get(0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getInputPerson() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return super.getInputPerson();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getOriginalPerson() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.originalPerson;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public ArrayList\u003cString\u003e getDataTypes() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.dataTypes;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean onlyOneMergeLeft() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Person person;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Person getPerson() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.person;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.person \u003d editedPerson;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final ArrayList\u003cPolicy\u003e policiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            policiesAdded.add(policy);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 238,
      "larrylawl": 1,
      "chaitanyabaranwal": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MergePolicyCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COVERAGE_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.util.PolicyBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePolicyCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.testutil.TestUtil.ModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePolicyCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void constructor_nullPolicy_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MergePolicyCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeConfirmedWithOneDifference_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy validPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy inputPolicy \u003d new PolicyBuilder().withDescription(VALID_DESCRIPTION_FIRE_INSURANCE).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPolicy modelStub \u003d new ModelStubWithPolicy(validPolicy);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePolicyCommand(inputPolicy).execute(modelStub);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePolicyCommand.MERGE_COMMAND_PROMPT, Description.DATA_TYPE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + \"\\n\" + MergePolicyCommand.ORIGINAL_HEADER + validPolicy.getDescription().description + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + MergePolicyCommand.INPUT_HEADER + VALID_DESCRIPTION_FIRE_INSURANCE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeConfirmedWithMoreThanOneDifference_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy validPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy inputPolicy \u003d new PolicyBuilder().withDescription(VALID_DESCRIPTION_FIRE_INSURANCE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withCoverage(VALID_COVERAGE_FIRE_INSURANCE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPolicy modelStub \u003d new ModelStubWithPolicy(validPolicy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePolicyCommand(inputPolicy).execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePolicyCommand.MERGE_COMMAND_PROMPT, Description.DATA_TYPE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + \"\\n\" + MergePolicyCommand.ORIGINAL_HEADER + validPolicy.getDescription().description + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + MergePolicyCommand.INPUT_HEADER + VALID_DESCRIPTION_FIRE_INSURANCE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy health \u003d new PolicyBuilder().withName(\"Health Insurance\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy fire \u003d new PolicyBuilder().withName(\"Fire Insurance\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyCommand commandWithHealth \u003d new MergePolicyCommand(health);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyCommand commandWithFire \u003d new MergePolicyCommand(fire);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(commandWithHealth.equals(commandWithHealth));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyCommand commandWithHealthCopy \u003d new MergePolicyCommand(health);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(commandWithHealth.equals(commandWithHealthCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(commandWithHealth.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(commandWithHealth.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different Policy -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(commandWithHealth.equals(commandWithFire));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that contains a single Policy."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubWithPolicy extends ModelStub {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Policy policy;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPolicy(Policy policy) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.policy \u003d policy;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.policy.isSamePolicy(policy);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getPolicy(Policy input) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.policy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void setPolicy(Policy target, Policy editedPolicy) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.policy \u003d editedPolicy;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that always accept the Policy being added."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubAcceptingPolicyAdded extends ModelStub {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final ArrayList\u003cPolicy\u003e policiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return policiesAdded.stream().anyMatch(policy::isSamePolicy);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            policiesAdded.add(policy);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 135,
      "larrylawl": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MergePolicyConfirmedCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COVERAGE_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.util.PolicyBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePolicyCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePolicyConfirmedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.testutil.TestUtil.ModelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePolicyConfirmedCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void constructor_nullCommand_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MergePolicyConfirmedCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeConfirmedWithOneMergeLeft_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy validPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy inputPolicy \u003d new PolicyBuilder().withDescription(VALID_DESCRIPTION_FIRE_INSURANCE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyCommandStub mergeCommandStub \u003d new MergePolicyCommandStub(inputPolicy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPolicy modelStub \u003d new ModelStubWithPolicy(validPolicy);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePolicyConfirmedCommand(mergeCommandStub).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePolicyConfirmedCommand.MESSAGE_MERGE_FIELD_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Description.DATA_TYPE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"\\n\" + String.format(mergeCommandStub.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            inputPolicy), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(modelStub.getPolicy(), inputPolicy);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeConfirmedWithMoreThanOneMergeLeft_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy validPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy inputPolicy \u003d new PolicyBuilder().withDescription(VALID_DESCRIPTION_FIRE_INSURANCE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withCoverage(VALID_COVERAGE_FIRE_INSURANCE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyCommandStubWithMultipleMerges mergeCommandStub \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            new MergePolicyCommandStubWithMultipleMerges(inputPolicy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPolicy modelStub \u003d new ModelStubWithPolicy(validPolicy);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePolicyConfirmedCommand(mergeCommandStub).execute(modelStub);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePolicyConfirmedCommand.MESSAGE_MERGE_FIELD_SUCCESS, Description.DATA_TYPE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"\\n\" + mergeCommandStub.getNextMergePrompt(), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(modelStub.getPolicy(), new PolicyBuilder().withDescription(VALID_DESCRIPTION_FIRE_INSURANCE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .build());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy health \u003d new PolicyBuilder().withName(\"Health Insurance\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy fire \u003d new PolicyBuilder().withName(\"Fire Insurance\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyCommandStub commandWithHealth \u003d new MergePolicyCommandStub(health);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyCommandStub commandWithFire \u003d new MergePolicyCommandStub(fire);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyConfirmedCommand mergeHealthCommand \u003d new MergePolicyConfirmedCommand(commandWithHealth);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyConfirmedCommand mergeFireCommand \u003d new MergePolicyConfirmedCommand(commandWithFire);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(mergeHealthCommand.equals(mergeHealthCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyConfirmedCommand mergeHealthCommandCopy \u003d new MergePolicyConfirmedCommand(commandWithHealth);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(mergeHealthCommand.equals(mergeHealthCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeHealthCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeHealthCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different merge command-\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeHealthCommand.equals(mergeFireCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class MergePolicyCommandStub extends MergePolicyCommand {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * Creates an Merge Command to update the original {@code Policy} to the new {@code Policy}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * @param inputPolicy"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Policy originalPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public MergePolicyCommandStub(Policy inputPolicy) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            super(inputPolicy);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void updateOriginalPolicy(Policy editedPolicy) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.originalPolicy \u003d editedPolicy;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergePrompt() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            StringBuilder mergePrompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            mergePrompt.append(String.format(MERGE_COMMAND_PROMPT, Description.DATA_TYPE) + \"\\n\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(ORIGINAL_HEADER + originalPolicy.getDescription().description + \"\\n\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(INPUT_HEADER + super.getInputPolicy().getDescription().description);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return mergePrompt.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void removeFirstDifferentField() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergeFieldType() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return Description.DATA_TYPE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getInputPolicy() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return super.getInputPolicy();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getOriginalPolicy() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.originalPolicy;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean onlyOneMergeLeft() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class MergePolicyCommandStubWithMultipleMerges extends MergePolicyCommand {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * Creates an Merge Command to update the original {@code Policy} to the new {@code Policy}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * @param inputPolicy"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Policy originalPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private ArrayList\u003cString\u003e dataTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public MergePolicyCommandStubWithMultipleMerges(Policy inputPolicy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            super(inputPolicy);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.add(Description.DATA_TYPE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.add(Coverage.DATA_TYPE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void updateOriginalPolicy(Policy editedPolicy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.originalPolicy \u003d editedPolicy;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergePrompt() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            StringBuilder mergePrompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            mergePrompt.append(String.format(MERGE_COMMAND_PROMPT, Coverage.DATA_TYPE) + \"\\n\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(ORIGINAL_HEADER + originalPolicy.getCoverage().coverage + \"\\n\")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(INPUT_HEADER + super.getInputPolicy().getCoverage().coverage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return mergePrompt.toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void removeFirstDifferentField() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.remove(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergeFieldType() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return dataTypes.get(0);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getInputPolicy() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return super.getInputPolicy();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getOriginalPolicy() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.originalPolicy;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public ArrayList\u003cString\u003e getDataTypes() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.dataTypes;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean onlyOneMergeLeft() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that contains a single Policy."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubWithPolicy extends ModelStub {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Policy policy;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPolicy(Policy policy) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.policy \u003d policy;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.policy.isSamePolicy(policy);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getPolicy() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.policy;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public AddressBook getAddressBook() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void setPolicy(Policy target, Policy editedPolicy) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.policy \u003d editedPolicy;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that always accept the Policy being added."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubAcceptingPolicyAdded extends ModelStub {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final ArrayList\u003cPolicy\u003e policiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return policiesAdded.stream().anyMatch(policy::isSamePolicy);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            policiesAdded.add(policy);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 239,
      "larrylawl": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MergePolicyRejectedCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COVERAGE_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.commons.util.PolicyBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePolicyCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.merge.MergePolicyRejectedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.testutil.TestUtil.ModelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "public class MergePolicyRejectedCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void constructor_nullCommand_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MergePolicyRejectedCommand(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeRejectedWithOneMergeLeft_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy validPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy inputPolicy \u003d new PolicyBuilder().withDescription(VALID_DESCRIPTION_FIRE_INSURANCE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyCommandStub mergeCommandStub \u003d new MergePolicyCommandStub(inputPolicy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPolicy modelStub \u003d new ModelStubWithPolicy(validPolicy);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePolicyRejectedCommand(mergeCommandStub).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePolicyRejectedCommand.MESSAGE_MERGE_FIELD_NOT_EXECUTED,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Description.DATA_TYPE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"\\n\" + String.format(mergeCommandStub.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            mergeCommandStub.getOriginalPolicy()), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(modelStub.getPolicy(), new PolicyBuilder().build());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void execute_mergeConfirmedWithMoreThanOneMergeLeft_mergeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy validPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy inputPolicy \u003d new PolicyBuilder().withDescription(VALID_DESCRIPTION_FIRE_INSURANCE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withCoverage(VALID_COVERAGE_FIRE_INSURANCE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyCommandStubWithMultipleMerges mergeCommandStub \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            new MergePolicyCommandStubWithMultipleMerges(inputPolicy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPolicy modelStub \u003d new ModelStubWithPolicy(validPolicy);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        CommandResult commandResult \u003d new MergePolicyRejectedCommand(mergeCommandStub).execute(modelStub);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(String.format(MergePolicyRejectedCommand.MESSAGE_MERGE_FIELD_NOT_EXECUTED,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Description.DATA_TYPE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"\\n\" + mergeCommandStub.getNextMergePrompt(), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(modelStub.getPolicy(), new PolicyBuilder().build());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy alice \u003d new PolicyBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Policy bob \u003d new PolicyBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyCommandStub commandWithAlice \u003d new MergePolicyCommandStub(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyCommandStub commandWithBob \u003d new MergePolicyCommandStub(bob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyRejectedCommand mergeAliceCommand \u003d new MergePolicyRejectedCommand(commandWithAlice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyRejectedCommand mergeBobCommand \u003d new MergePolicyRejectedCommand(commandWithBob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(mergeAliceCommand.equals(mergeAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        MergePolicyRejectedCommand mergeAliceCommandCopy \u003d new MergePolicyRejectedCommand(commandWithAlice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(mergeAliceCommand.equals(mergeAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different Policy -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(mergeAliceCommand.equals(mergeBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class MergePolicyCommandStub extends MergePolicyCommand {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * Creates an Merge Command to update the original {@code Policy} to the new {@code Policy}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * @param inputPolicy"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Policy originalPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public MergePolicyCommandStub(Policy inputPolicy) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            super(inputPolicy);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void updateOriginalPolicy(Policy editedPolicy) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.originalPolicy \u003d editedPolicy;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergePrompt() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            StringBuilder mergePrompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            mergePrompt.append(String.format(MERGE_COMMAND_PROMPT, Description.DATA_TYPE) + \"\\n\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(ORIGINAL_HEADER + originalPolicy.getDescription().description + \"\\n\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(INPUT_HEADER + super.getInputPolicy().getDescription().description);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return mergePrompt.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void removeFirstDifferentField() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergeFieldType() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return Description.DATA_TYPE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getInputPolicy() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return super.getInputPolicy();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getOriginalPolicy() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.originalPolicy;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean onlyOneMergeLeft() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class MergePolicyCommandStubWithMultipleMerges extends MergePolicyCommand {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * Creates an Merge Command to update the original {@code Policy} to the new {@code Policy}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         * @param inputPolicy"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Policy originalPolicy \u003d new PolicyBuilder().build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private ArrayList\u003cString\u003e dataTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public MergePolicyCommandStubWithMultipleMerges(Policy inputPolicy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            super(inputPolicy);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.add(Description.DATA_TYPE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.add(Coverage.DATA_TYPE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void updateOriginalPolicy(Policy editedPolicy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.originalPolicy \u003d editedPolicy;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergePrompt() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            StringBuilder mergePrompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            mergePrompt.append(String.format(MERGE_COMMAND_PROMPT, Coverage.DATA_TYPE) + \"\\n\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(ORIGINAL_HEADER + originalPolicy.getCoverage().coverage + \"\\n\")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                .append(INPUT_HEADER + super.getInputPolicy().getCoverage().coverage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return mergePrompt.toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void removeFirstDifferentField() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            dataTypes.remove(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public String getNextMergeFieldType() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return dataTypes.get(0);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getInputPolicy() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return super.getInputPolicy();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getOriginalPolicy() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.originalPolicy;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public ArrayList\u003cString\u003e getDataTypes() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.dataTypes;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean onlyOneMergeLeft() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that contains a single Policy."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubWithPolicy extends ModelStub {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        private Policy policy;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        ModelStubWithPolicy(Policy policy) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.policy \u003d policy;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.policy.isSamePolicy(policy);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public Policy getPolicy() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return this.policy;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void setPolicy(Policy target, Policy editedPolicy) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            this.policy \u003d editedPolicy;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * A Model stub that always accept the Policy being added."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private class ModelStubAcceptingPolicyAdded extends ModelStub {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        final ArrayList\u003cPolicy\u003e policiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return policiesAdded.stream().anyMatch(policy::isSamePolicy);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            requireNonNull(policy);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            policiesAdded.add(policy);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 233,
      "larrylawl": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "class RedoCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     * Performs an undo for expectedModel and model."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private void performUndo() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_redoEditCommand_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new EditCommand(INDEX_FIRST_PERSON, DESC_AMY).execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new EditCommand(INDEX_FIRST_PERSON, DESC_BOB).execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new EditCommand(INDEX_FIRST_PERSON, DESC_AMY).execute(expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new EditCommand(INDEX_FIRST_PERSON, DESC_BOB).execute(expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            fail(\"Should not throw any exception.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        performUndo();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // multiple redoable states"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // single redoable state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // no undoable state"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.REDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_redoDeleteCommand_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new DeleteCommand(INDEX_FIRST_PERSON).execute(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new DeleteCommand(INDEX_FIRST_PERSON).execute(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new DeleteCommand(INDEX_FIRST_PERSON).execute(expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new DeleteCommand(INDEX_FIRST_PERSON).execute(expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            fail(\"Should not throw any exception.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        performUndo();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // multiple redoable states"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // single redoable state"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // no undoable state"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.REDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_redoAddCommand_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person person1 \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person person2 \u003d new PersonBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new AddCommand(person1).execute(model);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new AddCommand(person2).execute(model);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new AddCommand(person1).execute(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new AddCommand(person2).execute(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            fail(\"Should not throw any exception.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        performUndo();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // multiple redoable states"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // single redoable state"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // no undoable state"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.REDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_cannotRedoWithPreviousCommand_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        new ListPeopleCommand().execute(expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(new RedoCommand(), expectedModel, RedoCommand.REDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_cannoRedoWithoutPreviousCommand_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Model newModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(new RedoCommand(), newModel, RedoCommand.REDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnassignPolicyCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HEALTH_INSURANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPolicyAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_POLICY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "class UnassignPolicyCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_unfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person personToAssign \u003d model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Policy policyToAssign \u003d model.getAddressBook().getPolicyList().get(INDEX_FIRST_POLICY.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person assignedPerson \u003d new PersonBuilder(personToAssign).removePolicies(policyToAssign).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UnassignPolicyCommand unassignPolicyCommand \u003d new UnassignPolicyCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            policyToAssign.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        String expectedMessage \u003d String.format(UnassignPolicyCommand.MESSAGE_UNASSIGN_POLICY_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            policyToAssign.getName(), personToAssign.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.setPerson(model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            assignedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(unassignPolicyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPolicyAtIndex(model, INDEX_FIRST_POLICY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Policy policyInFilteredList \u003d model.getFilteredPolicyList().get(INDEX_FIRST_POLICY.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person unassignedPerson \u003d new PersonBuilder(personInFilteredList).removePolicies(policyInFilteredList).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UnassignPolicyCommand unassignPolicyCommand \u003d new UnassignPolicyCommand(INDEX_FIRST_POLICY,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            policyInFilteredList.getName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        String expectedMessage \u003d String.format(UnassignPolicyCommand.MESSAGE_UNASSIGN_POLICY_SUCCESS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            model.getFilteredPolicyList().get(INDEX_FIRST_POLICY.getZeroBased()).getName(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()).getName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPolicyAtIndex(expectedModel, INDEX_FIRST_POLICY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), unassignedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.saveAddressBookState();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(unassignPolicyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_alreadyAssignedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        final PolicyName policyName \u003d new PolicyName(VALID_NAME_HEALTH_INSURANCE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UnassignPolicyCommand unassignPolicyCommand \u003d new UnassignPolicyCommand(INDEX_SECOND_PERSON, policyName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(unassignPolicyCommand, model, String.format("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            UnassignPolicyCommand.MESSAGE_ALREADY_UNASSIGNED,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased()).getName(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            policyName));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_alreadyUnassignedFilteredList_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        final PolicyName policyName \u003d new PolicyName(VALID_NAME_HEALTH_INSURANCE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UnassignPolicyCommand unassignPolicyCommand \u003d new UnassignPolicyCommand(INDEX_FIRST_PERSON, policyName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(unassignPolicyCommand, model, String.format("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            UnassignPolicyCommand.MESSAGE_ALREADY_UNASSIGNED,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()).getName(), policyName));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UnassignPolicyCommand unassignPolicyCommand \u003d new UnassignPolicyCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new PolicyName(VALID_NAME_HEALTH_INSURANCE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(unassignPolicyCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    void execute_policyNotInAddressBook_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        final PolicyName policyName \u003d new PolicyName(\"TESTING INVALID POLICY\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UnassignPolicyCommand unassignPolicyCommand \u003d new UnassignPolicyCommand(INDEX_FIRST_PERSON, policyName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(unassignPolicyCommand, model, String.format(UnassignPolicyCommand.MESSAGE_POLICY_NOT_FOUND,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            policyName));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // check if given out of bounds index is still within range for entire list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UnassignPolicyCommand unassignPolicyCommand \u003d new UnassignPolicyCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new PolicyName(VALID_NAME_HEALTH_INSURANCE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(unassignPolicyCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        final PolicyName policyName \u003d new PolicyName(VALID_NAME_HEALTH_INSURANCE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        final UnassignPolicyCommand standardCommand \u003d new UnassignPolicyCommand(INDEX_FIRST_PERSON, policyName);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UnassignPolicyCommand newCommand \u003d new UnassignPolicyCommand(INDEX_FIRST_PERSON, policyName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertTrue(standardCommand.equals(newCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        newCommand \u003d new UnassignPolicyCommand(INDEX_SECOND_PERSON, policyName);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertFalse(standardCommand.equals(newCommand));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // different objects -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_undoEditCommand_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new EditCommand(INDEX_FIRST_PERSON, DESC_AMY).execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new EditCommand(INDEX_FIRST_PERSON, DESC_BOB).execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new EditCommand(INDEX_FIRST_PERSON, DESC_AMY).execute(expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new EditCommand(INDEX_FIRST_PERSON, DESC_BOB).execute(expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            fail(\"Should not throw any exception.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // multiple undoable states"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // only one undoable state"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // no undoable state"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.UNDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_undoDeleteCommand_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new DeleteCommand(INDEX_FIRST_PERSON).execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new DeleteCommand(INDEX_FIRST_PERSON).execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new DeleteCommand(INDEX_FIRST_PERSON).execute(expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new DeleteCommand(INDEX_FIRST_PERSON).execute(expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            fail(\"Should not throw any exception.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // multiple undoable states"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // only one undoable state"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // no undoable state"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.UNDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_undoAddCommand_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person person1 \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person person2 \u003d new PersonBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new AddCommand(person1).execute(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new AddCommand(person2).execute(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new AddCommand(person1).execute(expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            new AddCommand(person2).execute(expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "            fail(\"Should not throw any exception.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // multiple undoable states"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // only one undoable state"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // no undoable state"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.UNDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_cannotUndoWithPreviousCommand_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        new ListPeopleCommand().execute(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(undoCommand, expectedModel, UndoCommand.UNDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void execute_cannotUndoWithoutPreviousCommand_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Model newModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertCommandFailure(undoCommand, newModel, UndoCommand.UNDO_NOT_POSSIBLE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_OF_BIRTH_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.POLICY_DESC_LIFE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SMOKER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    // POLICIES HAVENT BEEN ADDED"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withPolicies().withTags().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + GENDER_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + GENDER_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // multiple date of births - last date of birth accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // multiple gender - last gender accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_AMY + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parse_policyFieldIncluded_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + ADDRESS_DESC_AMY + DATE_OF_BIRTH_DESC_AMY + GENDER_DESC_AMY + POLICY_DESC_LIFE, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parse_tagFieldIncluded_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + ADDRESS_DESC_AMY + DATE_OF_BIRTH_DESC_AMY + GENDER_DESC_AMY + TAG_DESC_SMOKER, expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_AMY,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // missing nric prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_AMY,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_AMY,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + VALID_EMAIL_BOB + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_AMY,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + VALID_ADDRESS_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_AMY,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // missing date of birth prefix"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + ADDRESS_DESC_BOB + VALID_DATE_OF_BIRTH_BOB + GENDER_DESC_AMY,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + ADDRESS_DESC_BOB + VALID_DATE_OF_BIRTH_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_NRIC_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "                + VALID_ADDRESS_BOB + VALID_DATE_OF_BIRTH_BOB,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_NRIC_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB, Nric.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + ParseExceptionHandler.CONTACT_SUGGESTION_HEADER + VALID_NAME_BOB + \"\\n\" + \"Phone Number: \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + VALID_PHONE_BOB + \"\\n\" + \"Email: \" + VALID_EMAIL_BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // invalid nric and invalid phone"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_NRIC_DESC + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB, Nric.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + ParseExceptionHandler.CONTACT_SUGGESTION_HEADER + VALID_NAME_BOB + \"\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"Email: \" + VALID_EMAIL_BOB);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // invalid nric and invalid email"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_NRIC_DESC + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB, Nric.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + ParseExceptionHandler.CONTACT_SUGGESTION_HEADER + VALID_NAME_BOB + \"\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + \"Phone Number: \" + VALID_PHONE_BOB);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            Phone.MESSAGE_CONSTRAINTS + ParseExceptionHandler.CONTACT_SUGGESTION_HEADER"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + VALID_NAME_BOB + \"\\n\" + \"Email: \" + VALID_EMAIL_BOB);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            Email.MESSAGE_CONSTRAINTS + ParseExceptionHandler.CONTACT_SUGGESTION_HEADER"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + VALID_NAME_BOB + \"\\n\" + \"Phone: \" + VALID_PHONE_BOB);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + INVALID_ADDRESS_DESC + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // invalid date of birth"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + ADDRESS_DESC_BOB + INVALID_DATE_OF_BIRTH_DESC + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + INVALID_GENDER_DESC, Gender.getMessageConstraints());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + INVALID_ADDRESS_DESC + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 69,
      "larrylawl": 52,
      "chaitanyabaranwal": 1,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.ListPeopleCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.logic.commands.SuggestionCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(parser.parseCommand(ListPeopleCommand.COMMAND_WORD) instanceof ListPeopleCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(parser.parseCommand(ListPeopleCommand.COMMAND_WORD + \" 3\") instanceof ListPeopleCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseCommandWithoutSuggestions_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        AddressBookParser parserWithoutSuggestions \u003d new AddressBookParser(false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            ) -\u003e parserWithoutSuggestions.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseCommandWithSuggestions_unknownCommand_success() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(parser.parseCommand(\"unknownCommand\") instanceof SuggestionCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 13,
      "chaitanyabaranwal": 1,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AssignPolicyCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_POLICY_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.POLICY_DESC_HEALTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.POLICY_DESC_LIFE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LIFE_INSURANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.AssignPolicyCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "class AssignPolicyCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignPolicyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private AssignPolicyCommandParser parser \u003d new AssignPolicyCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void parse_policyNameSpecified_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + POLICY_DESC_LIFE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        PolicyName policyName \u003d new PolicyName(VALID_NAME_LIFE_INSURANCE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        AssignPolicyCommand expectedCommand \u003d new AssignPolicyCommand(targetIndex, policyName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + POLICY_DESC_HEALTH + POLICY_DESC_LIFE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        PolicyName policyName \u003d new PolicyName(VALID_NAME_LIFE_INSURANCE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        AssignPolicyCommand expectedCommand \u003d new AssignPolicyCommand(targetIndex, policyName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_POLICY_DESC, PolicyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertParseFailure(parser, \"-5\" + POLICY_DESC_LIFE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertParseFailure(parser, \"0\" + POLICY_DESC_LIFE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 2,
      "chaitanyabaranwal": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_OF_BIRTH_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withNric(VALID_NRIC_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withDateOfBirth(VALID_DATE_OF_BIRTH_AMY).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 11,
      "-": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Coverage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.EndAge;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.Price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.policy.StartAge;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.visual.DisplayIndicator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"J001\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String INVALID_DATE_OF_BIRTH \u003d \"13/10/2019\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String INVALID_COVERAGE \u003d \"2 months\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"50SGD\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String INVALID_START_AGE \u003d \"twenty\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String INVALID_END_AGE \u003d \"twenty\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#smoker\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S9876543A\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_PHONE \u003d \"91234567\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_DATE_OF_BIRTH \u003d \"13.10.2019\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Insurance for health\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_COVERAGE \u003d \"months/2\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_PRICE \u003d \"$50\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_START_AGE \u003d \"20\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_END_AGE \u003d \"20\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"smoker\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"diabetic\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String VALID_DISPLAY_INDICATOR \u003d DisplayIndicator.AGE_GROUP_BREAKDOWN;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String INVALID_DISPLAY_INDICATOR \u003d \"A+ for CS2103\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseNric_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((String) null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseNric_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNric(INVALID_NRIC));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseNric_validValueWithoutWhitespace_returnsNric() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseNric_validValueWithWhitespace_returnsTrimmedNric() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String nricWithWhitespace \u003d WHITESPACE + VALID_NRIC + WHITESPACE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(nricWithWhitespace));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseDateOfBirth_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateOfBirth((String) null));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseDateOfBirth_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateOfBirth(INVALID_DATE_OF_BIRTH));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseDateOfBirth_validValueWithoutWhitespace_returnsDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(VALID_DATE_OF_BIRTH));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseDateOfBirth_validValueWithWhitespace_returnsTrimmedDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String dateOfBirthWithWhitespace \u003d WHITESPACE + VALID_DATE_OF_BIRTH + WHITESPACE;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DATE_OF_BIRTH);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDateOfBirth(dateOfBirthWithWhitespace));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseCoverage_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCoverage((String) null));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseCoverage_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCoverage(INVALID_COVERAGE));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseCoverage_validValueWithoutWhitespace_returnsCoverage() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Coverage expectedCoverage \u003d new Coverage(VALID_COVERAGE);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedCoverage, ParserUtil.parseCoverage(VALID_COVERAGE));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseCoverage_validValueWithWhitespace_returnsTrimmedCoverage() throws Exception {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String coverageWithWhitespace \u003d WHITESPACE + VALID_COVERAGE + WHITESPACE;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Coverage expectedCoverage \u003d new Coverage(VALID_COVERAGE);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedCoverage, ParserUtil.parseCoverage(coverageWithWhitespace));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parsePrice_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePrice((String) null));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parsePrice_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePrice(INVALID_PRICE));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parsePrice_validValueWithoutWhitespace_returnsPrice() throws Exception {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_PRICE);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parsePrice(VALID_PRICE));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parsePrice_validValueWithWhitespace_returnsTrimmedPrice() throws Exception {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String priceWithWhitespace \u003d WHITESPACE + VALID_PRICE + WHITESPACE;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_PRICE);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parsePrice(priceWithWhitespace));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseStartAge_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStartAge((String) null));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseStartAge_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStartAge(INVALID_START_AGE));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseStartAge_validValueWithoutWhitespace_returnsStartAge() throws Exception {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StartAge expectedStartAge \u003d new StartAge(VALID_START_AGE);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedStartAge, ParserUtil.parseStartAge(VALID_START_AGE));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseStartAge_validValueWithWhitespace_returnsTrimmedStartAge() throws Exception {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String startAgeWithWhitespace \u003d WHITESPACE + VALID_START_AGE + WHITESPACE;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        StartAge expectedStartAge \u003d new StartAge(VALID_START_AGE);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedStartAge, ParserUtil.parseStartAge(startAgeWithWhitespace));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseEndAge_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEndAge((String) null));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseEndAge_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_END_AGE));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseEndAge_validValueWithoutWhitespace_returnsEndAge() throws Exception {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        EndAge expectedEndAge \u003d new EndAge(VALID_END_AGE);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedEndAge, ParserUtil.parseEndAge(VALID_END_AGE));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public void parseEndAge_validValueWithWhitespace_returnsTrimmedEndAge() throws Exception {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        String endAgeWithWhitespace \u003d WHITESPACE + VALID_END_AGE + WHITESPACE;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        EndAge expectedEndAge \u003d new EndAge(VALID_END_AGE);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertEquals(expectedEndAge, ParserUtil.parseEndAge(VALID_END_AGE));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public void parseDisplayIndicator_validDisplayIndicator_returnsDisplayIndicator() throws Exception {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        DisplayIndicator actualDisplayIndicator \u003d ParserUtil.parseDisplayIndicator(VALID_DISPLAY_INDICATOR);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        DisplayIndicator expectedDisplayIndicator \u003d new DisplayIndicator(VALID_DISPLAY_INDICATOR);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertEquals(actualDisplayIndicator, expectedDisplayIndicator);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public void parseDisplayIndicator_invalidDisplayIndicator_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDisplayIndicator(INVALID_DISPLAY_INDICATOR));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 186,
      "larrylawl": 15,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UnassignPolicyCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_POLICY_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.POLICY_DESC_HEALTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.POLICY_DESC_LIFE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LIFE_INSURANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.UnassignPolicyCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "class UnassignPolicyCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnassignPolicyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private UnassignPolicyCommandParser parser \u003d new UnassignPolicyCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void parse_policyNameSpecified_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + POLICY_DESC_LIFE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        PolicyName policyName \u003d new PolicyName(VALID_NAME_LIFE_INSURANCE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UnassignPolicyCommand expectedCommand \u003d new UnassignPolicyCommand(targetIndex, policyName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + POLICY_DESC_HEALTH + POLICY_DESC_LIFE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        PolicyName policyName \u003d new PolicyName(VALID_NAME_LIFE_INSURANCE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        UnassignPolicyCommand expectedCommand \u003d new UnassignPolicyCommand(targetIndex, policyName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_POLICY_DESC, PolicyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertParseFailure(parser, \"-5\" + POLICY_DESC_LIFE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertParseFailure(parser, \"0\" + POLICY_DESC_LIFE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 2,
      "chaitanyabaranwal": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SMOKER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SMOKER)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SMOKER)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        private final ObservableList\u003cPolicy\u003e policies \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            this.policies.setAll(policies);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ybchen97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        public ObservableList\u003cPolicy\u003e getPolicyList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "            return policies;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ybchen97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 3,
      "larrylawl": 1,
      "chaitanyabaranwal": 1,
      "ybchen97": 8,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CommandHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.ListPeopleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.logic.commands.ListPolicyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "class CommandHistoryTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void addCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        commandHistory.addCommand(ListPeopleCommand.COMMAND_WORD, ListPeopleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertEquals(commandHistory.getHistory().size(), 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void getHistory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        commandHistory.addCommand(ListPeopleCommand.COMMAND_WORD, ListPeopleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        commandHistory.addCommand(ListPolicyCommand.COMMAND_WORD, ListPolicyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        ObservableList\u003cPair\u003cString, String\u003e\u003e testList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        testList.add(new Pair\u003c\u003e(ListPolicyCommand.COMMAND_WORD, ListPolicyCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        testList.add(new Pair\u003c\u003e(ListPeopleCommand.COMMAND_WORD, ListPeopleCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertEquals(commandHistory.getHistory(), FXCollections.unmodifiableObservableList(testList));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // if same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertEquals(commandHistory, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // if different kind of objects -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertNotEquals(commandHistory, new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // if objects with same command history -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedCommandHistory.addCommand(ListPeopleCommand.COMMAND_WORD, ListPeopleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        commandHistory.addCommand(ListPeopleCommand.COMMAND_WORD, ListPeopleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertEquals(commandHistory, expectedCommandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // objects with different command history -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedCommandHistory.addCommand(\"hello\", \"world\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertNotEquals(commandHistory, expectedCommandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.testutil.TypicalAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public void getPolicyPopularityBreakdown_typicalAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        modelManager.setAddressBook(TypicalAddressBook.getTypicalAddressBook());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e result \u003d modelManager.getPolicyPopularityBreakdown();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e expected \u003d TypicalPersons.getTypicalPolicyPopularityBreakdown();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertEquals(result, expected);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public void getAgeGroupBreakdown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        modelManager.setAddressBook(TypicalAddressBook.getTypicalAddressBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e result \u003d modelManager.getAgeGroupBreakdown();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e expected \u003d TypicalPersons.getAgeGroupBreakdown();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertEquals(result, expected);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public void getGenderBreakdown() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        modelManager.setAddressBook(TypicalAddressBook.getTypicalAddressBook());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e result \u003d modelManager.getGenderBreakdown();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e expected \u003d TypicalPersons.getGenderBreakdown();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        assertEquals(result, expected);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 27,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/StatefulAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "class StatefulAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private StatefulAddressBook addressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private StatefulAddressBook expectedAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    private void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        addressBook \u003d new StatefulAddressBook(getTypicalAddressBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook \u003d new StatefulAddressBook(addressBook);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person person1 \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person person2 \u003d new PersonBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.addPerson(person1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.saveAddressBookState();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.addPerson(person2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.saveAddressBookState();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // first undo does not mean the state is equal yet"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.undo();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertNotEquals(expectedAddressBook.getPersonList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // second undo sets the person list equal to the main address book\u0027s person list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.undo();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertEquals(expectedAddressBook.getPersonList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person person1 \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        Person person2 \u003d new PersonBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.addPerson(person1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.saveAddressBookState();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        addressBook.addPerson(person1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        addressBook.saveAddressBookState();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.addPerson(person2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.saveAddressBookState();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.undo();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.undo();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // two undoes do n9ot make the person list equal"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertNotEquals(expectedAddressBook.getPersonList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // a redo would make the two address books equal"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.redo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertEquals(expectedAddressBook.getPersonList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void canUndo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.saveAddressBookState();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.saveAddressBookState();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // multiple undoable states"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertTrue(expectedAddressBook.canUndo());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.undo();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // single undoable state"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertTrue(expectedAddressBook.canUndo());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.undo();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // no undoable state"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertFalse(expectedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void canRedo() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.saveAddressBookState();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.saveAddressBookState();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.undo();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.undo();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // multiple redoable states"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertTrue(expectedAddressBook.canRedo());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.redo();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // single redoable state"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertTrue(expectedAddressBook.canRedo());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        expectedAddressBook.redo();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // no redoable state"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertFalse(expectedAddressBook.canRedo());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // exactly the same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertEquals(addressBook, addressBook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // different kinds of objects -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertNotEquals(addressBook, new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // same parameters -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        StatefulAddressBook standardAddressBook \u003d new StatefulAddressBook(getTypicalAddressBook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertEquals(addressBook, standardAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        // different parameters -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        standardAddressBook.saveAddressBookState();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        assertNotEquals(addressBook, standardAddressBook);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"92345678\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 1,
      "chaitanyabaranwal": 1,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SMOKER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withTags(VALID_TAG_SMOKER).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .withTags(VALID_TAG_SMOKER).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SMOKER).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_SMOKER).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 9,
      "chaitanyabaranwal": 1,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"911\")); // less than 9 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"88887541\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"+65 98753573\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"+6565241234\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 5,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SMOKER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SMOKER)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_SMOKER)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 3,
      "chaitanyabaranwal": 1,
      "-": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"U000001J\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String INVALID_BIRTHDAY \u003d \"13.13.2013\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String INVALID_POLICY \u003d \"#health\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"not sure\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final String VALID_DATE_OF_BIRTH \u003d BENSON.getDateOfBirth().value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    private static final List\u003cJsonAdaptedPolicy\u003e VALID_POLICIES \u003d BENSON.getPolicies().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .map(JsonAdaptedPolicy::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            new JsonAdaptedPerson(INVALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                VALID_DATE_OF_BIRTH, VALID_GENDER, VALID_POLICIES, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            VALID_DATE_OF_BIRTH, VALID_GENDER, VALID_POLICIES, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                VALID_DATE_OF_BIRTH, VALID_GENDER, VALID_POLICIES, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            VALID_DATE_OF_BIRTH, VALID_GENDER, VALID_POLICIES, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                VALID_DATE_OF_BIRTH, VALID_GENDER, VALID_POLICIES, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            VALID_DATE_OF_BIRTH, VALID_GENDER, VALID_POLICIES, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                VALID_DATE_OF_BIRTH, VALID_GENDER, VALID_POLICIES, VALID_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            VALID_DATE_OF_BIRTH, VALID_GENDER, VALID_POLICIES, VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "                VALID_DATE_OF_BIRTH, VALID_GENDER, VALID_POLICIES, invalidTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 17,
      "larrylawl": 11,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 1,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.testutil.TypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalAddressBook.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 2,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.DateOfBirth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        descriptor.setNric(person.getNric());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        descriptor.setDateOfBirth(person.getDateOfBirth());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public EditPersonDescriptorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        descriptor.setNric(new Nric(nric));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "     * Sets the {@code dateOfBirth} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public EditPersonDescriptorBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        descriptor.setDateOfBirth(new DateOfBirth(dateOfBirth));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 15,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        sb.append(PREFIX_NRIC + person.getNric().nric + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        sb.append(PREFIX_DATE_OF_BIRTH + person.getDateOfBirth().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().gender + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        person.getPolicies().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            s -\u003e sb.append(PREFIX_POLICY + s.getName().policyName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.nric).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        descriptor.getDateOfBirth().ifPresent(dateOfBirth -\u003e sb.append(PREFIX_DATE_OF_BIRTH)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "            .append(dateOfBirth.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 11,
      "larrylawl": 2,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.commons.core.UserSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.PolicyName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static class ModelStub implements Model {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public UserSettings getUserSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void setUserSettings(UserSettings userSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            return person;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void addPolicy(Policy policy) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public Policy getPolicy(Policy policy) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public Policy getPolicyWithName(PolicyName policyName) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public boolean hasPolicy(Policy policy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public boolean hasPolicyWithName(PolicyName policyName) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void deletePolicy(Policy target) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void setPolicy(Policy target, Policy editedPolicy) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public ObservableList\u003cPolicy\u003e getFilteredPolicyList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public ObservableMap\u003cString, Integer\u003e getPolicyPopularityBreakdown() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public ObservableMap\u003cString, Integer\u003e getAgeGroupBreakdown() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public ObservableMap\u003cString, Integer\u003e getGenderBreakdown() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void updateFilteredPolicyList(Predicate\u003cPolicy\u003e predicate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        public void saveAddressBookState() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 184,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAddressBook.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalPolicy.getTypicalPolicy;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * A utility class containing an address book to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class TypicalAddressBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        for (Policy policy : getTypicalPolicy()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "            ab.addPolicy(policy);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final Index INDEX_FIRST_POLICY \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final Index INDEX_SECOND_POLICY \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "    public static final Index INDEX_THIRD_POLICY \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chaitanyabaranwal": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.commons.util.TimeUtil.ABOVE_SIXTYFIVE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.commons.util.TimeUtil.BELOW_TWENTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.commons.util.TimeUtil.TWENTY_TO_SIXTYFOUR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DIABETIC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SMOKER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.model.person.Gender.FEMALE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.model.person.Gender.MALE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalPolicy.FIRE_INSURANCE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalPolicy.HEALTH_INSURANCE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.testutil.TypicalPolicy.LIFE_INSURANCE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withNric(\"S0000001J\").withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withPhone(\"94351253\").withDateOfBirth(\"12.12.1992\").withGender(\"Female\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withPolicies(HEALTH_INSURANCE, FIRE_INSURANCE).withTags(\"diabetic\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withNric(\"S0000002J\").withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withDateOfBirth(\"12.12.1922\").withGender(\"Male\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "        .withPolicies(LIFE_INSURANCE).withTags(\"smoker\", \"disabled\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withNric(\"S0000003J\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withPhone(\"95352563\").withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDateOfBirth(\"6.6.1996\").withGender(\"Male\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withNric(\"S0000004J\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withPhone(\"87652533\").withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDateOfBirth(\"14.2.2019\").withGender(\"Male\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withNric(\"S0000005J\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withPhone(\"94822247\").withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDateOfBirth(\"17.5.2000\").withGender(\"Male\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withNric(\"S0000006J\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withPhone(\"94824279\").withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDateOfBirth(\"15.8.2008\").withGender(\"Female\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withNric(\"S0000007J\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withPhone(\"94824425\").withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDateOfBirth(\"5.5.2015\").withGender(\"Male\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withNric(\"S0123456H\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withPhone(\"84824248\").withEmail(\"stefan@example.com\").withAddress(\"little india\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDateOfBirth(\"22.4.1988\").withGender(\"Female\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withNric(\"T0987656H\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withPhone(\"84821318\").withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDateOfBirth(\"16.7.2017\").withGender(\"Male\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDateOfBirth(VALID_DATE_OF_BIRTH_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withTags(VALID_TAG_DIABETIC).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDateOfBirth(VALID_DATE_OF_BIRTH_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chowyiyin"
        },
        "content": "        .withTags(VALID_TAG_DIABETIC, VALID_TAG_SMOKER)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static ObservableMap\u003cString, Integer\u003e getTypicalPolicyPopularityBreakdown() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e result \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.put(HEALTH_INSURANCE.getName().toString(), 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.put(LIFE_INSURANCE.getName().toString(), 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.put(FIRE_INSURANCE.getName().toString(), 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static ObservableMap\u003cString, Integer\u003e getAgeGroupBreakdown() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e result \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.put(BELOW_TWENTY, 4);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.put(TWENTY_TO_SIXTYFOUR, 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.put(ABOVE_SIXTYFIVE, 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static ObservableMap\u003cString, Integer\u003e getGenderBreakdown() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        ObservableMap\u003cString, Integer\u003e result \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.put(MALE, 5);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        result.put(FEMALE, 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chowyiyin": 28,
      "larrylawl": 49,
      "chaitanyabaranwal": 2,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPolicy.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COVERAGE_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COVERAGE_HEALTH_INSURANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COVERAGE_LIFE_INSURANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CRITERIA_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CRITERIA_HEALTH_INSURANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CRITERIA_LIFE_INSURANCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HEALTH_INSURANCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_LIFE_INSURANCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_AGE_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_AGE_HEALTH_INSURANCE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_AGE_LIFE_INSURANCE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HEALTH_INSURANCE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_LIFE_INSURANCE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_HEALTH_INSURANCE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_LIFE_INSURANCE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_AGE_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_AGE_HEALTH_INSURANCE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_AGE_LIFE_INSURANCE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FIRE_INSURANCE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HEALTH_INSURANCE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LIFE_INSURANCE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chaitanyabaranwal"
        },
        "content": "import seedu.address.commons.util.PolicyBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "import seedu.address.model.policy.Policy;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " * A utility class containing a list of {@code Policy} objects to be used in tests."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "larrylawl"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "public class TypicalPolicy {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final Policy HEALTH_INSURANCE \u003d new PolicyBuilder().withName(VALID_NAME_HEALTH_INSURANCE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDescription(VALID_DESCRIPTION_HEALTH_INSURANCE).withCoverage(VALID_COVERAGE_HEALTH_INSURANCE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withStartAge(VALID_START_AGE_HEALTH_INSURANCE).withEndAge(VALID_END_AGE_HEALTH_INSURANCE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withPrice(VALID_PRICE_HEALTH_INSURANCE).withCriteria(VALID_CRITERIA_HEALTH_INSURANCE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withTags(VALID_TAG_HEALTH_INSURANCE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final Policy LIFE_INSURANCE \u003d new PolicyBuilder().withName(VALID_NAME_LIFE_INSURANCE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDescription(VALID_DESCRIPTION_LIFE_INSURANCE).withCoverage(VALID_COVERAGE_LIFE_INSURANCE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withStartAge(VALID_START_AGE_LIFE_INSURANCE).withEndAge(VALID_END_AGE_LIFE_INSURANCE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withPrice(VALID_PRICE_LIFE_INSURANCE).withCriteria(VALID_CRITERIA_LIFE_INSURANCE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withTags(VALID_TAG_LIFE_INSURANCE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static final Policy FIRE_INSURANCE \u003d new PolicyBuilder().withName(VALID_NAME_FIRE_INSURANCE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withDescription(VALID_DESCRIPTION_FIRE_INSURANCE).withCoverage(VALID_COVERAGE_FIRE_INSURANCE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withStartAge(VALID_START_AGE_FIRE_INSURANCE).withEndAge(VALID_END_AGE_FIRE_INSURANCE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withPrice(VALID_PRICE_FIRE_INSURANCE).withCriteria(VALID_CRITERIA_FIRE_INSURANCE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        .withTags(VALID_TAG_FIRE_INSURANCE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    private TypicalPolicy() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public static List\u003cPolicy\u003e getTypicalPolicy() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HEALTH_INSURANCE, LIFE_INSURANCE, FIRE_INSURANCE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "larrylawl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "larrylawl": 64,
      "chaitanyabaranwal": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "larrylawl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "larrylawl": 2,
      "-": 34
    }
  }
]
